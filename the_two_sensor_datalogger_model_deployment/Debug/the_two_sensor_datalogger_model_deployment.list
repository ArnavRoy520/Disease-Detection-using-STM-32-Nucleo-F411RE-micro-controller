
the_two_sensor_datalogger_model_deployment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fc4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000075a8  08008168  08008168  00018168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f710  0800f710  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800f710  0800f710  0001f710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f718  0800f718  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f718  0800f718  0001f718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f71c  0800f71c  0001f71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800f720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000200  0800f920  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  0800f920  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .comment      00000087  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f0d5  00000000  00000000  000202b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f23  00000000  00000000  0002f38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  000312b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c48  00000000  00000000  00032230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000177f2  00000000  00000000  00032e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b51  00000000  00000000  0004a66a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092d70  00000000  00000000  0005c1bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055c0  00000000  00000000  000eef2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000f44ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800814c 	.word	0x0800814c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0800814c 	.word	0x0800814c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <MLX90614_Init>:
float MLX90614_ReadTempAmbient(void);
float MLX90614_ReadTempObject1(void);
float MLX90614_ReadTempObject2(void);

// Function Definitions
void MLX90614_Init(void) {
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
    // No special initialization required for MLX90614
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	0000      	movs	r0, r0
 8000f64:	0000      	movs	r0, r0
	...

08000f68 <MLX90614_ReadTemp>:

float MLX90614_ReadTemp(uint8_t reg) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af04      	add	r7, sp, #16
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[3];
    uint16_t data;
    float temp;

    HAL_I2C_Mem_Read(&hi2c2, MLX90614_ADDR << 1, reg, 1, buffer, 3, HAL_MAX_DELAY);
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	9302      	str	r3, [sp, #8]
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2301      	movs	r3, #1
 8000f88:	21b4      	movs	r1, #180	; 0xb4
 8000f8a:	481b      	ldr	r0, [pc, #108]	; (8000ff8 <MLX90614_ReadTemp+0x90>)
 8000f8c:	f001 fd84 	bl	8002a98 <HAL_I2C_Mem_Read>

    data = (buffer[1] << 8) | buffer[0];
 8000f90:	7b7b      	ldrb	r3, [r7, #13]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	7b3b      	ldrb	r3, [r7, #12]
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	82fb      	strh	r3, [r7, #22]
    temp = (data * 0.02) - 273.15;
 8000fa0:	8afb      	ldrh	r3, [r7, #22]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fac6 	bl	8000534 <__aeabi_i2d>
 8000fa8:	a30f      	add	r3, pc, #60	; (adr r3, 8000fe8 <MLX90614_ReadTemp+0x80>)
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fae:	f7ff fb2b 	bl	8000608 <__aeabi_dmul>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	a30d      	add	r3, pc, #52	; (adr r3, 8000ff0 <MLX90614_ReadTemp+0x88>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff f96a 	bl	8000298 <__aeabi_dsub>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fdf4 	bl	8000bb8 <__aeabi_d2f>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	613b      	str	r3, [r7, #16]

    return temp;
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	ee07 3a90 	vmov	s15, r3
}
 8000fda:	eeb0 0a67 	vmov.f32	s0, s15
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	f3af 8000 	nop.w
 8000fe8:	47ae147b 	.word	0x47ae147b
 8000fec:	3f947ae1 	.word	0x3f947ae1
 8000ff0:	66666666 	.word	0x66666666
 8000ff4:	40711266 	.word	0x40711266
 8000ff8:	2000028c 	.word	0x2000028c

08000ffc <MLX90614_ReadTempAmbient>:

float MLX90614_ReadTempAmbient(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
    return MLX90614_ReadTemp(MLX90614_TA);
 8001000:	2006      	movs	r0, #6
 8001002:	f7ff ffb1 	bl	8000f68 <MLX90614_ReadTemp>
 8001006:	eef0 7a40 	vmov.f32	s15, s0
}
 800100a:	eeb0 0a67 	vmov.f32	s0, s15
 800100e:	bd80      	pop	{r7, pc}

08001010 <MLX90614_ReadTempObject1>:

float MLX90614_ReadTempObject1(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
    return MLX90614_ReadTemp(MLX90614_TOBJ1);
 8001014:	2007      	movs	r0, #7
 8001016:	f7ff ffa7 	bl	8000f68 <MLX90614_ReadTemp>
 800101a:	eef0 7a40 	vmov.f32	s15, s0
}
 800101e:	eeb0 0a67 	vmov.f32	s0, s15
 8001022:	bd80      	pop	{r7, pc}

08001024 <MAX30102_Init>:
uint16_t previousTime = 0;
int peakDetected = 0;
float timeInterval;
uint32_t lastPeakTime = 0;
// Function prototypes
uint8_t MAX30102_Init() {
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af04      	add	r7, sp, #16
    uint8_t data;
    // Reset the device
    data = 0x40;
 800102a:	2340      	movs	r3, #64	; 0x40
 800102c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR << 1, MAX30102_MODE_CONFIG, 1, &data, 1, HAL_MAX_DELAY);
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	2301      	movs	r3, #1
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	1dfb      	adds	r3, r7, #7
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	2209      	movs	r2, #9
 8001040:	21ae      	movs	r1, #174	; 0xae
 8001042:	4813      	ldr	r0, [pc, #76]	; (8001090 <MAX30102_Init+0x6c>)
 8001044:	f001 fc2e 	bl	80028a4 <HAL_I2C_Mem_Write>
//    else{
//    	printf("CONNECTION SUCCESSFUL!\r\n");
//    }

    // Set LED pulse amplitude
    data = 0x24;
 8001048:	2324      	movs	r3, #36	; 0x24
 800104a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR << 1, MAX30102_LED_IR_PA1, 1, &data, 1, HAL_MAX_DELAY);
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2301      	movs	r3, #1
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	220c      	movs	r2, #12
 800105e:	21ae      	movs	r1, #174	; 0xae
 8001060:	480b      	ldr	r0, [pc, #44]	; (8001090 <MAX30102_Init+0x6c>)
 8001062:	f001 fc1f 	bl	80028a4 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR << 1, MAX30102_LED_RED_PA2, 1, &data, 1, HAL_MAX_DELAY);
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	2301      	movs	r3, #1
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	1dfb      	adds	r3, r7, #7
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	220d      	movs	r2, #13
 8001078:	21ae      	movs	r1, #174	; 0xae
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MAX30102_Init+0x6c>)
 800107c:	f001 fc12 	bl	80028a4 <HAL_I2C_Mem_Write>
//    printf("LED Pulse Amplitude is set\r\n");
    MAX30102_DEFAULT();
 8001080:	f000 f860 	bl	8001144 <MAX30102_DEFAULT>
//    printf("Default settings");
}
 8001084:	bf00      	nop
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000238 	.word	0x20000238

08001094 <MAX30102_Reset>:
// Reset the device
void MAX30102_Reset(void){
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af04      	add	r7, sp, #16
	uint8_t data = 0x40;
 800109a:	2340      	movs	r3, #64	; 0x40
 800109c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR << 1, MAX30102_MODE_CONFIG, 1, &data, 1, HAL_MAX_DELAY);
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	9302      	str	r3, [sp, #8]
 80010a4:	2301      	movs	r3, #1
 80010a6:	9301      	str	r3, [sp, #4]
 80010a8:	1dfb      	adds	r3, r7, #7
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2301      	movs	r3, #1
 80010ae:	2209      	movs	r2, #9
 80010b0:	21ae      	movs	r1, #174	; 0xae
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <MAX30102_Reset+0x30>)
 80010b4:	f001 fbf6 	bl	80028a4 <HAL_I2C_Mem_Write>
	MAX30102_DEFAULT();
 80010b8:	f000 f844 	bl	8001144 <MAX30102_DEFAULT>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000238 	.word	0x20000238

080010c8 <MAX30102_set_Mode>:

//Set the different mode of the device
void MAX30102_set_Mode(uint8_t data){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af04      	add	r7, sp, #16
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,MAX30102_ADDR << 1, MAX30102_MODE_CONFIG, 1, &data, 1, HAL_MAX_DELAY);
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	9302      	str	r3, [sp, #8]
 80010d8:	2301      	movs	r3, #1
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	2209      	movs	r2, #9
 80010e4:	21ae      	movs	r1, #174	; 0xae
 80010e6:	4803      	ldr	r0, [pc, #12]	; (80010f4 <MAX30102_set_Mode+0x2c>)
 80010e8:	f001 fbdc 	bl	80028a4 <HAL_I2C_Mem_Write>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000238 	.word	0x20000238

080010f8 <MAX30102_SET_LED_PULSE_AMPLTITUDE>:

void MAX30102_SET_LED_PULSE_AMPLTITUDE(){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af04      	add	r7, sp, #16
	//Changing the brightness level of the LED
	uint8_t data = 0x4F;
 80010fe:	234f      	movs	r3, #79	; 0x4f
 8001100:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR << 1, MAX30102_LED_IR_PA1, 1, &data, 1, HAL_MAX_DELAY);
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2301      	movs	r3, #1
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	220c      	movs	r2, #12
 8001114:	21ae      	movs	r1, #174	; 0xae
 8001116:	480a      	ldr	r0, [pc, #40]	; (8001140 <MAX30102_SET_LED_PULSE_AMPLTITUDE+0x48>)
 8001118:	f001 fbc4 	bl	80028a4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR << 1, MAX30102_LED_RED_PA2, 1, &data, 1, HAL_MAX_DELAY);
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	9302      	str	r3, [sp, #8]
 8001122:	2301      	movs	r3, #1
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2301      	movs	r3, #1
 800112c:	220d      	movs	r2, #13
 800112e:	21ae      	movs	r1, #174	; 0xae
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <MAX30102_SET_LED_PULSE_AMPLTITUDE+0x48>)
 8001132:	f001 fbb7 	bl	80028a4 <HAL_I2C_Mem_Write>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000238 	.word	0x20000238

08001144 <MAX30102_DEFAULT>:

void MAX30102_DEFAULT(){
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af04      	add	r7, sp, #16
	//Trigger the FIFO Configuration
	uint8_t trigger_fifo = 0x01;
 800114a:	2301      	movs	r3, #1
 800114c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR << 1, MAX30102_FIFO_CONFIG, 1, &trigger_fifo, 1, HAL_MAX_DELAY);
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	2208      	movs	r2, #8
 8001160:	21ae      	movs	r1, #174	; 0xae
 8001162:	4829      	ldr	r0, [pc, #164]	; (8001208 <MAX30102_DEFAULT+0xc4>)
 8001164:	f001 fb9e 	bl	80028a4 <HAL_I2C_Mem_Write>
	//Changing the Simple Average
	uint8_t data = 0x02;
 8001168:	2302      	movs	r3, #2
 800116a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR << 1, MAX30102_FIFO_CONFIG_SMP_AVE, 1, &data, 1, HAL_MAX_DELAY);
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
 8001170:	9302      	str	r3, [sp, #8]
 8001172:	2301      	movs	r3, #1
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	1dbb      	adds	r3, r7, #6
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	2205      	movs	r2, #5
 800117e:	21ae      	movs	r1, #174	; 0xae
 8001180:	4821      	ldr	r0, [pc, #132]	; (8001208 <MAX30102_DEFAULT+0xc4>)
 8001182:	f001 fb8f 	bl	80028a4 <HAL_I2C_Mem_Write>
	//Trigger the SPO2 Configuration
	uint8_t trigger_spo2 = 0x01;
 8001186:	2301      	movs	r3, #1
 8001188:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR << 1, MAX30102_SPO2_CONFIG, 1, &trigger_spo2, 1, HAL_MAX_DELAY);
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2301      	movs	r3, #1
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	1d7b      	adds	r3, r7, #5
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	220a      	movs	r2, #10
 800119c:	21ae      	movs	r1, #174	; 0xae
 800119e:	481a      	ldr	r0, [pc, #104]	; (8001208 <MAX30102_DEFAULT+0xc4>)
 80011a0:	f001 fb80 	bl	80028a4 <HAL_I2C_Mem_Write>
	//Changing the Sampling Rate
	uint8_t samp_rate = 0x03;
 80011a4:	2303      	movs	r3, #3
 80011a6:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR << 1, MAX30102_SPO2_SR, 1, &samp_rate, 1, HAL_MAX_DELAY);
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ac:	9302      	str	r3, [sp, #8]
 80011ae:	2301      	movs	r3, #1
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	2202      	movs	r2, #2
 80011ba:	21ae      	movs	r1, #174	; 0xae
 80011bc:	4812      	ldr	r0, [pc, #72]	; (8001208 <MAX30102_DEFAULT+0xc4>)
 80011be:	f001 fb71 	bl	80028a4 <HAL_I2C_Mem_Write>
	//Changing the Pulse Width
	uint8_t pulse_width = 0x03;
 80011c2:	2303      	movs	r3, #3
 80011c4:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR << 1, MAX30102_SPO2_LEW_PW, 1, &pulse_width, 1, HAL_MAX_DELAY);
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	9302      	str	r3, [sp, #8]
 80011cc:	2301      	movs	r3, #1
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	1cfb      	adds	r3, r7, #3
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2301      	movs	r3, #1
 80011d6:	2200      	movs	r2, #0
 80011d8:	21ae      	movs	r1, #174	; 0xae
 80011da:	480b      	ldr	r0, [pc, #44]	; (8001208 <MAX30102_DEFAULT+0xc4>)
 80011dc:	f001 fb62 	bl	80028a4 <HAL_I2C_Mem_Write>
	//Changing the ADC Range
	uint8_t adc_range = 0x01;
 80011e0:	2301      	movs	r3, #1
 80011e2:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR << 1, MAX30102_SPO2_ADC_RGE, 1, &adc_range, 1, HAL_MAX_DELAY);
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	2301      	movs	r3, #1
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	1cbb      	adds	r3, r7, #2
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	2205      	movs	r2, #5
 80011f6:	21ae      	movs	r1, #174	; 0xae
 80011f8:	4803      	ldr	r0, [pc, #12]	; (8001208 <MAX30102_DEFAULT+0xc4>)
 80011fa:	f001 fb53 	bl	80028a4 <HAL_I2C_Mem_Write>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000238 	.word	0x20000238

0800120c <readTemperature>:

float readTemperature(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af04      	add	r7, sp, #16
    uint8_t temp_int, temp_frac;
    int8_t temp_int_signed;
    uint8_t data = 0x01;
 8001212:	2301      	movs	r3, #1
 8001214:	713b      	strb	r3, [r7, #4]

    // Trigger temperature measurement
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR << 1, MAX30102_DIE_TEMP_CONFIG, 1, &data, 1, HAL_MAX_DELAY);
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	2301      	movs	r3, #1
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2301      	movs	r3, #1
 8001226:	2221      	movs	r2, #33	; 0x21
 8001228:	21ae      	movs	r1, #174	; 0xae
 800122a:	481c      	ldr	r0, [pc, #112]	; (800129c <readTemperature+0x90>)
 800122c:	f001 fb3a 	bl	80028a4 <HAL_I2C_Mem_Write>

    // Wait for temperature conversion
    HAL_Delay(30);
 8001230:	201e      	movs	r0, #30
 8001232:	f000 ff4b 	bl	80020cc <HAL_Delay>

    // Read temperature integer and fraction parts
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR << 1, MAX30102_DIE_TINT, 1, &temp_int, 1, HAL_MAX_DELAY);
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	2301      	movs	r3, #1
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	1dbb      	adds	r3, r7, #6
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	221f      	movs	r2, #31
 8001248:	21ae      	movs	r1, #174	; 0xae
 800124a:	4814      	ldr	r0, [pc, #80]	; (800129c <readTemperature+0x90>)
 800124c:	f001 fc24 	bl	8002a98 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR << 1, MAX30102_DIE_TFRAC, 1, &temp_frac, 1, HAL_MAX_DELAY);
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	2301      	movs	r3, #1
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	1d7b      	adds	r3, r7, #5
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	2220      	movs	r2, #32
 8001262:	21ae      	movs	r1, #174	; 0xae
 8001264:	480d      	ldr	r0, [pc, #52]	; (800129c <readTemperature+0x90>)
 8001266:	f001 fc17 	bl	8002a98 <HAL_I2C_Mem_Read>

    temp_int_signed = (int8_t)temp_int;
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	71fb      	strb	r3, [r7, #7]
    return (float)temp_int_signed + ((float)temp_frac * MAX30102_DIE_TFRAC_INCREMENT);
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	ee07 3a90 	vmov	s15, r3
 8001276:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800127a:	797b      	ldrb	r3, [r7, #5]
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001284:	eddf 6a06 	vldr	s13, [pc, #24]	; 80012a0 <readTemperature+0x94>
 8001288:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800128c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001290:	eeb0 0a67 	vmov.f32	s0, s15
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000238 	.word	0x20000238
 80012a0:	3d800000 	.word	0x3d800000

080012a4 <MAX30102_ReadFIFO>:

uint32_t MAX30102_ReadFIFO() {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af04      	add	r7, sp, #16
    uint8_t data[6];
    uint32_t red, ir;

    // Read 6 bytes from the FIFO
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR << 1, MAX30102_FIFO_DATA, 1, data, 6, HAL_MAX_DELAY);
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	2306      	movs	r3, #6
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	463b      	mov	r3, r7
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2301      	movs	r3, #1
 80012ba:	2207      	movs	r2, #7
 80012bc:	21ae      	movs	r1, #174	; 0xae
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <MAX30102_ReadFIFO+0x60>)
 80012c0:	f001 fbea 	bl	8002a98 <HAL_I2C_Mem_Read>

    // Combine bytes into 18-bit values
    red = (data[0] << 16) | (data[1] << 8) | data[2];
 80012c4:	783b      	ldrb	r3, [r7, #0]
 80012c6:	041a      	lsls	r2, r3, #16
 80012c8:	787b      	ldrb	r3, [r7, #1]
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	4313      	orrs	r3, r2
 80012ce:	78ba      	ldrb	r2, [r7, #2]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]
    ir = (data[3] << 16) | (data[4] << 8) | data[5];
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	041a      	lsls	r2, r3, #16
 80012d8:	793b      	ldrb	r3, [r7, #4]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	4313      	orrs	r3, r2
 80012de:	797a      	ldrb	r2, [r7, #5]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]

    // Remove the unused bits
    red &= 0x03FFFF;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80012ea:	60fb      	str	r3, [r7, #12]
    ir &= 0x03FFFF;
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80012f2:	60bb      	str	r3, [r7, #8]

    return (red << 18) | ir;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	049a      	lsls	r2, r3, #18
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000238 	.word	0x20000238

08001308 <MAX30102_ReadHeartRate>:

float MAX30102_ReadHeartRate(uint32_t hrdata) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	MAX30102_Reset();
 8001310:	f7ff fec0 	bl	8001094 <MAX30102_Reset>
	MAX30102_SET_LED_PULSE_AMPLTITUDE();
 8001314:	f7ff fef0 	bl	80010f8 <MAX30102_SET_LED_PULSE_AMPLTITUDE>
	uint8_t data_6 = 0x02;
 8001318:	2302      	movs	r3, #2
 800131a:	75fb      	strb	r3, [r7, #23]
	MAX30102_set_Mode(data_6);
 800131c:	7dfb      	ldrb	r3, [r7, #23]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fed2 	bl	80010c8 <MAX30102_set_Mode>
//	MAX30102_SET_LED(max30102_led_ir);
    uint32_t fifo_data = MAX30102_ReadFIFO();
 8001324:	f7ff ffbe 	bl	80012a4 <MAX30102_ReadFIFO>
 8001328:	6138      	str	r0, [r7, #16]
    uint32_t ir = fifo_data & 0x03FFFF; // Extract IR data
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001330:	60fb      	str	r3, [r7, #12]
    heartRate = (float)ir/1000.0; // Replace with proper conversion
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800133c:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001404 <MAX30102_ReadHeartRate+0xfc>
 8001340:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001344:	4b30      	ldr	r3, [pc, #192]	; (8001408 <MAX30102_ReadHeartRate+0x100>)
 8001346:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(750);
 800134a:	f240 20ee 	movw	r0, #750	; 0x2ee
 800134e:	f000 febd 	bl	80020cc <HAL_Delay>
    if (heartRate > HR_THRESHOLD) {
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <MAX30102_ReadHeartRate+0x100>)
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800140c <MAX30102_ReadHeartRate+0x104>
 800135c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001364:	dd2e      	ble.n	80013c4 <MAX30102_ReadHeartRate+0xbc>
    //	        peakDetected = 1;
    	        currentTime = HAL_GetTick(); // Get the current time in milliseconds
 8001366:	f000 fea5 	bl	80020b4 <HAL_GetTick>
 800136a:	4603      	mov	r3, r0
 800136c:	4a28      	ldr	r2, [pc, #160]	; (8001410 <MAX30102_ReadHeartRate+0x108>)
 800136e:	6013      	str	r3, [r2, #0]
    //	        printf("Current Time: %d\r\n", currentTime);

    	        // Calculate the time interval between consecutive R-wave peaks

    	            timeInterval = currentTime - lastPeakTime;
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <MAX30102_ReadHeartRate+0x108>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <MAX30102_ReadHeartRate+0x10c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	ee07 3a90 	vmov	s15, r3
 800137e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <MAX30102_ReadHeartRate+0x110>)
 8001384:	edc3 7a00 	vstr	s15, [r3]
    	            lastPeakTime = currentTime;
 8001388:	4b21      	ldr	r3, [pc, #132]	; (8001410 <MAX30102_ReadHeartRate+0x108>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a21      	ldr	r2, [pc, #132]	; (8001414 <MAX30102_ReadHeartRate+0x10c>)
 800138e:	6013      	str	r3, [r2, #0]
//    	            printf("Difference Time: %f\r\n", timeInterval);

    	            // Calculate heart rate (BPM)
    	            heartRate = (60.0 / (timeInterval / 1000.0));
 8001390:	4b21      	ldr	r3, [pc, #132]	; (8001418 <MAX30102_ReadHeartRate+0x110>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f8df 	bl	8000558 <__aeabi_f2d>
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	4b1f      	ldr	r3, [pc, #124]	; (800141c <MAX30102_ReadHeartRate+0x114>)
 80013a0:	f7ff fa5c 	bl	800085c <__aeabi_ddiv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	f04f 0000 	mov.w	r0, #0
 80013ac:	491c      	ldr	r1, [pc, #112]	; (8001420 <MAX30102_ReadHeartRate+0x118>)
 80013ae:	f7ff fa55 	bl	800085c <__aeabi_ddiv>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fbfd 	bl	8000bb8 <__aeabi_d2f>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <MAX30102_ReadHeartRate+0x100>)
 80013c2:	6013      	str	r3, [r2, #0]
    //	            heartRate = heartRate + 48;
//    	            printf("Heart Rate: %.2f BPM\r\n", heartRate);
    	    }

    	    if (heartRate < HR_THRESHOLD) {
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MAX30102_ReadHeartRate+0x100>)
 80013c6:	edd3 7a00 	vldr	s15, [r3]
 80013ca:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800140c <MAX30102_ReadHeartRate+0x104>
 80013ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d6:	d502      	bpl.n	80013de <MAX30102_ReadHeartRate+0xd6>
    	        peakDetected = 0;
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <MAX30102_ReadHeartRate+0x11c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
    	    }
//    heartRate = 60/heartrate;
    	    heartRate = (int)heartRate;
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <MAX30102_ReadHeartRate+0x100>)
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MAX30102_ReadHeartRate+0x100>)
 80013ee:	edc3 7a00 	vstr	s15, [r3]
    return heartRate;
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <MAX30102_ReadHeartRate+0x100>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	ee07 3a90 	vmov	s15, r3
}
 80013fa:	eeb0 0a67 	vmov.f32	s0, s15
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	447a0000 	.word	0x447a0000
 8001408:	2000021c 	.word	0x2000021c
 800140c:	42660000 	.word	0x42660000
 8001410:	20000228 	.word	0x20000228
 8001414:	20000234 	.word	0x20000234
 8001418:	20000230 	.word	0x20000230
 800141c:	408f4000 	.word	0x408f4000
 8001420:	404e0000 	.word	0x404e0000
 8001424:	2000022c 	.word	0x2000022c

08001428 <MAX30102_ReadSpO2>:

float MAX30102_ReadSpO2(uint32_t spo2data) {
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	MAX30102_Reset();
 8001430:	f7ff fe30 	bl	8001094 <MAX30102_Reset>
	MAX30102_SET_LED_PULSE_AMPLTITUDE();
 8001434:	f7ff fe60 	bl	80010f8 <MAX30102_SET_LED_PULSE_AMPLTITUDE>
	uint8_t data = 0x03;
 8001438:	2303      	movs	r3, #3
 800143a:	77fb      	strb	r3, [r7, #31]
	MAX30102_set_Mode(data);
 800143c:	7ffb      	ldrb	r3, [r7, #31]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe42 	bl	80010c8 <MAX30102_set_Mode>
//	MAX30102_SET_LED(max30102_led_red);
    uint32_t fifo_data = MAX30102_ReadFIFO();
 8001444:	f7ff ff2e 	bl	80012a4 <MAX30102_ReadFIFO>
 8001448:	61b8      	str	r0, [r7, #24]
    uint32_t red = (fifo_data >> 18) & 0x03FFFF; // Extract Red data
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	0c9b      	lsrs	r3, r3, #18
 800144e:	617b      	str	r3, [r7, #20]
    uint32_t ir = fifo_data & 0x03FFFF;
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001456:	613b      	str	r3, [r7, #16]
    spo2rate = (float)ir / ((float)red+(float)ir)*100; // Replace with proper conversion
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	ee07 3a90 	vmov	s15, r3
 800145e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	ee07 3a90 	vmov	s15, r3
 8001468:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	ee07 3a90 	vmov	s15, r3
 8001472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800147e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001590 <MAX30102_ReadSpO2+0x168>
 8001482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001486:	4b43      	ldr	r3, [pc, #268]	; (8001594 <MAX30102_ReadSpO2+0x16c>)
 8001488:	edc3 7a00 	vstr	s15, [r3]
    float temp_int_signed = readTemperature();
 800148c:	f7ff febe 	bl	800120c <readTemperature>
 8001490:	ed87 0a03 	vstr	s0, [r7, #12]
//    printf(" temperature is: %0.2f   ", temp_int_signed);
    temperature_compensation_factor = ((1.0 + (temp_int_signed - 25.0) * 0.01) * ((float)ir / ((float)red+(float)ir))) * 100 ;  // Example adjustment
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f7ff f85f 	bl	8000558 <__aeabi_f2d>
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	4b3e      	ldr	r3, [pc, #248]	; (8001598 <MAX30102_ReadSpO2+0x170>)
 80014a0:	f7fe fefa 	bl	8000298 <__aeabi_dsub>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	a336      	add	r3, pc, #216	; (adr r3, 8001588 <MAX30102_ReadSpO2+0x160>)
 80014ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b2:	f7ff f8a9 	bl	8000608 <__aeabi_dmul>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4b36      	ldr	r3, [pc, #216]	; (800159c <MAX30102_ReadSpO2+0x174>)
 80014c4:	f7fe feea 	bl	800029c <__adddf3>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4614      	mov	r4, r2
 80014ce:	461d      	mov	r5, r3
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80014f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014f6:	ee16 0a90 	vmov	r0, s13
 80014fa:	f7ff f82d 	bl	8000558 <__aeabi_f2d>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4620      	mov	r0, r4
 8001504:	4629      	mov	r1, r5
 8001506:	f7ff f87f 	bl	8000608 <__aeabi_dmul>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <MAX30102_ReadSpO2+0x178>)
 8001518:	f7ff f876 	bl	8000608 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff fb48 	bl	8000bb8 <__aeabi_d2f>
 8001528:	4603      	mov	r3, r0
 800152a:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <MAX30102_ReadSpO2+0x17c>)
 800152c:	6013      	str	r3, [r2, #0]
    if(temperature_compensation_factor > 90){
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <MAX30102_ReadSpO2+0x17c>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80015a8 <MAX30102_ReadSpO2+0x180>
 8001538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001540:	dd16      	ble.n	8001570 <MAX30102_ReadSpO2+0x148>
    	temperature_compensation_factor += 5;
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <MAX30102_ReadSpO2+0x17c>)
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800154c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MAX30102_ReadSpO2+0x17c>)
 8001552:	edc3 7a00 	vstr	s15, [r3]
    	if(temperature_compensation_factor >= 100){
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MAX30102_ReadSpO2+0x17c>)
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001590 <MAX30102_ReadSpO2+0x168>
 8001560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001568:	db02      	blt.n	8001570 <MAX30102_ReadSpO2+0x148>
    		temperature_compensation_factor = 100;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MAX30102_ReadSpO2+0x17c>)
 800156c:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <MAX30102_ReadSpO2+0x184>)
 800156e:	601a      	str	r2, [r3, #0]
    	}
    }

    return temperature_compensation_factor;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MAX30102_ReadSpO2+0x17c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	ee07 3a90 	vmov	s15, r3
//    printf("SPO2 level is %0.2f,   ", temperature_compensation_factor);
//    return spo2rate;
}
 8001578:	eeb0 0a67 	vmov.f32	s0, s15
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bdb0      	pop	{r4, r5, r7, pc}
 8001582:	bf00      	nop
 8001584:	f3af 8000 	nop.w
 8001588:	47ae147b 	.word	0x47ae147b
 800158c:	3f847ae1 	.word	0x3f847ae1
 8001590:	42c80000 	.word	0x42c80000
 8001594:	20000220 	.word	0x20000220
 8001598:	40390000 	.word	0x40390000
 800159c:	3ff00000 	.word	0x3ff00000
 80015a0:	40590000 	.word	0x40590000
 80015a4:	20000224 	.word	0x20000224
 80015a8:	42b40000 	.word	0x42b40000
 80015ac:	42c80000 	.word	0x42c80000

080015b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b6:	f000 fd17 	bl	8001fe8 <HAL_Init>

  /* USER CODE BEGIN Init */
  enum neai_state error_code = neai_classification_init(knowledge);
 80015ba:	4811      	ldr	r0, [pc, #68]	; (8001600 <main+0x50>)
 80015bc:	f003 fbfa 	bl	8004db4 <neai_classification_init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  	if (error_code != NEAI_OK) {
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <main+0x22>
  		/* This happens if the knowledge does not correspond to the library or if the library works into a not supported board. */
  		printf("Failed");
 80015ca:	480e      	ldr	r0, [pc, #56]	; (8001604 <main+0x54>)
 80015cc:	f004 fb7a 	bl	8005cc4 <iprintf>
 80015d0:	e002      	b.n	80015d8 <main+0x28>
  	}
  	else{
  			printf("Completed");
 80015d2:	480d      	ldr	r0, [pc, #52]	; (8001608 <main+0x58>)
 80015d4:	f004 fb76 	bl	8005cc4 <iprintf>
  		}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d8:	f000 f818 	bl	800160c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015dc:	f000 f958 	bl	8001890 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015e0:	f000 f92c 	bl	800183c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80015e4:	f000 f87c 	bl	80016e0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80015e8:	f000 f8a8 	bl	800173c <MX_I2C2_Init>
  MX_TIM2_Init();
 80015ec:	f000 f8d4 	bl	8001798 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
MLX90614_Init();
 80015f0:	f7ff fcb0 	bl	8000f54 <MLX90614_Init>
MAX30102_Init();
 80015f4:	f7ff fd16 	bl	8001024 <MAX30102_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Interference();
 80015f8:	f000 fa36 	bl	8001a68 <Interference>
 80015fc:	e7fc      	b.n	80015f8 <main+0x48>
 80015fe:	bf00      	nop
 8001600:	0800821c 	.word	0x0800821c
 8001604:	080081f0 	.word	0x080081f0
 8001608:	080081f8 	.word	0x080081f8

0800160c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b094      	sub	sp, #80	; 0x50
 8001610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001612:	f107 0320 	add.w	r3, r7, #32
 8001616:	2230      	movs	r2, #48	; 0x30
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f004 fca0 	bl	8005f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <SystemClock_Config+0xcc>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	4a27      	ldr	r2, [pc, #156]	; (80016d8 <SystemClock_Config+0xcc>)
 800163a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163e:	6413      	str	r3, [r2, #64]	; 0x40
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <SystemClock_Config+0xcc>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <SystemClock_Config+0xd0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a21      	ldr	r2, [pc, #132]	; (80016dc <SystemClock_Config+0xd0>)
 8001656:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <SystemClock_Config+0xd0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001668:	2302      	movs	r3, #2
 800166a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800166c:	2301      	movs	r3, #1
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001670:	2310      	movs	r3, #16
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001674:	2302      	movs	r3, #2
 8001676:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001678:	2300      	movs	r3, #0
 800167a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800167c:	2310      	movs	r3, #16
 800167e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001680:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001684:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001686:	2304      	movs	r3, #4
 8001688:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800168a:	2304      	movs	r3, #4
 800168c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168e:	f107 0320 	add.w	r3, r7, #32
 8001692:	4618      	mov	r0, r3
 8001694:	f001 ffe6 	bl	8003664 <HAL_RCC_OscConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800169e:	f000 fa2d 	bl	8001afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a2:	230f      	movs	r3, #15
 80016a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a6:	2302      	movs	r3, #2
 80016a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	2102      	movs	r1, #2
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 fa48 	bl	8003b54 <HAL_RCC_ClockConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016ca:	f000 fa17 	bl	8001afc <Error_Handler>
  }
}
 80016ce:	bf00      	nop
 80016d0:	3750      	adds	r7, #80	; 0x50
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40007000 	.word	0x40007000

080016e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_I2C1_Init+0x50>)
 80016e6:	4a13      	ldr	r2, [pc, #76]	; (8001734 <MX_I2C1_Init+0x54>)
 80016e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_I2C1_Init+0x50>)
 80016ec:	4a12      	ldr	r2, [pc, #72]	; (8001738 <MX_I2C1_Init+0x58>)
 80016ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_I2C1_Init+0x50>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_I2C1_Init+0x50>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_I2C1_Init+0x50>)
 80016fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001702:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <MX_I2C1_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_I2C1_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <MX_I2C1_Init+0x50>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_I2C1_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <MX_I2C1_Init+0x50>)
 800171e:	f000 ff7d 	bl	800261c <HAL_I2C_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001728:	f000 f9e8 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000238 	.word	0x20000238
 8001734:	40005400 	.word	0x40005400
 8001738:	000186a0 	.word	0x000186a0

0800173c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <MX_I2C2_Init+0x50>)
 8001742:	4a13      	ldr	r2, [pc, #76]	; (8001790 <MX_I2C2_Init+0x54>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_I2C2_Init+0x50>)
 8001748:	4a12      	ldr	r2, [pc, #72]	; (8001794 <MX_I2C2_Init+0x58>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_I2C2_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_I2C2_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_I2C2_Init+0x50>)
 800175a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800175e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <MX_I2C2_Init+0x50>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_I2C2_Init+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <MX_I2C2_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_I2C2_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001778:	4804      	ldr	r0, [pc, #16]	; (800178c <MX_I2C2_Init+0x50>)
 800177a:	f000 ff4f 	bl	800261c <HAL_I2C_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001784:	f000 f9ba 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	2000028c 	.word	0x2000028c
 8001790:	40005800 	.word	0x40005800
 8001794:	000186a0 	.word	0x000186a0

08001798 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017a8:	463b      	mov	r3, r7
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017b4:	4b20      	ldr	r3, [pc, #128]	; (8001838 <MX_TIM2_Init+0xa0>)
 80017b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <MX_TIM2_Init+0xa0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <MX_TIM2_Init+0xa0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <MX_TIM2_Init+0xa0>)
 80017ca:	f04f 32ff 	mov.w	r2, #4294967295
 80017ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <MX_TIM2_Init+0xa0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <MX_TIM2_Init+0xa0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80017dc:	4816      	ldr	r0, [pc, #88]	; (8001838 <MX_TIM2_Init+0xa0>)
 80017de:	f002 fbd9 	bl	8003f94 <HAL_TIM_IC_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017e8:	f000 f988 	bl	8001afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	4619      	mov	r1, r3
 80017fa:	480f      	ldr	r0, [pc, #60]	; (8001838 <MX_TIM2_Init+0xa0>)
 80017fc:	f002 fe60 	bl	80044c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001806:	f000 f979 	bl	8001afc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800180a:	2300      	movs	r3, #0
 800180c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800180e:	2301      	movs	r3, #1
 8001810:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800181a:	463b      	mov	r3, r7
 800181c:	2204      	movs	r2, #4
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_TIM2_Init+0xa0>)
 8001822:	f002 fc06 	bl	8004032 <HAL_TIM_IC_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800182c:	f000 f966 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200002e0 	.word	0x200002e0

0800183c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001842:	4a12      	ldr	r2, [pc, #72]	; (800188c <MX_USART2_UART_Init+0x50>)
 8001844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800184c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001874:	f002 fe92 	bl	800459c <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800187e:	f000 f93d 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000328 	.word	0x20000328
 800188c:	40004400 	.word	0x40004400

08001890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <MX_GPIO_Init+0xd0>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a2c      	ldr	r2, [pc, #176]	; (8001960 <MX_GPIO_Init+0xd0>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <MX_GPIO_Init+0xd0>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b26      	ldr	r3, [pc, #152]	; (8001960 <MX_GPIO_Init+0xd0>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a25      	ldr	r2, [pc, #148]	; (8001960 <MX_GPIO_Init+0xd0>)
 80018cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b23      	ldr	r3, [pc, #140]	; (8001960 <MX_GPIO_Init+0xd0>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <MX_GPIO_Init+0xd0>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a1e      	ldr	r2, [pc, #120]	; (8001960 <MX_GPIO_Init+0xd0>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <MX_GPIO_Init+0xd0>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <MX_GPIO_Init+0xd0>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a17      	ldr	r2, [pc, #92]	; (8001960 <MX_GPIO_Init+0xd0>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <MX_GPIO_Init+0xd0>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	2120      	movs	r1, #32
 800191a:	4812      	ldr	r0, [pc, #72]	; (8001964 <MX_GPIO_Init+0xd4>)
 800191c:	f000 fe64 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001926:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800192a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	480c      	ldr	r0, [pc, #48]	; (8001968 <MX_GPIO_Init+0xd8>)
 8001938:	f000 fcd2 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800193c:	2320      	movs	r3, #32
 800193e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001940:	2301      	movs	r3, #1
 8001942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	4804      	ldr	r0, [pc, #16]	; (8001964 <MX_GPIO_Init+0xd4>)
 8001954:	f000 fcc4 	bl	80022e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001958:	bf00      	nop
 800195a:	3728      	adds	r7, #40	; 0x28
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800
 8001964:	40020000 	.word	0x40020000
 8001968:	40020800 	.word	0x40020800

0800196c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001974:	1d39      	adds	r1, r7, #4
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	2201      	movs	r2, #1
 800197c:	4803      	ldr	r0, [pc, #12]	; (800198c <__io_putchar+0x20>)
 800197e:	f002 fe5d 	bl	800463c <HAL_UART_Transmit>
	return ch;
 8001982:	687b      	ldr	r3, [r7, #4]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000328 	.word	0x20000328

08001990 <fill_data_buffer>:
void fill_data_buffer(){
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
	for(int i=0;i<DATA_INPUT_USER;i++){
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	e04f      	b.n	8001a3c <fill_data_buffer+0xac>
		Temp_amb = MLX90614_ReadTempAmbient();
 800199c:	f7ff fb2e 	bl	8000ffc <MLX90614_ReadTempAmbient>
 80019a0:	eef0 7a40 	vmov.f32	s15, s0
 80019a4:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <fill_data_buffer+0xbc>)
 80019a6:	edc3 7a00 	vstr	s15, [r3]
		Temp_obj1 = MLX90614_ReadTempObject1();
 80019aa:	f7ff fb31 	bl	8001010 <MLX90614_ReadTempObject1>
 80019ae:	eef0 7a40 	vmov.f32	s15, s0
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <fill_data_buffer+0xc0>)
 80019b4:	edc3 7a00 	vstr	s15, [r3]
		pulse = MAX30102_ReadSpO2(spo2_rate);
 80019b8:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <fill_data_buffer+0xc4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fd33 	bl	8001428 <MAX30102_ReadSpO2>
 80019c2:	eef0 7a40 	vmov.f32	s15, s0
 80019c6:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <fill_data_buffer+0xc8>)
 80019c8:	edc3 7a00 	vstr	s15, [r3]
		heart = MAX30102_ReadHeartRate(hr_rate);
 80019cc:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <fill_data_buffer+0xcc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fc99 	bl	8001308 <MAX30102_ReadHeartRate>
 80019d6:	eef0 7a40 	vmov.f32	s15, s0
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <fill_data_buffer+0xd0>)
 80019dc:	edc3 7a00 	vstr	s15, [r3]
	    data_buffer[AXIS * i] = pulse;
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4413      	add	r3, r2
 80019e8:	4a1b      	ldr	r2, [pc, #108]	; (8001a58 <fill_data_buffer+0xc8>)
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	491d      	ldr	r1, [pc, #116]	; (8001a64 <fill_data_buffer+0xd4>)
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	601a      	str	r2, [r3, #0]
	    data_buffer[AXIS * i + 1] = heart;
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	3301      	adds	r3, #1
 80019fe:	4a18      	ldr	r2, [pc, #96]	; (8001a60 <fill_data_buffer+0xd0>)
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	4918      	ldr	r1, [pc, #96]	; (8001a64 <fill_data_buffer+0xd4>)
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	601a      	str	r2, [r3, #0]
	    data_buffer[AXIS * i + 2] = Temp_amb;
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	3302      	adds	r3, #2
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <fill_data_buffer+0xbc>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	4912      	ldr	r1, [pc, #72]	; (8001a64 <fill_data_buffer+0xd4>)
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	601a      	str	r2, [r3, #0]
	    data_buffer[AXIS * i + 3] = Temp_obj1;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <fill_data_buffer+0xc0>)
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	490d      	ldr	r1, [pc, #52]	; (8001a64 <fill_data_buffer+0xd4>)
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	601a      	str	r2, [r3, #0]
	for(int i=0;i<DATA_INPUT_USER;i++){
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	ddac      	ble.n	800199c <fill_data_buffer+0xc>

	}
}
 8001a42:	bf00      	nop
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000370 	.word	0x20000370
 8001a50:	20000374 	.word	0x20000374
 8001a54:	2000037c 	.word	0x2000037c
 8001a58:	2000038c 	.word	0x2000038c
 8001a5c:	20000378 	.word	0x20000378
 8001a60:	20000390 	.word	0x20000390
 8001a64:	20000380 	.word	0x20000380

08001a68 <Interference>:
void Interference(){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
	uint16_t i, id_class_t0, id_class_tn;
	fill_data_buffer();
 8001a6e:	f7ff ff8f 	bl	8001990 <fill_data_buffer>
	neai_classification(data_buffer, output_class_buffer, &id_class_t0);
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	461a      	mov	r2, r3
 8001a76:	491c      	ldr	r1, [pc, #112]	; (8001ae8 <Interference+0x80>)
 8001a78:	481c      	ldr	r0, [pc, #112]	; (8001aec <Interference+0x84>)
 8001a7a:	f003 fa5f 	bl	8004f3c <neai_classification>
	for(i=0; i<CONFIRMATION_NB-1; i++){
 8001a7e:	2300      	movs	r3, #0
 8001a80:	80fb      	strh	r3, [r7, #6]
 8001a82:	e027      	b.n	8001ad4 <Interference+0x6c>
		fill_data_buffer();
 8001a84:	f7ff ff84 	bl	8001990 <fill_data_buffer>
		neai_classification(data_buffer, output_class_buffer, &id_class_tn);
 8001a88:	1cbb      	adds	r3, r7, #2
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4916      	ldr	r1, [pc, #88]	; (8001ae8 <Interference+0x80>)
 8001a8e:	4817      	ldr	r0, [pc, #92]	; (8001aec <Interference+0x84>)
 8001a90:	f003 fa54 	bl	8004f3c <neai_classification>
		if(id_class_t0 != id_class_tn){
 8001a94:	88ba      	ldrh	r2, [r7, #4]
 8001a96:	887b      	ldrh	r3, [r7, #2]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d11f      	bne.n	8001adc <Interference+0x74>
			break;
		}
		else if(id_class_t0 == id_class_tn){
 8001a9c:	88ba      	ldrh	r2, [r7, #4]
 8001a9e:	887b      	ldrh	r3, [r7, #2]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d10e      	bne.n	8001ac2 <Interference+0x5a>
			printf("Detected Class: ");
 8001aa4:	4812      	ldr	r0, [pc, #72]	; (8001af0 <Interference+0x88>)
 8001aa6:	f004 f90d 	bl	8005cc4 <iprintf>
			printf(id2class[id_class_t0]);
 8001aaa:	88bb      	ldrh	r3, [r7, #4]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <Interference+0x8c>)
 8001ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f004 f905 	bl	8005cc4 <iprintf>
			printf("\r\n");
 8001aba:	480f      	ldr	r0, [pc, #60]	; (8001af8 <Interference+0x90>)
 8001abc:	f004 f970 	bl	8005da0 <puts>
 8001ac0:	e005      	b.n	8001ace <Interference+0x66>
		}
		else{
			printf("?");
 8001ac2:	203f      	movs	r0, #63	; 0x3f
 8001ac4:	f004 f910 	bl	8005ce8 <putchar>
			printf("\r\n");
 8001ac8:	480b      	ldr	r0, [pc, #44]	; (8001af8 <Interference+0x90>)
 8001aca:	f004 f969 	bl	8005da0 <puts>
	for(i=0; i<CONFIRMATION_NB-1; i++){
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	80fb      	strh	r3, [r7, #6]
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d9d4      	bls.n	8001a84 <Interference+0x1c>
		}
	}
//	printf("\r\n");
}
 8001ada:	e000      	b.n	8001ade <Interference+0x76>
			break;
 8001adc:	bf00      	nop
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000394 	.word	0x20000394
 8001aec:	20000380 	.word	0x20000380
 8001af0:	08008204 	.word	0x08008204
 8001af4:	20000000 	.word	0x20000000
 8001af8:	08008218 	.word	0x08008218

08001afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b00:	b672      	cpsid	i
}
 8001b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <Error_Handler+0x8>
	...

08001b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b46:	2007      	movs	r0, #7
 8001b48:	f000 fb96 	bl	8002278 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800

08001b58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08c      	sub	sp, #48	; 0x30
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 031c 	add.w	r3, r7, #28
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a3b      	ldr	r2, [pc, #236]	; (8001c64 <HAL_I2C_MspInit+0x10c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d12d      	bne.n	8001bd6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <HAL_I2C_MspInit+0x110>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a39      	ldr	r2, [pc, #228]	; (8001c68 <HAL_I2C_MspInit+0x110>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b37      	ldr	r3, [pc, #220]	; (8001c68 <HAL_I2C_MspInit+0x110>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	61bb      	str	r3, [r7, #24]
 8001b94:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001b96:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b9c:	2312      	movs	r3, #18
 8001b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ba8:	2304      	movs	r3, #4
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	482e      	ldr	r0, [pc, #184]	; (8001c6c <HAL_I2C_MspInit+0x114>)
 8001bb4:	f000 fb94 	bl	80022e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <HAL_I2C_MspInit+0x110>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	4a29      	ldr	r2, [pc, #164]	; (8001c68 <HAL_I2C_MspInit+0x110>)
 8001bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <HAL_I2C_MspInit+0x110>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bd4:	e042      	b.n	8001c5c <HAL_I2C_MspInit+0x104>
  else if(hi2c->Instance==I2C2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a25      	ldr	r2, [pc, #148]	; (8001c70 <HAL_I2C_MspInit+0x118>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d13d      	bne.n	8001c5c <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_I2C_MspInit+0x110>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	4a1f      	ldr	r2, [pc, #124]	; (8001c68 <HAL_I2C_MspInit+0x110>)
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_I2C_MspInit+0x110>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c02:	2312      	movs	r3, #18
 8001c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c0e:	2304      	movs	r3, #4
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	4619      	mov	r1, r3
 8001c18:	4814      	ldr	r0, [pc, #80]	; (8001c6c <HAL_I2C_MspInit+0x114>)
 8001c1a:	f000 fb61 	bl	80022e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c24:	2312      	movs	r3, #18
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001c30:	2309      	movs	r3, #9
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480c      	ldr	r0, [pc, #48]	; (8001c6c <HAL_I2C_MspInit+0x114>)
 8001c3c:	f000 fb50 	bl	80022e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_I2C_MspInit+0x110>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <HAL_I2C_MspInit+0x110>)
 8001c4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_I2C_MspInit+0x110>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3730      	adds	r7, #48	; 0x30
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40005400 	.word	0x40005400
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020400 	.word	0x40020400
 8001c70:	40005800 	.word	0x40005800

08001c74 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c94:	d12b      	bne.n	8001cee <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <HAL_TIM_IC_MspInit+0x84>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a16      	ldr	r2, [pc, #88]	; (8001cf8 <HAL_TIM_IC_MspInit+0x84>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_TIM_IC_MspInit+0x84>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_TIM_IC_MspInit+0x84>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a0f      	ldr	r2, [pc, #60]	; (8001cf8 <HAL_TIM_IC_MspInit+0x84>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <HAL_TIM_IC_MspInit+0x84>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4804      	ldr	r0, [pc, #16]	; (8001cfc <HAL_TIM_IC_MspInit+0x88>)
 8001cea:	f000 faf9 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cee:	bf00      	nop
 8001cf0:	3728      	adds	r7, #40	; 0x28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40020000 	.word	0x40020000

08001d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a19      	ldr	r2, [pc, #100]	; (8001d84 <HAL_UART_MspInit+0x84>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d12b      	bne.n	8001d7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <HAL_UART_MspInit+0x88>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	4a17      	ldr	r2, [pc, #92]	; (8001d88 <HAL_UART_MspInit+0x88>)
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d30:	6413      	str	r3, [r2, #64]	; 0x40
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <HAL_UART_MspInit+0x88>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_UART_MspInit+0x88>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a10      	ldr	r2, [pc, #64]	; (8001d88 <HAL_UART_MspInit+0x88>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <HAL_UART_MspInit+0x88>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d5a:	230c      	movs	r3, #12
 8001d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d66:	2303      	movs	r3, #3
 8001d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d6a:	2307      	movs	r3, #7
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	4619      	mov	r1, r3
 8001d74:	4805      	ldr	r0, [pc, #20]	; (8001d8c <HAL_UART_MspInit+0x8c>)
 8001d76:	f000 fab3 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d7a:	bf00      	nop
 8001d7c:	3728      	adds	r7, #40	; 0x28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40004400 	.word	0x40004400
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020000 	.word	0x40020000

08001d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d94:	e7fe      	b.n	8001d94 <NMI_Handler+0x4>

08001d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <HardFault_Handler+0x4>

08001d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <MemManage_Handler+0x4>

08001da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <BusFault_Handler+0x4>

08001da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <UsageFault_Handler+0x4>

08001dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ddc:	f000 f956 	bl	800208c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return 1;
 8001de8:	2301      	movs	r3, #1
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <_kill>:

int _kill(int pid, int sig)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dfe:	f004 f901 	bl	8006004 <__errno>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2216      	movs	r2, #22
 8001e06:	601a      	str	r2, [r3, #0]
  return -1;
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_exit>:

void _exit (int status)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ffe7 	bl	8001df4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e26:	e7fe      	b.n	8001e26 <_exit+0x12>

08001e28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	e00a      	b.n	8001e50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e3a:	f3af 8000 	nop.w
 8001e3e:	4601      	mov	r1, r0
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	60ba      	str	r2, [r7, #8]
 8001e46:	b2ca      	uxtb	r2, r1
 8001e48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	dbf0      	blt.n	8001e3a <_read+0x12>
  }

  return len;
 8001e58:	687b      	ldr	r3, [r7, #4]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	e009      	b.n	8001e88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	60ba      	str	r2, [r7, #8]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fd75 	bl	800196c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	3301      	adds	r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	dbf1      	blt.n	8001e74 <_write+0x12>
  }
  return len;
 8001e90:	687b      	ldr	r3, [r7, #4]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <_close>:

int _close(int file)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ec2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <_isatty>:

int _isatty(int file)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f0c:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <_sbrk+0x5c>)
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <_sbrk+0x60>)
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <_sbrk+0x64>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <_sbrk+0x68>)
 8001f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <_sbrk+0x64>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d207      	bcs.n	8001f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f34:	f004 f866 	bl	8006004 <__errno>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	e009      	b.n	8001f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <_sbrk+0x64>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <_sbrk+0x64>)
 8001f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20020000 	.word	0x20020000
 8001f64:	00000400 	.word	0x00000400
 8001f68:	200003bc 	.word	0x200003bc
 8001f6c:	20000538 	.word	0x20000538

08001f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <SystemInit+0x20>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <SystemInit+0x20>)
 8001f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f98:	f7ff ffea 	bl	8001f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f9e:	490d      	ldr	r1, [pc, #52]	; (8001fd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fb4:	4c0a      	ldr	r4, [pc, #40]	; (8001fe0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fc2:	f004 f825 	bl	8006010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fc6:	f7ff faf3 	bl	80015b0 <main>
  bx  lr    
 8001fca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001fd8:	0800f720 	.word	0x0800f720
  ldr r2, =_sbss
 8001fdc:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001fe0:	20000538 	.word	0x20000538

08001fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <ADC_IRQHandler>
	...

08001fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fec:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <HAL_Init+0x40>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <HAL_Init+0x40>)
 8001ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_Init+0x40>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_Init+0x40>)
 8001ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <HAL_Init+0x40>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a07      	ldr	r2, [pc, #28]	; (8002028 <HAL_Init+0x40>)
 800200a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002010:	2003      	movs	r0, #3
 8002012:	f000 f931 	bl	8002278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002016:	2000      	movs	r0, #0
 8002018:	f000 f808 	bl	800202c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800201c:	f7ff fd74 	bl	8001b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40023c00 	.word	0x40023c00

0800202c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_InitTick+0x54>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_InitTick+0x58>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002042:	fbb3 f3f1 	udiv	r3, r3, r1
 8002046:	fbb2 f3f3 	udiv	r3, r2, r3
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f93b 	bl	80022c6 <HAL_SYSTICK_Config>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e00e      	b.n	8002078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b0f      	cmp	r3, #15
 800205e:	d80a      	bhi.n	8002076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002060:	2200      	movs	r2, #0
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	f000 f911 	bl	800228e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800206c:	4a06      	ldr	r2, [pc, #24]	; (8002088 <HAL_InitTick+0x5c>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	e000      	b.n	8002078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	2000002c 	.word	0x2000002c
 8002084:	20000034 	.word	0x20000034
 8002088:	20000030 	.word	0x20000030

0800208c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_IncTick+0x20>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_IncTick+0x24>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4413      	add	r3, r2
 800209c:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <HAL_IncTick+0x24>)
 800209e:	6013      	str	r3, [r2, #0]
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000034 	.word	0x20000034
 80020b0:	200003c0 	.word	0x200003c0

080020b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return uwTick;
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <HAL_GetTick+0x14>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	200003c0 	.word	0x200003c0

080020cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d4:	f7ff ffee 	bl	80020b4 <HAL_GetTick>
 80020d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e4:	d005      	beq.n	80020f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <HAL_Delay+0x44>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4413      	add	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020f2:	bf00      	nop
 80020f4:	f7ff ffde 	bl	80020b4 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	429a      	cmp	r2, r3
 8002102:	d8f7      	bhi.n	80020f4 <HAL_Delay+0x28>
  {
  }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000034 	.word	0x20000034

08002114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002130:	4013      	ands	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800213c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002146:	4a04      	ldr	r2, [pc, #16]	; (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	60d3      	str	r3, [r2, #12]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <__NVIC_GetPriorityGrouping+0x18>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	f003 0307 	and.w	r3, r3, #7
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db0a      	blt.n	80021a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	490c      	ldr	r1, [pc, #48]	; (80021c4 <__NVIC_SetPriority+0x4c>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	440b      	add	r3, r1
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a0:	e00a      	b.n	80021b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4908      	ldr	r1, [pc, #32]	; (80021c8 <__NVIC_SetPriority+0x50>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3b04      	subs	r3, #4
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	761a      	strb	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1c3 0307 	rsb	r3, r3, #7
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	bf28      	it	cs
 80021ea:	2304      	movcs	r3, #4
 80021ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d902      	bls.n	80021fc <NVIC_EncodePriority+0x30>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3b03      	subs	r3, #3
 80021fa:	e000      	b.n	80021fe <NVIC_EncodePriority+0x32>
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	f04f 32ff 	mov.w	r2, #4294967295
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	401a      	ands	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002214:	f04f 31ff 	mov.w	r1, #4294967295
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43d9      	mvns	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	4313      	orrs	r3, r2
         );
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002244:	d301      	bcc.n	800224a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002246:	2301      	movs	r3, #1
 8002248:	e00f      	b.n	800226a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <SysTick_Config+0x40>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002252:	210f      	movs	r1, #15
 8002254:	f04f 30ff 	mov.w	r0, #4294967295
 8002258:	f7ff ff8e 	bl	8002178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <SysTick_Config+0x40>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002262:	4b04      	ldr	r3, [pc, #16]	; (8002274 <SysTick_Config+0x40>)
 8002264:	2207      	movs	r2, #7
 8002266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	e000e010 	.word	0xe000e010

08002278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ff47 	bl	8002114 <__NVIC_SetPriorityGrouping>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a0:	f7ff ff5c 	bl	800215c <__NVIC_GetPriorityGrouping>
 80022a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	6978      	ldr	r0, [r7, #20]
 80022ac:	f7ff ff8e 	bl	80021cc <NVIC_EncodePriority>
 80022b0:	4602      	mov	r2, r0
 80022b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff5d 	bl	8002178 <__NVIC_SetPriority>
}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ffb0 	bl	8002234 <SysTick_Config>
 80022d4:	4603      	mov	r3, r0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	; 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	e159      	b.n	80025b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022fc:	2201      	movs	r2, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	429a      	cmp	r2, r3
 8002316:	f040 8148 	bne.w	80025aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d005      	beq.n	8002332 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800232e:	2b02      	cmp	r3, #2
 8002330:	d130      	bne.n	8002394 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	2203      	movs	r2, #3
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002368:	2201      	movs	r2, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 0201 	and.w	r2, r3, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b03      	cmp	r3, #3
 800239e:	d017      	beq.n	80023d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d123      	bne.n	8002424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	08da      	lsrs	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3208      	adds	r2, #8
 80023e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	220f      	movs	r2, #15
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	08da      	lsrs	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3208      	adds	r2, #8
 800241e:	69b9      	ldr	r1, [r7, #24]
 8002420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0203 	and.w	r2, r3, #3
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80a2 	beq.w	80025aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b57      	ldr	r3, [pc, #348]	; (80025c8 <HAL_GPIO_Init+0x2e8>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	4a56      	ldr	r2, [pc, #344]	; (80025c8 <HAL_GPIO_Init+0x2e8>)
 8002470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002474:	6453      	str	r3, [r2, #68]	; 0x44
 8002476:	4b54      	ldr	r3, [pc, #336]	; (80025c8 <HAL_GPIO_Init+0x2e8>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002482:	4a52      	ldr	r2, [pc, #328]	; (80025cc <HAL_GPIO_Init+0x2ec>)
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	3302      	adds	r3, #2
 800248a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	220f      	movs	r2, #15
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a49      	ldr	r2, [pc, #292]	; (80025d0 <HAL_GPIO_Init+0x2f0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d019      	beq.n	80024e2 <HAL_GPIO_Init+0x202>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a48      	ldr	r2, [pc, #288]	; (80025d4 <HAL_GPIO_Init+0x2f4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d013      	beq.n	80024de <HAL_GPIO_Init+0x1fe>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a47      	ldr	r2, [pc, #284]	; (80025d8 <HAL_GPIO_Init+0x2f8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00d      	beq.n	80024da <HAL_GPIO_Init+0x1fa>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a46      	ldr	r2, [pc, #280]	; (80025dc <HAL_GPIO_Init+0x2fc>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d007      	beq.n	80024d6 <HAL_GPIO_Init+0x1f6>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a45      	ldr	r2, [pc, #276]	; (80025e0 <HAL_GPIO_Init+0x300>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d101      	bne.n	80024d2 <HAL_GPIO_Init+0x1f2>
 80024ce:	2304      	movs	r3, #4
 80024d0:	e008      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024d2:	2307      	movs	r3, #7
 80024d4:	e006      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024d6:	2303      	movs	r3, #3
 80024d8:	e004      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024da:	2302      	movs	r3, #2
 80024dc:	e002      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024e2:	2300      	movs	r3, #0
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	f002 0203 	and.w	r2, r2, #3
 80024ea:	0092      	lsls	r2, r2, #2
 80024ec:	4093      	lsls	r3, r2
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f4:	4935      	ldr	r1, [pc, #212]	; (80025cc <HAL_GPIO_Init+0x2ec>)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	3302      	adds	r3, #2
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002502:	4b38      	ldr	r3, [pc, #224]	; (80025e4 <HAL_GPIO_Init+0x304>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002526:	4a2f      	ldr	r2, [pc, #188]	; (80025e4 <HAL_GPIO_Init+0x304>)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800252c:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_GPIO_Init+0x304>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002550:	4a24      	ldr	r2, [pc, #144]	; (80025e4 <HAL_GPIO_Init+0x304>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002556:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <HAL_GPIO_Init+0x304>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800257a:	4a1a      	ldr	r2, [pc, #104]	; (80025e4 <HAL_GPIO_Init+0x304>)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002580:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <HAL_GPIO_Init+0x304>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a4:	4a0f      	ldr	r2, [pc, #60]	; (80025e4 <HAL_GPIO_Init+0x304>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3301      	adds	r3, #1
 80025ae:	61fb      	str	r3, [r7, #28]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2b0f      	cmp	r3, #15
 80025b4:	f67f aea2 	bls.w	80022fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3724      	adds	r7, #36	; 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40013800 	.word	0x40013800
 80025d0:	40020000 	.word	0x40020000
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40020800 	.word	0x40020800
 80025dc:	40020c00 	.word	0x40020c00
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40013c00 	.word	0x40013c00

080025e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
 80025f4:	4613      	mov	r3, r2
 80025f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f8:	787b      	ldrb	r3, [r7, #1]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002604:	e003      	b.n	800260e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	041a      	lsls	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	619a      	str	r2, [r3, #24]
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e12b      	b.n	8002886 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fa88 	bl	8001b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2224      	movs	r2, #36	; 0x24
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800266e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800267e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002680:	f001 fc60 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 8002684:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a81      	ldr	r2, [pc, #516]	; (8002890 <HAL_I2C_Init+0x274>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d807      	bhi.n	80026a0 <HAL_I2C_Init+0x84>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a80      	ldr	r2, [pc, #512]	; (8002894 <HAL_I2C_Init+0x278>)
 8002694:	4293      	cmp	r3, r2
 8002696:	bf94      	ite	ls
 8002698:	2301      	movls	r3, #1
 800269a:	2300      	movhi	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	e006      	b.n	80026ae <HAL_I2C_Init+0x92>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a7d      	ldr	r2, [pc, #500]	; (8002898 <HAL_I2C_Init+0x27c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	bf94      	ite	ls
 80026a8:	2301      	movls	r3, #1
 80026aa:	2300      	movhi	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e0e7      	b.n	8002886 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4a78      	ldr	r2, [pc, #480]	; (800289c <HAL_I2C_Init+0x280>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0c9b      	lsrs	r3, r3, #18
 80026c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a6a      	ldr	r2, [pc, #424]	; (8002890 <HAL_I2C_Init+0x274>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d802      	bhi.n	80026f0 <HAL_I2C_Init+0xd4>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3301      	adds	r3, #1
 80026ee:	e009      	b.n	8002704 <HAL_I2C_Init+0xe8>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	4a69      	ldr	r2, [pc, #420]	; (80028a0 <HAL_I2C_Init+0x284>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	099b      	lsrs	r3, r3, #6
 8002702:	3301      	adds	r3, #1
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	430b      	orrs	r3, r1
 800270a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002716:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	495c      	ldr	r1, [pc, #368]	; (8002890 <HAL_I2C_Init+0x274>)
 8002720:	428b      	cmp	r3, r1
 8002722:	d819      	bhi.n	8002758 <HAL_I2C_Init+0x13c>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1e59      	subs	r1, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002732:	1c59      	adds	r1, r3, #1
 8002734:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002738:	400b      	ands	r3, r1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_I2C_Init+0x138>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1e59      	subs	r1, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fbb1 f3f3 	udiv	r3, r1, r3
 800274c:	3301      	adds	r3, #1
 800274e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002752:	e051      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 8002754:	2304      	movs	r3, #4
 8002756:	e04f      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d111      	bne.n	8002784 <HAL_I2C_Init+0x168>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1e58      	subs	r0, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	440b      	add	r3, r1
 800276e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002772:	3301      	adds	r3, #1
 8002774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	e012      	b.n	80027aa <HAL_I2C_Init+0x18e>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1e58      	subs	r0, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	0099      	lsls	r1, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	fbb0 f3f3 	udiv	r3, r0, r3
 800279a:	3301      	adds	r3, #1
 800279c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_Init+0x196>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e022      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10e      	bne.n	80027d8 <HAL_I2C_Init+0x1bc>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1e58      	subs	r0, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6859      	ldr	r1, [r3, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	440b      	add	r3, r1
 80027c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027cc:	3301      	adds	r3, #1
 80027ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d6:	e00f      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1e58      	subs	r0, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	0099      	lsls	r1, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ee:	3301      	adds	r3, #1
 80027f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	6809      	ldr	r1, [r1, #0]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69da      	ldr	r2, [r3, #28]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002826:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6911      	ldr	r1, [r2, #16]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68d2      	ldr	r2, [r2, #12]
 8002832:	4311      	orrs	r1, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	430b      	orrs	r3, r1
 800283a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	000186a0 	.word	0x000186a0
 8002894:	001e847f 	.word	0x001e847f
 8002898:	003d08ff 	.word	0x003d08ff
 800289c:	431bde83 	.word	0x431bde83
 80028a0:	10624dd3 	.word	0x10624dd3

080028a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	4608      	mov	r0, r1
 80028ae:	4611      	mov	r1, r2
 80028b0:	461a      	mov	r2, r3
 80028b2:	4603      	mov	r3, r0
 80028b4:	817b      	strh	r3, [r7, #10]
 80028b6:	460b      	mov	r3, r1
 80028b8:	813b      	strh	r3, [r7, #8]
 80028ba:	4613      	mov	r3, r2
 80028bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028be:	f7ff fbf9 	bl	80020b4 <HAL_GetTick>
 80028c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	f040 80d9 	bne.w	8002a84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2319      	movs	r3, #25
 80028d8:	2201      	movs	r2, #1
 80028da:	496d      	ldr	r1, [pc, #436]	; (8002a90 <HAL_I2C_Mem_Write+0x1ec>)
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fc8b 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
 80028ea:	e0cc      	b.n	8002a86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_I2C_Mem_Write+0x56>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e0c5      	b.n	8002a86 <HAL_I2C_Mem_Write+0x1e2>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d007      	beq.n	8002920 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800292e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2221      	movs	r2, #33	; 0x21
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2240      	movs	r2, #64	; 0x40
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a3a      	ldr	r2, [r7, #32]
 800294a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002950:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a4d      	ldr	r2, [pc, #308]	; (8002a94 <HAL_I2C_Mem_Write+0x1f0>)
 8002960:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002962:	88f8      	ldrh	r0, [r7, #6]
 8002964:	893a      	ldrh	r2, [r7, #8]
 8002966:	8979      	ldrh	r1, [r7, #10]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	9301      	str	r3, [sp, #4]
 800296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	4603      	mov	r3, r0
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 fac2 	bl	8002efc <I2C_RequestMemoryWrite>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d052      	beq.n	8002a24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e081      	b.n	8002a86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fd50 	bl	800342c <I2C_WaitOnTXEFlagUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00d      	beq.n	80029ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	2b04      	cmp	r3, #4
 8002998:	d107      	bne.n	80029aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e06b      	b.n	8002a86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	781a      	ldrb	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d11b      	bne.n	8002a24 <HAL_I2C_Mem_Write+0x180>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d017      	beq.n	8002a24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1aa      	bne.n	8002982 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 fd43 	bl	80034bc <I2C_WaitOnBTFFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d107      	bne.n	8002a54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e016      	b.n	8002a86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e000      	b.n	8002a86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
  }
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	00100002 	.word	0x00100002
 8002a94:	ffff0000 	.word	0xffff0000

08002a98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08c      	sub	sp, #48	; 0x30
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	817b      	strh	r3, [r7, #10]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	813b      	strh	r3, [r7, #8]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ab2:	f7ff faff 	bl	80020b4 <HAL_GetTick>
 8002ab6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	f040 8214 	bne.w	8002eee <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2319      	movs	r3, #25
 8002acc:	2201      	movs	r2, #1
 8002ace:	497b      	ldr	r1, [pc, #492]	; (8002cbc <HAL_I2C_Mem_Read+0x224>)
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fb91 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
 8002ade:	e207      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_I2C_Mem_Read+0x56>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e200      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x458>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d007      	beq.n	8002b14 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2222      	movs	r2, #34	; 0x22
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2240      	movs	r2, #64	; 0x40
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a5b      	ldr	r2, [pc, #364]	; (8002cc0 <HAL_I2C_Mem_Read+0x228>)
 8002b54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b56:	88f8      	ldrh	r0, [r7, #6]
 8002b58:	893a      	ldrh	r2, [r7, #8]
 8002b5a:	8979      	ldrh	r1, [r7, #10]
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	4603      	mov	r3, r0
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fa5e 	bl	8003028 <I2C_RequestMemoryRead>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e1bc      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d113      	bne.n	8002ba6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	623b      	str	r3, [r7, #32]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	623b      	str	r3, [r7, #32]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	623b      	str	r3, [r7, #32]
 8002b92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	e190      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d11b      	bne.n	8002be6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	e170      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d11b      	bne.n	8002c26 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bfc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	61bb      	str	r3, [r7, #24]
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	e150      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c3c:	e144      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	f200 80f1 	bhi.w	8002e2a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d123      	bne.n	8002c98 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 fc79 	bl	800354c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e145      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c96:	e117      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d14e      	bne.n	8002d3e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	4906      	ldr	r1, [pc, #24]	; (8002cc4 <HAL_I2C_Mem_Read+0x22c>)
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 faa4 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e11a      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x458>
 8002cba:	bf00      	nop
 8002cbc:	00100002 	.word	0x00100002
 8002cc0:	ffff0000 	.word	0xffff0000
 8002cc4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d3c:	e0c4      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d44:	2200      	movs	r2, #0
 8002d46:	496c      	ldr	r1, [pc, #432]	; (8002ef8 <HAL_I2C_Mem_Read+0x460>)
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fa55 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0cb      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da0:	2200      	movs	r2, #0
 8002da2:	4955      	ldr	r1, [pc, #340]	; (8002ef8 <HAL_I2C_Mem_Read+0x460>)
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 fa27 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e09d      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e28:	e04e      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 fb8c 	bl	800354c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e058      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d124      	bne.n	8002ec8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d107      	bne.n	8002e96 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e94:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f47f aeb6 	bne.w	8002c3e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e000      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
  }
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3728      	adds	r7, #40	; 0x28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	00010004 	.word	0x00010004

08002efc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	4608      	mov	r0, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	817b      	strh	r3, [r7, #10]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	813b      	strh	r3, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f960 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00d      	beq.n	8002f5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f4c:	d103      	bne.n	8002f56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e05f      	b.n	800301a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f5a:	897b      	ldrh	r3, [r7, #10]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	6a3a      	ldr	r2, [r7, #32]
 8002f6e:	492d      	ldr	r1, [pc, #180]	; (8003024 <I2C_RequestMemoryWrite+0x128>)
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f9bb 	bl	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e04c      	b.n	800301a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f98:	6a39      	ldr	r1, [r7, #32]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fa46 	bl	800342c <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00d      	beq.n	8002fc2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d107      	bne.n	8002fbe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e02b      	b.n	800301a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d105      	bne.n	8002fd4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fc8:	893b      	ldrh	r3, [r7, #8]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	611a      	str	r2, [r3, #16]
 8002fd2:	e021      	b.n	8003018 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fd4:	893b      	ldrh	r3, [r7, #8]
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe4:	6a39      	ldr	r1, [r7, #32]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fa20 	bl	800342c <I2C_WaitOnTXEFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00d      	beq.n	800300e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d107      	bne.n	800300a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003008:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e005      	b.n	800301a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800300e:	893b      	ldrh	r3, [r7, #8]
 8003010:	b2da      	uxtb	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	00010002 	.word	0x00010002

08003028 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	4608      	mov	r0, r1
 8003032:	4611      	mov	r1, r2
 8003034:	461a      	mov	r2, r3
 8003036:	4603      	mov	r3, r0
 8003038:	817b      	strh	r3, [r7, #10]
 800303a:	460b      	mov	r3, r1
 800303c:	813b      	strh	r3, [r7, #8]
 800303e:	4613      	mov	r3, r2
 8003040:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003050:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003060:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	2200      	movs	r2, #0
 800306a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f8c2 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00d      	beq.n	8003096 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003088:	d103      	bne.n	8003092 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e0aa      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003096:	897b      	ldrh	r3, [r7, #10]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	6a3a      	ldr	r2, [r7, #32]
 80030aa:	4952      	ldr	r1, [pc, #328]	; (80031f4 <I2C_RequestMemoryRead+0x1cc>)
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f91d 	bl	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e097      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d4:	6a39      	ldr	r1, [r7, #32]
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f9a8 	bl	800342c <I2C_WaitOnTXEFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00d      	beq.n	80030fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d107      	bne.n	80030fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e076      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d105      	bne.n	8003110 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003104:	893b      	ldrh	r3, [r7, #8]
 8003106:	b2da      	uxtb	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	611a      	str	r2, [r3, #16]
 800310e:	e021      	b.n	8003154 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003110:	893b      	ldrh	r3, [r7, #8]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	b29b      	uxth	r3, r3
 8003116:	b2da      	uxtb	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800311e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003120:	6a39      	ldr	r1, [r7, #32]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f982 	bl	800342c <I2C_WaitOnTXEFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00d      	beq.n	800314a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	2b04      	cmp	r3, #4
 8003134:	d107      	bne.n	8003146 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003144:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e050      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800314a:	893b      	ldrh	r3, [r7, #8]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003156:	6a39      	ldr	r1, [r7, #32]
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 f967 	bl	800342c <I2C_WaitOnTXEFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00d      	beq.n	8003180 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	2b04      	cmp	r3, #4
 800316a:	d107      	bne.n	800317c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e035      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800318e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	2200      	movs	r2, #0
 8003198:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f82b 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00d      	beq.n	80031c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b6:	d103      	bne.n	80031c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e013      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031c4:	897b      	ldrh	r3, [r7, #10]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	6a3a      	ldr	r2, [r7, #32]
 80031d8:	4906      	ldr	r1, [pc, #24]	; (80031f4 <I2C_RequestMemoryRead+0x1cc>)
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f886 	bl	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	00010002 	.word	0x00010002

080031f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003208:	e048      	b.n	800329c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d044      	beq.n	800329c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003212:	f7fe ff4f 	bl	80020b4 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d302      	bcc.n	8003228 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d139      	bne.n	800329c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	0c1b      	lsrs	r3, r3, #16
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	d10d      	bne.n	800324e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	43da      	mvns	r2, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	4013      	ands	r3, r2
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	e00c      	b.n	8003268 <I2C_WaitOnFlagUntilTimeout+0x70>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	43da      	mvns	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	4013      	ands	r3, r2
 800325a:	b29b      	uxth	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	429a      	cmp	r2, r3
 800326c:	d116      	bne.n	800329c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	f043 0220 	orr.w	r2, r3, #32
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e023      	b.n	80032e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	0c1b      	lsrs	r3, r3, #16
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d10d      	bne.n	80032c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	43da      	mvns	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4013      	ands	r3, r2
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	e00c      	b.n	80032dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	43da      	mvns	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4013      	ands	r3, r2
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf0c      	ite	eq
 80032d4:	2301      	moveq	r3, #1
 80032d6:	2300      	movne	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d093      	beq.n	800320a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032fa:	e071      	b.n	80033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330a:	d123      	bne.n	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003324:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	f043 0204 	orr.w	r2, r3, #4
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e067      	b.n	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d041      	beq.n	80033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335c:	f7fe feaa 	bl	80020b4 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	429a      	cmp	r2, r3
 800336a:	d302      	bcc.n	8003372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d136      	bne.n	80033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d10c      	bne.n	8003396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4013      	ands	r3, r2
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	e00b      	b.n	80033ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	43da      	mvns	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4013      	ands	r3, r2
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d016      	beq.n	80033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e021      	b.n	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	0c1b      	lsrs	r3, r3, #16
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d10c      	bne.n	8003404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	43da      	mvns	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4013      	ands	r3, r2
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e00b      	b.n	800341c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	43da      	mvns	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4013      	ands	r3, r2
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	bf14      	ite	ne
 8003416:	2301      	movne	r3, #1
 8003418:	2300      	moveq	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	f47f af6d 	bne.w	80032fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003438:	e034      	b.n	80034a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f8e3 	bl	8003606 <I2C_IsAcknowledgeFailed>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e034      	b.n	80034b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003450:	d028      	beq.n	80034a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003452:	f7fe fe2f 	bl	80020b4 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	429a      	cmp	r2, r3
 8003460:	d302      	bcc.n	8003468 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d11d      	bne.n	80034a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003472:	2b80      	cmp	r3, #128	; 0x80
 8003474:	d016      	beq.n	80034a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e007      	b.n	80034b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ae:	2b80      	cmp	r3, #128	; 0x80
 80034b0:	d1c3      	bne.n	800343a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034c8:	e034      	b.n	8003534 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f89b 	bl	8003606 <I2C_IsAcknowledgeFailed>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e034      	b.n	8003544 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d028      	beq.n	8003534 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e2:	f7fe fde7 	bl	80020b4 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d302      	bcc.n	80034f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d11d      	bne.n	8003534 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b04      	cmp	r3, #4
 8003504:	d016      	beq.n	8003534 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	f043 0220 	orr.w	r2, r3, #32
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e007      	b.n	8003544 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b04      	cmp	r3, #4
 8003540:	d1c3      	bne.n	80034ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003558:	e049      	b.n	80035ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b10      	cmp	r3, #16
 8003566:	d119      	bne.n	800359c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0210 	mvn.w	r2, #16
 8003570:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e030      	b.n	80035fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359c:	f7fe fd8a 	bl	80020b4 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d302      	bcc.n	80035b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d11d      	bne.n	80035ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035bc:	2b40      	cmp	r3, #64	; 0x40
 80035be:	d016      	beq.n	80035ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f043 0220 	orr.w	r2, r3, #32
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e007      	b.n	80035fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f8:	2b40      	cmp	r3, #64	; 0x40
 80035fa:	d1ae      	bne.n	800355a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361c:	d11b      	bne.n	8003656 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003626:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f043 0204 	orr.w	r2, r3, #4
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e267      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d075      	beq.n	800376e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003682:	4b88      	ldr	r3, [pc, #544]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	2b04      	cmp	r3, #4
 800368c:	d00c      	beq.n	80036a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800368e:	4b85      	ldr	r3, [pc, #532]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003696:	2b08      	cmp	r3, #8
 8003698:	d112      	bne.n	80036c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800369a:	4b82      	ldr	r3, [pc, #520]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a6:	d10b      	bne.n	80036c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a8:	4b7e      	ldr	r3, [pc, #504]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d05b      	beq.n	800376c <HAL_RCC_OscConfig+0x108>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d157      	bne.n	800376c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e242      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c8:	d106      	bne.n	80036d8 <HAL_RCC_OscConfig+0x74>
 80036ca:	4b76      	ldr	r3, [pc, #472]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a75      	ldr	r2, [pc, #468]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e01d      	b.n	8003714 <HAL_RCC_OscConfig+0xb0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e0:	d10c      	bne.n	80036fc <HAL_RCC_OscConfig+0x98>
 80036e2:	4b70      	ldr	r3, [pc, #448]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a6f      	ldr	r2, [pc, #444]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	4b6d      	ldr	r3, [pc, #436]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a6c      	ldr	r2, [pc, #432]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	e00b      	b.n	8003714 <HAL_RCC_OscConfig+0xb0>
 80036fc:	4b69      	ldr	r3, [pc, #420]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a68      	ldr	r2, [pc, #416]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b66      	ldr	r3, [pc, #408]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a65      	ldr	r2, [pc, #404]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 800370e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d013      	beq.n	8003744 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fe fcca 	bl	80020b4 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003724:	f7fe fcc6 	bl	80020b4 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e207      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	4b5b      	ldr	r3, [pc, #364]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0xc0>
 8003742:	e014      	b.n	800376e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe fcb6 	bl	80020b4 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800374c:	f7fe fcb2 	bl	80020b4 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	; 0x64
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e1f3      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375e:	4b51      	ldr	r3, [pc, #324]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0xe8>
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d063      	beq.n	8003842 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800377a:	4b4a      	ldr	r3, [pc, #296]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00b      	beq.n	800379e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003786:	4b47      	ldr	r3, [pc, #284]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800378e:	2b08      	cmp	r3, #8
 8003790:	d11c      	bne.n	80037cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003792:	4b44      	ldr	r3, [pc, #272]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d116      	bne.n	80037cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379e:	4b41      	ldr	r3, [pc, #260]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_RCC_OscConfig+0x152>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d001      	beq.n	80037b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e1c7      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b6:	4b3b      	ldr	r3, [pc, #236]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4937      	ldr	r1, [pc, #220]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ca:	e03a      	b.n	8003842 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d020      	beq.n	8003816 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d4:	4b34      	ldr	r3, [pc, #208]	; (80038a8 <HAL_RCC_OscConfig+0x244>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7fe fc6b 	bl	80020b4 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e2:	f7fe fc67 	bl	80020b4 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e1a8      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f4:	4b2b      	ldr	r3, [pc, #172]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003800:	4b28      	ldr	r3, [pc, #160]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4925      	ldr	r1, [pc, #148]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003810:	4313      	orrs	r3, r2
 8003812:	600b      	str	r3, [r1, #0]
 8003814:	e015      	b.n	8003842 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003816:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <HAL_RCC_OscConfig+0x244>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381c:	f7fe fc4a 	bl	80020b4 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003824:	f7fe fc46 	bl	80020b4 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e187      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003836:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d036      	beq.n	80038bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d016      	beq.n	8003884 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003856:	4b15      	ldr	r3, [pc, #84]	; (80038ac <HAL_RCC_OscConfig+0x248>)
 8003858:	2201      	movs	r2, #1
 800385a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385c:	f7fe fc2a 	bl	80020b4 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003864:	f7fe fc26 	bl	80020b4 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e167      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003876:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCC_OscConfig+0x200>
 8003882:	e01b      	b.n	80038bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003884:	4b09      	ldr	r3, [pc, #36]	; (80038ac <HAL_RCC_OscConfig+0x248>)
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388a:	f7fe fc13 	bl	80020b4 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003890:	e00e      	b.n	80038b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003892:	f7fe fc0f 	bl	80020b4 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d907      	bls.n	80038b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e150      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
 80038a4:	40023800 	.word	0x40023800
 80038a8:	42470000 	.word	0x42470000
 80038ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b0:	4b88      	ldr	r3, [pc, #544]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1ea      	bne.n	8003892 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8097 	beq.w	80039f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ca:	2300      	movs	r3, #0
 80038cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ce:	4b81      	ldr	r3, [pc, #516]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10f      	bne.n	80038fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	4b7d      	ldr	r3, [pc, #500]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	4a7c      	ldr	r2, [pc, #496]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ea:	4b7a      	ldr	r3, [pc, #488]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f6:	2301      	movs	r3, #1
 80038f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fa:	4b77      	ldr	r3, [pc, #476]	; (8003ad8 <HAL_RCC_OscConfig+0x474>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d118      	bne.n	8003938 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003906:	4b74      	ldr	r3, [pc, #464]	; (8003ad8 <HAL_RCC_OscConfig+0x474>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a73      	ldr	r2, [pc, #460]	; (8003ad8 <HAL_RCC_OscConfig+0x474>)
 800390c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003912:	f7fe fbcf 	bl	80020b4 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391a:	f7fe fbcb 	bl	80020b4 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e10c      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392c:	4b6a      	ldr	r3, [pc, #424]	; (8003ad8 <HAL_RCC_OscConfig+0x474>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d106      	bne.n	800394e <HAL_RCC_OscConfig+0x2ea>
 8003940:	4b64      	ldr	r3, [pc, #400]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	4a63      	ldr	r2, [pc, #396]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6713      	str	r3, [r2, #112]	; 0x70
 800394c:	e01c      	b.n	8003988 <HAL_RCC_OscConfig+0x324>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b05      	cmp	r3, #5
 8003954:	d10c      	bne.n	8003970 <HAL_RCC_OscConfig+0x30c>
 8003956:	4b5f      	ldr	r3, [pc, #380]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	4a5e      	ldr	r2, [pc, #376]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 800395c:	f043 0304 	orr.w	r3, r3, #4
 8003960:	6713      	str	r3, [r2, #112]	; 0x70
 8003962:	4b5c      	ldr	r3, [pc, #368]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003966:	4a5b      	ldr	r2, [pc, #364]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	6713      	str	r3, [r2, #112]	; 0x70
 800396e:	e00b      	b.n	8003988 <HAL_RCC_OscConfig+0x324>
 8003970:	4b58      	ldr	r3, [pc, #352]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	4a57      	ldr	r2, [pc, #348]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003976:	f023 0301 	bic.w	r3, r3, #1
 800397a:	6713      	str	r3, [r2, #112]	; 0x70
 800397c:	4b55      	ldr	r3, [pc, #340]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 800397e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003980:	4a54      	ldr	r2, [pc, #336]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003982:	f023 0304 	bic.w	r3, r3, #4
 8003986:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d015      	beq.n	80039bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003990:	f7fe fb90 	bl	80020b4 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003996:	e00a      	b.n	80039ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003998:	f7fe fb8c 	bl	80020b4 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e0cb      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ae:	4b49      	ldr	r3, [pc, #292]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0ee      	beq.n	8003998 <HAL_RCC_OscConfig+0x334>
 80039ba:	e014      	b.n	80039e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039bc:	f7fe fb7a 	bl	80020b4 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c2:	e00a      	b.n	80039da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c4:	f7fe fb76 	bl	80020b4 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e0b5      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039da:	4b3e      	ldr	r3, [pc, #248]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1ee      	bne.n	80039c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039e6:	7dfb      	ldrb	r3, [r7, #23]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d105      	bne.n	80039f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ec:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	4a38      	ldr	r2, [pc, #224]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80039f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80a1 	beq.w	8003b44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a02:	4b34      	ldr	r3, [pc, #208]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d05c      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d141      	bne.n	8003a9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a16:	4b31      	ldr	r3, [pc, #196]	; (8003adc <HAL_RCC_OscConfig+0x478>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7fe fb4a 	bl	80020b4 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a24:	f7fe fb46 	bl	80020b4 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e087      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a36:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69da      	ldr	r2, [r3, #28]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	019b      	lsls	r3, r3, #6
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	041b      	lsls	r3, r3, #16
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	061b      	lsls	r3, r3, #24
 8003a66:	491b      	ldr	r1, [pc, #108]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a6c:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <HAL_RCC_OscConfig+0x478>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a72:	f7fe fb1f 	bl	80020b4 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a7a:	f7fe fb1b 	bl	80020b4 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e05c      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x416>
 8003a98:	e054      	b.n	8003b44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <HAL_RCC_OscConfig+0x478>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7fe fb08 	bl	80020b4 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fe fb04 	bl	80020b4 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e045      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x444>
 8003ac6:	e03d      	b.n	8003b44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d107      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e038      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ae0:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <HAL_RCC_OscConfig+0x4ec>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d028      	beq.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d121      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d11a      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b10:	4013      	ands	r3, r2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d111      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	085b      	lsrs	r3, r3, #1
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40023800 	.word	0x40023800

08003b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0cc      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b68:	4b68      	ldr	r3, [pc, #416]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d90c      	bls.n	8003b90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b76:	4b65      	ldr	r3, [pc, #404]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7e:	4b63      	ldr	r3, [pc, #396]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0b8      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d020      	beq.n	8003bde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba8:	4b59      	ldr	r3, [pc, #356]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4a58      	ldr	r2, [pc, #352]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc0:	4b53      	ldr	r3, [pc, #332]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4a52      	ldr	r2, [pc, #328]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bcc:	4b50      	ldr	r3, [pc, #320]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	494d      	ldr	r1, [pc, #308]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d044      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf2:	4b47      	ldr	r3, [pc, #284]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d119      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e07f      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d003      	beq.n	8003c12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c12:	4b3f      	ldr	r3, [pc, #252]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e06f      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c22:	4b3b      	ldr	r3, [pc, #236]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e067      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c32:	4b37      	ldr	r3, [pc, #220]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f023 0203 	bic.w	r2, r3, #3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4934      	ldr	r1, [pc, #208]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c44:	f7fe fa36 	bl	80020b4 <HAL_GetTick>
 8003c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c4c:	f7fe fa32 	bl	80020b4 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e04f      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c62:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 020c 	and.w	r2, r3, #12
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d1eb      	bne.n	8003c4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c74:	4b25      	ldr	r3, [pc, #148]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d20c      	bcs.n	8003c9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c82:	4b22      	ldr	r3, [pc, #136]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8a:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e032      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca8:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4916      	ldr	r1, [pc, #88]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	490e      	ldr	r1, [pc, #56]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cda:	f000 f821 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	490a      	ldr	r1, [pc, #40]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003cec:	5ccb      	ldrb	r3, [r1, r3]
 8003cee:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf2:	4a09      	ldr	r2, [pc, #36]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cf6:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe f996 	bl	800202c <HAL_InitTick>

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40023c00 	.word	0x40023c00
 8003d10:	40023800 	.word	0x40023800
 8003d14:	0800f354 	.word	0x0800f354
 8003d18:	2000002c 	.word	0x2000002c
 8003d1c:	20000030 	.word	0x20000030

08003d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d24:	b094      	sub	sp, #80	; 0x50
 8003d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d30:	2300      	movs	r3, #0
 8003d32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d38:	4b79      	ldr	r3, [pc, #484]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d00d      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0x40>
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	f200 80e1 	bhi.w	8003f0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <HAL_RCC_GetSysClockFreq+0x34>
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d003      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d52:	e0db      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d54:	4b73      	ldr	r3, [pc, #460]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d58:	e0db      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d5a:	4b73      	ldr	r3, [pc, #460]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d5e:	e0d8      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d60:	4b6f      	ldr	r3, [pc, #444]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d6a:	4b6d      	ldr	r3, [pc, #436]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d063      	beq.n	8003e3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d76:	4b6a      	ldr	r3, [pc, #424]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	099b      	lsrs	r3, r3, #6
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d88:	633b      	str	r3, [r7, #48]	; 0x30
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d92:	4622      	mov	r2, r4
 8003d94:	462b      	mov	r3, r5
 8003d96:	f04f 0000 	mov.w	r0, #0
 8003d9a:	f04f 0100 	mov.w	r1, #0
 8003d9e:	0159      	lsls	r1, r3, #5
 8003da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da4:	0150      	lsls	r0, r2, #5
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4621      	mov	r1, r4
 8003dac:	1a51      	subs	r1, r2, r1
 8003dae:	6139      	str	r1, [r7, #16]
 8003db0:	4629      	mov	r1, r5
 8003db2:	eb63 0301 	sbc.w	r3, r3, r1
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dc4:	4659      	mov	r1, fp
 8003dc6:	018b      	lsls	r3, r1, #6
 8003dc8:	4651      	mov	r1, sl
 8003dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dce:	4651      	mov	r1, sl
 8003dd0:	018a      	lsls	r2, r1, #6
 8003dd2:	4651      	mov	r1, sl
 8003dd4:	ebb2 0801 	subs.w	r8, r2, r1
 8003dd8:	4659      	mov	r1, fp
 8003dda:	eb63 0901 	sbc.w	r9, r3, r1
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003df2:	4690      	mov	r8, r2
 8003df4:	4699      	mov	r9, r3
 8003df6:	4623      	mov	r3, r4
 8003df8:	eb18 0303 	adds.w	r3, r8, r3
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	462b      	mov	r3, r5
 8003e00:	eb49 0303 	adc.w	r3, r9, r3
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e12:	4629      	mov	r1, r5
 8003e14:	024b      	lsls	r3, r1, #9
 8003e16:	4621      	mov	r1, r4
 8003e18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	024a      	lsls	r2, r1, #9
 8003e20:	4610      	mov	r0, r2
 8003e22:	4619      	mov	r1, r3
 8003e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e26:	2200      	movs	r2, #0
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e30:	f7fc ff12 	bl	8000c58 <__aeabi_uldivmod>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4613      	mov	r3, r2
 8003e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e3c:	e058      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3e:	4b38      	ldr	r3, [pc, #224]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	2200      	movs	r2, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	4611      	mov	r1, r2
 8003e4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e4e:	623b      	str	r3, [r7, #32]
 8003e50:	2300      	movs	r3, #0
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
 8003e54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e58:	4642      	mov	r2, r8
 8003e5a:	464b      	mov	r3, r9
 8003e5c:	f04f 0000 	mov.w	r0, #0
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	0159      	lsls	r1, r3, #5
 8003e66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e6a:	0150      	lsls	r0, r2, #5
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4641      	mov	r1, r8
 8003e72:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e76:	4649      	mov	r1, r9
 8003e78:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e90:	ebb2 040a 	subs.w	r4, r2, sl
 8003e94:	eb63 050b 	sbc.w	r5, r3, fp
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	00eb      	lsls	r3, r5, #3
 8003ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ea6:	00e2      	lsls	r2, r4, #3
 8003ea8:	4614      	mov	r4, r2
 8003eaa:	461d      	mov	r5, r3
 8003eac:	4643      	mov	r3, r8
 8003eae:	18e3      	adds	r3, r4, r3
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	eb45 0303 	adc.w	r3, r5, r3
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	028b      	lsls	r3, r1, #10
 8003eca:	4621      	mov	r1, r4
 8003ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	028a      	lsls	r2, r1, #10
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eda:	2200      	movs	r2, #0
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	61fa      	str	r2, [r7, #28]
 8003ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee4:	f7fc feb8 	bl	8000c58 <__aeabi_uldivmod>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4613      	mov	r3, r2
 8003eee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	3301      	adds	r3, #1
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f0a:	e002      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3750      	adds	r7, #80	; 0x50
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800
 8003f24:	00f42400 	.word	0x00f42400
 8003f28:	007a1200 	.word	0x007a1200

08003f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	2000002c 	.word	0x2000002c

08003f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f48:	f7ff fff0 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	0a9b      	lsrs	r3, r3, #10
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	4903      	ldr	r1, [pc, #12]	; (8003f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40023800 	.word	0x40023800
 8003f68:	0800f364 	.word	0x0800f364

08003f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f70:	f7ff ffdc 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8003f74:	4602      	mov	r2, r0
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	0b5b      	lsrs	r3, r3, #13
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	4903      	ldr	r1, [pc, #12]	; (8003f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f82:	5ccb      	ldrb	r3, [r1, r3]
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	0800f364 	.word	0x0800f364

08003f94 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e041      	b.n	800402a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fd fe5a 	bl	8001c74 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f000 f8ca 	bl	800416c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b086      	sub	sp, #24
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_TIM_IC_ConfigChannel+0x1e>
 800404c:	2302      	movs	r3, #2
 800404e:	e088      	b.n	8004162 <HAL_TIM_IC_ConfigChannel+0x130>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d11b      	bne.n	8004096 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800406e:	f000 f909 	bl	8004284 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699a      	ldr	r2, [r3, #24]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 020c 	bic.w	r2, r2, #12
 8004080:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6999      	ldr	r1, [r3, #24]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	619a      	str	r2, [r3, #24]
 8004094:	e060      	b.n	8004158 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b04      	cmp	r3, #4
 800409a:	d11c      	bne.n	80040d6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80040ac:	f000 f952 	bl	8004354 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040be:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6999      	ldr	r1, [r3, #24]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	021a      	lsls	r2, r3, #8
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	619a      	str	r2, [r3, #24]
 80040d4:	e040      	b.n	8004158 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d11b      	bne.n	8004114 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80040ec:	f000 f96f 	bl	80043ce <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69da      	ldr	r2, [r3, #28]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 020c 	bic.w	r2, r2, #12
 80040fe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69d9      	ldr	r1, [r3, #28]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	61da      	str	r2, [r3, #28]
 8004112:	e021      	b.n	8004158 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b0c      	cmp	r3, #12
 8004118:	d11c      	bne.n	8004154 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800412a:	f000 f98c 	bl	8004446 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800413c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69d9      	ldr	r1, [r3, #28]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	021a      	lsls	r2, r3, #8
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	61da      	str	r2, [r3, #28]
 8004152:	e001      	b.n	8004158 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004160:	7dfb      	ldrb	r3, [r7, #23]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a3a      	ldr	r2, [pc, #232]	; (8004268 <TIM_Base_SetConfig+0xfc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00f      	beq.n	80041a4 <TIM_Base_SetConfig+0x38>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418a:	d00b      	beq.n	80041a4 <TIM_Base_SetConfig+0x38>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a37      	ldr	r2, [pc, #220]	; (800426c <TIM_Base_SetConfig+0x100>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d007      	beq.n	80041a4 <TIM_Base_SetConfig+0x38>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a36      	ldr	r2, [pc, #216]	; (8004270 <TIM_Base_SetConfig+0x104>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d003      	beq.n	80041a4 <TIM_Base_SetConfig+0x38>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a35      	ldr	r2, [pc, #212]	; (8004274 <TIM_Base_SetConfig+0x108>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d108      	bne.n	80041b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2b      	ldr	r2, [pc, #172]	; (8004268 <TIM_Base_SetConfig+0xfc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01b      	beq.n	80041f6 <TIM_Base_SetConfig+0x8a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c4:	d017      	beq.n	80041f6 <TIM_Base_SetConfig+0x8a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a28      	ldr	r2, [pc, #160]	; (800426c <TIM_Base_SetConfig+0x100>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d013      	beq.n	80041f6 <TIM_Base_SetConfig+0x8a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a27      	ldr	r2, [pc, #156]	; (8004270 <TIM_Base_SetConfig+0x104>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00f      	beq.n	80041f6 <TIM_Base_SetConfig+0x8a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a26      	ldr	r2, [pc, #152]	; (8004274 <TIM_Base_SetConfig+0x108>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00b      	beq.n	80041f6 <TIM_Base_SetConfig+0x8a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a25      	ldr	r2, [pc, #148]	; (8004278 <TIM_Base_SetConfig+0x10c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d007      	beq.n	80041f6 <TIM_Base_SetConfig+0x8a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a24      	ldr	r2, [pc, #144]	; (800427c <TIM_Base_SetConfig+0x110>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d003      	beq.n	80041f6 <TIM_Base_SetConfig+0x8a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a23      	ldr	r2, [pc, #140]	; (8004280 <TIM_Base_SetConfig+0x114>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d108      	bne.n	8004208 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a0e      	ldr	r2, [pc, #56]	; (8004268 <TIM_Base_SetConfig+0xfc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d103      	bne.n	800423c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b01      	cmp	r3, #1
 800424c:	d105      	bne.n	800425a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f023 0201 	bic.w	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	611a      	str	r2, [r3, #16]
  }
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40010000 	.word	0x40010000
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800
 8004274:	40000c00 	.word	0x40000c00
 8004278:	40014000 	.word	0x40014000
 800427c:	40014400 	.word	0x40014400
 8004280:	40014800 	.word	0x40014800

08004284 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	f023 0201 	bic.w	r2, r3, #1
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4a24      	ldr	r2, [pc, #144]	; (8004340 <TIM_TI1_SetConfig+0xbc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <TIM_TI1_SetConfig+0x56>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b8:	d00f      	beq.n	80042da <TIM_TI1_SetConfig+0x56>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4a21      	ldr	r2, [pc, #132]	; (8004344 <TIM_TI1_SetConfig+0xc0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00b      	beq.n	80042da <TIM_TI1_SetConfig+0x56>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4a20      	ldr	r2, [pc, #128]	; (8004348 <TIM_TI1_SetConfig+0xc4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d007      	beq.n	80042da <TIM_TI1_SetConfig+0x56>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a1f      	ldr	r2, [pc, #124]	; (800434c <TIM_TI1_SetConfig+0xc8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d003      	beq.n	80042da <TIM_TI1_SetConfig+0x56>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <TIM_TI1_SetConfig+0xcc>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d101      	bne.n	80042de <TIM_TI1_SetConfig+0x5a>
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <TIM_TI1_SetConfig+0x5c>
 80042de:	2300      	movs	r3, #0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f023 0303 	bic.w	r3, r3, #3
 80042ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	e003      	b.n	80042fe <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004304:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	b2db      	uxtb	r3, r3
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f023 030a 	bic.w	r3, r3, #10
 8004318:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f003 030a 	and.w	r3, r3, #10
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	621a      	str	r2, [r3, #32]
}
 8004332:	bf00      	nop
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40010000 	.word	0x40010000
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800
 800434c:	40000c00 	.word	0x40000c00
 8004350:	40014000 	.word	0x40014000

08004354 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	f023 0210 	bic.w	r2, r3, #16
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	021b      	lsls	r3, r3, #8
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	031b      	lsls	r3, r3, #12
 8004398:	b29b      	uxth	r3, r3
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043a6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	621a      	str	r2, [r3, #32]
}
 80043c2:	bf00      	nop
 80043c4:	371c      	adds	r7, #28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b087      	sub	sp, #28
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	607a      	str	r2, [r7, #4]
 80043da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f023 0303 	bic.w	r3, r3, #3
 80043fa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4313      	orrs	r3, r2
 8004402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800440a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	b2db      	uxtb	r3, r3
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800441e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	021b      	lsls	r3, r3, #8
 8004424:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	621a      	str	r2, [r3, #32]
}
 800443a:	bf00      	nop
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004446:	b480      	push	{r7}
 8004448:	b087      	sub	sp, #28
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
 8004452:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004472:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004484:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	031b      	lsls	r3, r3, #12
 800448a:	b29b      	uxth	r3, r3
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004498:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	031b      	lsls	r3, r3, #12
 800449e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	621a      	str	r2, [r3, #32]
}
 80044b4:	bf00      	nop
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e050      	b.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1c      	ldr	r2, [pc, #112]	; (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d018      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004524:	d013      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a18      	ldr	r2, [pc, #96]	; (800458c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00e      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a16      	ldr	r2, [pc, #88]	; (8004590 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d009      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a15      	ldr	r2, [pc, #84]	; (8004594 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d004      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a13      	ldr	r2, [pc, #76]	; (8004598 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d10c      	bne.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004554:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	4313      	orrs	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40010000 	.word	0x40010000
 800458c:	40000400 	.word	0x40000400
 8004590:	40000800 	.word	0x40000800
 8004594:	40000c00 	.word	0x40000c00
 8004598:	40014000 	.word	0x40014000

0800459c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e042      	b.n	8004634 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fd fb9c 	bl	8001d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2224      	movs	r2, #36	; 0x24
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f973 	bl	80048cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695a      	ldr	r2, [r3, #20]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004604:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004614:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	; 0x28
 8004640:	af02      	add	r7, sp, #8
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	603b      	str	r3, [r7, #0]
 8004648:	4613      	mov	r3, r2
 800464a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b20      	cmp	r3, #32
 800465a:	d175      	bne.n	8004748 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_UART_Transmit+0x2c>
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e06e      	b.n	800474a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2221      	movs	r2, #33	; 0x21
 8004676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800467a:	f7fd fd1b 	bl	80020b4 <HAL_GetTick>
 800467e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	88fa      	ldrh	r2, [r7, #6]
 8004684:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	88fa      	ldrh	r2, [r7, #6]
 800468a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004694:	d108      	bne.n	80046a8 <HAL_UART_Transmit+0x6c>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d104      	bne.n	80046a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	e003      	b.n	80046b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046b0:	e02e      	b.n	8004710 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2200      	movs	r2, #0
 80046ba:	2180      	movs	r1, #128	; 0x80
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f848 	bl	8004752 <UART_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e03a      	b.n	800474a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10b      	bne.n	80046f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	3302      	adds	r3, #2
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	e007      	b.n	8004702 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	781a      	ldrb	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	3301      	adds	r3, #1
 8004700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1cb      	bne.n	80046b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2200      	movs	r2, #0
 8004722:	2140      	movs	r1, #64	; 0x40
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f814 	bl	8004752 <UART_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e006      	b.n	800474a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	e000      	b.n	800474a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004748:	2302      	movs	r3, #2
  }
}
 800474a:	4618      	mov	r0, r3
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b086      	sub	sp, #24
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	603b      	str	r3, [r7, #0]
 800475e:	4613      	mov	r3, r2
 8004760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004762:	e03b      	b.n	80047dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476a:	d037      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476c:	f7fd fca2 	bl	80020b4 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	6a3a      	ldr	r2, [r7, #32]
 8004778:	429a      	cmp	r2, r3
 800477a:	d302      	bcc.n	8004782 <UART_WaitOnFlagUntilTimeout+0x30>
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e03a      	b.n	80047fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d023      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b80      	cmp	r3, #128	; 0x80
 8004798:	d020      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b40      	cmp	r3, #64	; 0x40
 800479e:	d01d      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d116      	bne.n	80047dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 f81d 	bl	8004804 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2208      	movs	r2, #8
 80047ce:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e00f      	b.n	80047fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4013      	ands	r3, r2
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d0b4      	beq.n	8004764 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004804:	b480      	push	{r7}
 8004806:	b095      	sub	sp, #84	; 0x54
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800481c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	330c      	adds	r3, #12
 800482a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800482c:	643a      	str	r2, [r7, #64]	; 0x40
 800482e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e5      	bne.n	800480c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3314      	adds	r3, #20
 8004846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f023 0301 	bic.w	r3, r3, #1
 8004856:	64bb      	str	r3, [r7, #72]	; 0x48
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3314      	adds	r3, #20
 800485e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004860:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004862:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004868:	e841 2300 	strex	r3, r2, [r1]
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e5      	bne.n	8004840 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	2b01      	cmp	r3, #1
 800487a:	d119      	bne.n	80048b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	60bb      	str	r3, [r7, #8]
   return(result);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f023 0310 	bic.w	r3, r3, #16
 8004892:	647b      	str	r3, [r7, #68]	; 0x44
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	330c      	adds	r3, #12
 800489a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800489c:	61ba      	str	r2, [r7, #24]
 800489e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	6979      	ldr	r1, [r7, #20]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	613b      	str	r3, [r7, #16]
   return(result);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e5      	bne.n	800487c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048be:	bf00      	nop
 80048c0:	3754      	adds	r7, #84	; 0x54
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
	...

080048cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d0:	b0c0      	sub	sp, #256	; 0x100
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e8:	68d9      	ldr	r1, [r3, #12]
 80048ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	ea40 0301 	orr.w	r3, r0, r1
 80048f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	431a      	orrs	r2, r3
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	431a      	orrs	r2, r3
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004924:	f021 010c 	bic.w	r1, r1, #12
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004932:	430b      	orrs	r3, r1
 8004934:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004946:	6999      	ldr	r1, [r3, #24]
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	ea40 0301 	orr.w	r3, r0, r1
 8004952:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4b8f      	ldr	r3, [pc, #572]	; (8004b98 <UART_SetConfig+0x2cc>)
 800495c:	429a      	cmp	r2, r3
 800495e:	d005      	beq.n	800496c <UART_SetConfig+0xa0>
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b8d      	ldr	r3, [pc, #564]	; (8004b9c <UART_SetConfig+0x2d0>)
 8004968:	429a      	cmp	r2, r3
 800496a:	d104      	bne.n	8004976 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800496c:	f7ff fafe 	bl	8003f6c <HAL_RCC_GetPCLK2Freq>
 8004970:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004974:	e003      	b.n	800497e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004976:	f7ff fae5 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 800497a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800497e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004988:	f040 810c 	bne.w	8004ba4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800498c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004990:	2200      	movs	r2, #0
 8004992:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004996:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800499a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800499e:	4622      	mov	r2, r4
 80049a0:	462b      	mov	r3, r5
 80049a2:	1891      	adds	r1, r2, r2
 80049a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80049a6:	415b      	adcs	r3, r3
 80049a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049ae:	4621      	mov	r1, r4
 80049b0:	eb12 0801 	adds.w	r8, r2, r1
 80049b4:	4629      	mov	r1, r5
 80049b6:	eb43 0901 	adc.w	r9, r3, r1
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ce:	4690      	mov	r8, r2
 80049d0:	4699      	mov	r9, r3
 80049d2:	4623      	mov	r3, r4
 80049d4:	eb18 0303 	adds.w	r3, r8, r3
 80049d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049dc:	462b      	mov	r3, r5
 80049de:	eb49 0303 	adc.w	r3, r9, r3
 80049e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049fa:	460b      	mov	r3, r1
 80049fc:	18db      	adds	r3, r3, r3
 80049fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004a00:	4613      	mov	r3, r2
 8004a02:	eb42 0303 	adc.w	r3, r2, r3
 8004a06:	657b      	str	r3, [r7, #84]	; 0x54
 8004a08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a10:	f7fc f922 	bl	8000c58 <__aeabi_uldivmod>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4b61      	ldr	r3, [pc, #388]	; (8004ba0 <UART_SetConfig+0x2d4>)
 8004a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	011c      	lsls	r4, r3, #4
 8004a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a34:	4642      	mov	r2, r8
 8004a36:	464b      	mov	r3, r9
 8004a38:	1891      	adds	r1, r2, r2
 8004a3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a3c:	415b      	adcs	r3, r3
 8004a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a44:	4641      	mov	r1, r8
 8004a46:	eb12 0a01 	adds.w	sl, r2, r1
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a64:	4692      	mov	sl, r2
 8004a66:	469b      	mov	fp, r3
 8004a68:	4643      	mov	r3, r8
 8004a6a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a72:	464b      	mov	r3, r9
 8004a74:	eb4b 0303 	adc.w	r3, fp, r3
 8004a78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a90:	460b      	mov	r3, r1
 8004a92:	18db      	adds	r3, r3, r3
 8004a94:	643b      	str	r3, [r7, #64]	; 0x40
 8004a96:	4613      	mov	r3, r2
 8004a98:	eb42 0303 	adc.w	r3, r2, r3
 8004a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004aa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004aa6:	f7fc f8d7 	bl	8000c58 <__aeabi_uldivmod>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4b3b      	ldr	r3, [pc, #236]	; (8004ba0 <UART_SetConfig+0x2d4>)
 8004ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	2264      	movs	r2, #100	; 0x64
 8004aba:	fb02 f303 	mul.w	r3, r2, r3
 8004abe:	1acb      	subs	r3, r1, r3
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ac6:	4b36      	ldr	r3, [pc, #216]	; (8004ba0 <UART_SetConfig+0x2d4>)
 8004ac8:	fba3 2302 	umull	r2, r3, r3, r2
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ad4:	441c      	add	r4, r3
 8004ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ae0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ae4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ae8:	4642      	mov	r2, r8
 8004aea:	464b      	mov	r3, r9
 8004aec:	1891      	adds	r1, r2, r2
 8004aee:	63b9      	str	r1, [r7, #56]	; 0x38
 8004af0:	415b      	adcs	r3, r3
 8004af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004af4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004af8:	4641      	mov	r1, r8
 8004afa:	1851      	adds	r1, r2, r1
 8004afc:	6339      	str	r1, [r7, #48]	; 0x30
 8004afe:	4649      	mov	r1, r9
 8004b00:	414b      	adcs	r3, r1
 8004b02:	637b      	str	r3, [r7, #52]	; 0x34
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b10:	4659      	mov	r1, fp
 8004b12:	00cb      	lsls	r3, r1, #3
 8004b14:	4651      	mov	r1, sl
 8004b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b1a:	4651      	mov	r1, sl
 8004b1c:	00ca      	lsls	r2, r1, #3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	4619      	mov	r1, r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	4642      	mov	r2, r8
 8004b26:	189b      	adds	r3, r3, r2
 8004b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b2c:	464b      	mov	r3, r9
 8004b2e:	460a      	mov	r2, r1
 8004b30:	eb42 0303 	adc.w	r3, r2, r3
 8004b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	18db      	adds	r3, r3, r3
 8004b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b52:	4613      	mov	r3, r2
 8004b54:	eb42 0303 	adc.w	r3, r2, r3
 8004b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b62:	f7fc f879 	bl	8000c58 <__aeabi_uldivmod>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <UART_SetConfig+0x2d4>)
 8004b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	2164      	movs	r1, #100	; 0x64
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	3332      	adds	r3, #50	; 0x32
 8004b7e:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <UART_SetConfig+0x2d4>)
 8004b80:	fba2 2303 	umull	r2, r3, r2, r3
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	f003 0207 	and.w	r2, r3, #7
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4422      	add	r2, r4
 8004b92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b94:	e106      	b.n	8004da4 <UART_SetConfig+0x4d8>
 8004b96:	bf00      	nop
 8004b98:	40011000 	.word	0x40011000
 8004b9c:	40011400 	.word	0x40011400
 8004ba0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bb6:	4642      	mov	r2, r8
 8004bb8:	464b      	mov	r3, r9
 8004bba:	1891      	adds	r1, r2, r2
 8004bbc:	6239      	str	r1, [r7, #32]
 8004bbe:	415b      	adcs	r3, r3
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bc6:	4641      	mov	r1, r8
 8004bc8:	1854      	adds	r4, r2, r1
 8004bca:	4649      	mov	r1, r9
 8004bcc:	eb43 0501 	adc.w	r5, r3, r1
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	00eb      	lsls	r3, r5, #3
 8004bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bde:	00e2      	lsls	r2, r4, #3
 8004be0:	4614      	mov	r4, r2
 8004be2:	461d      	mov	r5, r3
 8004be4:	4643      	mov	r3, r8
 8004be6:	18e3      	adds	r3, r4, r3
 8004be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bec:	464b      	mov	r3, r9
 8004bee:	eb45 0303 	adc.w	r3, r5, r3
 8004bf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c12:	4629      	mov	r1, r5
 8004c14:	008b      	lsls	r3, r1, #2
 8004c16:	4621      	mov	r1, r4
 8004c18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	008a      	lsls	r2, r1, #2
 8004c20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c24:	f7fc f818 	bl	8000c58 <__aeabi_uldivmod>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4b60      	ldr	r3, [pc, #384]	; (8004db0 <UART_SetConfig+0x4e4>)
 8004c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c32:	095b      	lsrs	r3, r3, #5
 8004c34:	011c      	lsls	r4, r3, #4
 8004c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c48:	4642      	mov	r2, r8
 8004c4a:	464b      	mov	r3, r9
 8004c4c:	1891      	adds	r1, r2, r2
 8004c4e:	61b9      	str	r1, [r7, #24]
 8004c50:	415b      	adcs	r3, r3
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c58:	4641      	mov	r1, r8
 8004c5a:	1851      	adds	r1, r2, r1
 8004c5c:	6139      	str	r1, [r7, #16]
 8004c5e:	4649      	mov	r1, r9
 8004c60:	414b      	adcs	r3, r1
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c70:	4659      	mov	r1, fp
 8004c72:	00cb      	lsls	r3, r1, #3
 8004c74:	4651      	mov	r1, sl
 8004c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c7a:	4651      	mov	r1, sl
 8004c7c:	00ca      	lsls	r2, r1, #3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	4619      	mov	r1, r3
 8004c82:	4603      	mov	r3, r0
 8004c84:	4642      	mov	r2, r8
 8004c86:	189b      	adds	r3, r3, r2
 8004c88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c8c:	464b      	mov	r3, r9
 8004c8e:	460a      	mov	r2, r1
 8004c90:	eb42 0303 	adc.w	r3, r2, r3
 8004c94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ca2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cb0:	4649      	mov	r1, r9
 8004cb2:	008b      	lsls	r3, r1, #2
 8004cb4:	4641      	mov	r1, r8
 8004cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cba:	4641      	mov	r1, r8
 8004cbc:	008a      	lsls	r2, r1, #2
 8004cbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cc2:	f7fb ffc9 	bl	8000c58 <__aeabi_uldivmod>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4611      	mov	r1, r2
 8004ccc:	4b38      	ldr	r3, [pc, #224]	; (8004db0 <UART_SetConfig+0x4e4>)
 8004cce:	fba3 2301 	umull	r2, r3, r3, r1
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	2264      	movs	r2, #100	; 0x64
 8004cd6:	fb02 f303 	mul.w	r3, r2, r3
 8004cda:	1acb      	subs	r3, r1, r3
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	3332      	adds	r3, #50	; 0x32
 8004ce0:	4a33      	ldr	r2, [pc, #204]	; (8004db0 <UART_SetConfig+0x4e4>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cec:	441c      	add	r4, r3
 8004cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	673b      	str	r3, [r7, #112]	; 0x70
 8004cf6:	677a      	str	r2, [r7, #116]	; 0x74
 8004cf8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004cfc:	4642      	mov	r2, r8
 8004cfe:	464b      	mov	r3, r9
 8004d00:	1891      	adds	r1, r2, r2
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	415b      	adcs	r3, r3
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	1851      	adds	r1, r2, r1
 8004d10:	6039      	str	r1, [r7, #0]
 8004d12:	4649      	mov	r1, r9
 8004d14:	414b      	adcs	r3, r1
 8004d16:	607b      	str	r3, [r7, #4]
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d24:	4659      	mov	r1, fp
 8004d26:	00cb      	lsls	r3, r1, #3
 8004d28:	4651      	mov	r1, sl
 8004d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d2e:	4651      	mov	r1, sl
 8004d30:	00ca      	lsls	r2, r1, #3
 8004d32:	4610      	mov	r0, r2
 8004d34:	4619      	mov	r1, r3
 8004d36:	4603      	mov	r3, r0
 8004d38:	4642      	mov	r2, r8
 8004d3a:	189b      	adds	r3, r3, r2
 8004d3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d3e:	464b      	mov	r3, r9
 8004d40:	460a      	mov	r2, r1
 8004d42:	eb42 0303 	adc.w	r3, r2, r3
 8004d46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	663b      	str	r3, [r7, #96]	; 0x60
 8004d52:	667a      	str	r2, [r7, #100]	; 0x64
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d60:	4649      	mov	r1, r9
 8004d62:	008b      	lsls	r3, r1, #2
 8004d64:	4641      	mov	r1, r8
 8004d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d6a:	4641      	mov	r1, r8
 8004d6c:	008a      	lsls	r2, r1, #2
 8004d6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d72:	f7fb ff71 	bl	8000c58 <__aeabi_uldivmod>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <UART_SetConfig+0x4e4>)
 8004d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	2164      	movs	r1, #100	; 0x64
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	3332      	adds	r3, #50	; 0x32
 8004d8e:	4a08      	ldr	r2, [pc, #32]	; (8004db0 <UART_SetConfig+0x4e4>)
 8004d90:	fba2 2303 	umull	r2, r3, r2, r3
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	f003 020f 	and.w	r2, r3, #15
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4422      	add	r2, r4
 8004da2:	609a      	str	r2, [r3, #8]
}
 8004da4:	bf00      	nop
 8004da6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004daa:	46bd      	mov	sp, r7
 8004dac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004db0:	51eb851f 	.word	0x51eb851f

08004db4 <neai_classification_init>:
 8004db4:	edd0 7a01 	vldr	s15, [r0, #4]
 8004db8:	ed90 7a00 	vldr	s14, [r0]
 8004dbc:	4956      	ldr	r1, [pc, #344]	; (8004f18 <neai_classification_init+0x164>)
 8004dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc2:	b430      	push	{r4, r5}
 8004dc4:	ee17 2a90 	vmov	r2, s15
 8004dc8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004dcc:	4c53      	ldr	r4, [pc, #332]	; (8004f1c <neai_classification_init+0x168>)
 8004dce:	4d54      	ldr	r5, [pc, #336]	; (8004f20 <neai_classification_init+0x16c>)
 8004dd0:	6022      	str	r2, [r4, #0]
 8004dd2:	ee17 3a90 	vmov	r3, s15
 8004dd6:	f100 0408 	add.w	r4, r0, #8
 8004dda:	f102 0c02 	add.w	ip, r2, #2
 8004dde:	600c      	str	r4, [r1, #0]
 8004de0:	441a      	add	r2, r3
 8004de2:	eb00 048c 	add.w	r4, r0, ip, lsl #2
 8004de6:	602c      	str	r4, [r5, #0]
 8004de8:	3202      	adds	r2, #2
 8004dea:	4c4e      	ldr	r4, [pc, #312]	; (8004f24 <neai_classification_init+0x170>)
 8004dec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004df0:	eb0c 0143 	add.w	r1, ip, r3, lsl #1
 8004df4:	6022      	str	r2, [r4, #0]
 8004df6:	185a      	adds	r2, r3, r1
 8004df8:	4413      	add	r3, r2
 8004dfa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004dfe:	ed93 7a00 	vldr	s14, [r3]
 8004e02:	4c49      	ldr	r4, [pc, #292]	; (8004f28 <neai_classification_init+0x174>)
 8004e04:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8004e08:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8004e0c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004e10:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8004e14:	4a45      	ldr	r2, [pc, #276]	; (8004f2c <neai_classification_init+0x178>)
 8004e16:	6025      	str	r5, [r4, #0]
 8004e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e1c:	6010      	str	r0, [r2, #0]
 8004e1e:	d175      	bne.n	8004f0c <neai_classification_init+0x158>
 8004e20:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004e28:	eeb4 7a67 	vcmp.f32	s14, s15
 8004e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e30:	d16c      	bne.n	8004f0c <neai_classification_init+0x158>
 8004e32:	edd3 6a02 	vldr	s13, [r3, #8]
 8004e36:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004e3a:	eef4 6a47 	vcmp.f32	s13, s14
 8004e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e42:	d163      	bne.n	8004f0c <neai_classification_init+0x158>
 8004e44:	ed93 7a03 	vldr	s14, [r3, #12]
 8004e48:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e50:	d15c      	bne.n	8004f0c <neai_classification_init+0x158>
 8004e52:	ed93 7a04 	vldr	s14, [r3, #16]
 8004e56:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5e:	d155      	bne.n	8004f0c <neai_classification_init+0x158>
 8004e60:	ed93 7a05 	vldr	s14, [r3, #20]
 8004e64:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e6c:	d14e      	bne.n	8004f0c <neai_classification_init+0x158>
 8004e6e:	ed93 7a06 	vldr	s14, [r3, #24]
 8004e72:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7a:	d147      	bne.n	8004f0c <neai_classification_init+0x158>
 8004e7c:	ed93 7a07 	vldr	s14, [r3, #28]
 8004e80:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e88:	d140      	bne.n	8004f0c <neai_classification_init+0x158>
 8004e8a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004f30 <neai_classification_init+0x17c>
 8004e8e:	edd3 6a08 	vldr	s13, [r3, #32]
 8004e92:	eef4 6a47 	vcmp.f32	s13, s14
 8004e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e9a:	d137      	bne.n	8004f0c <neai_classification_init+0x158>
 8004e9c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004ea0:	eeb4 7a67 	vcmp.f32	s14, s15
 8004ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea8:	d130      	bne.n	8004f0c <neai_classification_init+0x158>
 8004eaa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004eae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb6:	d129      	bne.n	8004f0c <neai_classification_init+0x158>
 8004eb8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004ebc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8004ec0:	eeb4 7a67 	vcmp.f32	s14, s15
 8004ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec8:	d120      	bne.n	8004f0c <neai_classification_init+0x158>
 8004eca:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004ece:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed6:	d119      	bne.n	8004f0c <neai_classification_init+0x158>
 8004ed8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004edc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee4:	d112      	bne.n	8004f0c <neai_classification_init+0x158>
 8004ee6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004eea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef2:	d10b      	bne.n	8004f0c <neai_classification_init+0x158>
 8004ef4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8004f34 <neai_classification_init+0x180>
 8004ef8:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8004efc:	eeb4 7a67 	vcmp.f32	s14, s15
 8004f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f04:	bf14      	ite	ne
 8004f06:	207d      	movne	r0, #125	; 0x7d
 8004f08:	2000      	moveq	r0, #0
 8004f0a:	e000      	b.n	8004f0e <neai_classification_init+0x15a>
 8004f0c:	207d      	movs	r0, #125	; 0x7d
 8004f0e:	4b0a      	ldr	r3, [pc, #40]	; (8004f38 <neai_classification_init+0x184>)
 8004f10:	7018      	strb	r0, [r3, #0]
 8004f12:	bc30      	pop	{r4, r5}
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	200003d4 	.word	0x200003d4
 8004f1c:	200003d8 	.word	0x200003d8
 8004f20:	200003d0 	.word	0x200003d0
 8004f24:	200003cc 	.word	0x200003cc
 8004f28:	200003c8 	.word	0x200003c8
 8004f2c:	200003c4 	.word	0x200003c4
 8004f30:	42c80000 	.word	0x42c80000
 8004f34:	49742400 	.word	0x49742400
 8004f38:	20000035 	.word	0x20000035

08004f3c <neai_classification>:
 8004f3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f40:	ed2d 8b04 	vpush	{d8-d9}
 8004f44:	4bc2      	ldr	r3, [pc, #776]	; (8005250 <neai_classification+0x314>)
 8004f46:	781f      	ldrb	r7, [r3, #0]
 8004f48:	b127      	cbz	r7, 8004f54 <neai_classification+0x18>
 8004f4a:	ecbd 8b04 	vpop	{d8-d9}
 8004f4e:	4638      	mov	r0, r7
 8004f50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f54:	4cbf      	ldr	r4, [pc, #764]	; (8005254 <neai_classification+0x318>)
 8004f56:	6803      	ldr	r3, [r0, #0]
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	6843      	ldr	r3, [r0, #4]
 8004f5c:	6063      	str	r3, [r4, #4]
 8004f5e:	460d      	mov	r5, r1
 8004f60:	6883      	ldr	r3, [r0, #8]
 8004f62:	60a3      	str	r3, [r4, #8]
 8004f64:	4616      	mov	r6, r2
 8004f66:	68c3      	ldr	r3, [r0, #12]
 8004f68:	60e3      	str	r3, [r4, #12]
 8004f6a:	2228      	movs	r2, #40	; 0x28
 8004f6c:	4639      	mov	r1, r7
 8004f6e:	4628      	mov	r0, r5
 8004f70:	f000 fff6 	bl	8005f60 <memset>
 8004f74:	4bb8      	ldr	r3, [pc, #736]	; (8005258 <neai_classification+0x31c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d05e      	beq.n	800503a <neai_classification+0xfe>
 8004f7c:	ee07 3a90 	vmov	s15, r3
 8004f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f88:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004f8c:	4ab3      	ldr	r2, [pc, #716]	; (800525c <neai_classification+0x320>)
 8004f8e:	f8d2 9000 	ldr.w	r9, [r2]
 8004f92:	eb09 0a83 	add.w	sl, r9, r3, lsl #2
 8004f96:	4bb2      	ldr	r3, [pc, #712]	; (8005260 <neai_classification+0x324>)
 8004f98:	f8d3 8000 	ldr.w	r8, [r3]
 8004f9c:	4bb1      	ldr	r3, [pc, #708]	; (8005264 <neai_classification+0x328>)
 8004f9e:	f8d3 e000 	ldr.w	lr, [r3]
 8004fa2:	4bb1      	ldr	r3, [pc, #708]	; (8005268 <neai_classification+0x32c>)
 8004fa4:	6819      	ldr	r1, [r3, #0]
 8004fa6:	4bb1      	ldr	r3, [pc, #708]	; (800526c <neai_classification+0x330>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	f06f 4b40 	mvn.w	fp, #3221225472	; 0xc0000000
 8004fae:	ecf9 7a01 	vldmia	r9!, {s15}
 8004fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb6:	ee17 ca90 	vmov	ip, s15
 8004fba:	4663      	mov	r3, ip
 8004fbc:	e00b      	b.n	8004fd6 <neai_classification+0x9a>
 8004fbe:	edd0 7a00 	vldr	s15, [r0]
 8004fc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fca:	d424      	bmi.n	8005016 <neai_classification+0xda>
 8004fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fd0:	ee17 3a90 	vmov	r3, s15
 8004fd4:	4463      	add	r3, ip
 8004fd6:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 8004fda:	edd0 7a00 	vldr	s15, [r0]
 8004fde:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8004fe2:	eb0e 0083 	add.w	r0, lr, r3, lsl #2
 8004fe6:	edd0 7a00 	vldr	s15, [r0]
 8004fea:	ee17 0a10 	vmov	r0, s14
 8004fee:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004ff2:	ed90 7a00 	vldr	s14, [r0]
 8004ff6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005000:	eb02 0003 	add.w	r0, r2, r3
 8005004:	440b      	add	r3, r1
 8005006:	d4da      	bmi.n	8004fbe <neai_classification+0x82>
 8005008:	edd3 7a00 	vldr	s15, [r3]
 800500c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005014:	d5da      	bpl.n	8004fcc <neai_classification+0x90>
 8005016:	eef1 7a67 	vneg.f32	s15, s15
 800501a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800501e:	45d1      	cmp	r9, sl
 8005020:	ee17 3a90 	vmov	r3, s15
 8005024:	b29b      	uxth	r3, r3
 8005026:	445b      	add	r3, fp
 8005028:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800502c:	edd3 7a00 	vldr	s15, [r3]
 8005030:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005034:	edc3 7a00 	vstr	s15, [r3]
 8005038:	d1b9      	bne.n	8004fae <neai_classification+0x72>
 800503a:	edd5 6a00 	vldr	s13, [r5]
 800503e:	ed95 7a01 	vldr	s14, [r5, #4]
 8005042:	edd5 7a02 	vldr	s15, [r5, #8]
 8005046:	edd5 8a09 	vldr	s17, [r5, #36]	; 0x24
 800504a:	ed9f 8a89 	vldr	s16, [pc, #548]	; 8005270 <neai_classification+0x334>
 800504e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005056:	bf58      	it	pl
 8005058:	eeb0 7a66 	vmovpl.f32	s14, s13
 800505c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005064:	edd5 6a03 	vldr	s13, [r5, #12]
 8005068:	bf58      	it	pl
 800506a:	eef0 7a47 	vmovpl.f32	s15, s14
 800506e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005076:	ed95 7a04 	vldr	s14, [r5, #16]
 800507a:	bf58      	it	pl
 800507c:	eef0 6a67 	vmovpl.f32	s13, s15
 8005080:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005088:	edd5 7a05 	vldr	s15, [r5, #20]
 800508c:	bf58      	it	pl
 800508e:	eeb0 7a66 	vmovpl.f32	s14, s13
 8005092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509a:	edd5 6a06 	vldr	s13, [r5, #24]
 800509e:	bf58      	it	pl
 80050a0:	eef0 7a47 	vmovpl.f32	s15, s14
 80050a4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80050a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ac:	ed95 7a07 	vldr	s14, [r5, #28]
 80050b0:	bf58      	it	pl
 80050b2:	eef0 6a67 	vmovpl.f32	s13, s15
 80050b6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80050ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050be:	edd5 7a08 	vldr	s15, [r5, #32]
 80050c2:	bf58      	it	pl
 80050c4:	eeb0 7a66 	vmovpl.f32	s14, s13
 80050c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d0:	bf58      	it	pl
 80050d2:	eef0 7a47 	vmovpl.f32	s15, s14
 80050d6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80050da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050de:	bfd8      	it	le
 80050e0:	eef0 8a67 	vmovle.f32	s17, s15
 80050e4:	462c      	mov	r4, r5
 80050e6:	f105 0828 	add.w	r8, r5, #40	; 0x28
 80050ea:	eeb2 9a00 	vmov.f32	s18, #32	; 0x41000000  8.0
 80050ee:	edd4 7a00 	vldr	s15, [r4]
 80050f2:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80050f6:	ee67 7a89 	vmul.f32	s15, s15, s18
 80050fa:	ee17 0a90 	vmov	r0, s15
 80050fe:	f7fb fa2b 	bl	8000558 <__aeabi_f2d>
 8005102:	ec41 0b10 	vmov	d0, r0, r1
 8005106:	f002 fe1b 	bl	8007d40 <exp>
 800510a:	ec51 0b10 	vmov	r0, r1, d0
 800510e:	f7fb fd53 	bl	8000bb8 <__aeabi_d2f>
 8005112:	f844 0b04 	str.w	r0, [r4], #4
 8005116:	ee07 0a90 	vmov	s15, r0
 800511a:	4544      	cmp	r4, r8
 800511c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8005120:	d1e5      	bne.n	80050ee <neai_classification+0x1b2>
 8005122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005126:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800512a:	ecbd 8b04 	vpop	{d8-d9}
 800512e:	4638      	mov	r0, r7
 8005130:	ed95 3a00 	vldr	s6, [r5]
 8005134:	ed95 4a01 	vldr	s8, [r5, #4]
 8005138:	edd5 4a02 	vldr	s9, [r5, #8]
 800513c:	ed95 5a03 	vldr	s10, [r5, #12]
 8005140:	edd5 5a04 	vldr	s11, [r5, #16]
 8005144:	ed95 6a05 	vldr	s12, [r5, #20]
 8005148:	edd5 6a06 	vldr	s13, [r5, #24]
 800514c:	ed95 7a07 	vldr	s14, [r5, #28]
 8005150:	edd5 3a08 	vldr	s7, [r5, #32]
 8005154:	edd5 2a09 	vldr	s5, [r5, #36]	; 0x24
 8005158:	ee27 4a84 	vmul.f32	s8, s15, s8
 800515c:	ee27 3a83 	vmul.f32	s6, s15, s6
 8005160:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8005164:	eeb4 4ac3 	vcmpe.f32	s8, s6
 8005168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516c:	ed85 4a01 	vstr	s8, [r5, #4]
 8005170:	bfd8      	it	le
 8005172:	eeb0 4a43 	vmovle.f32	s8, s6
 8005176:	eef4 4ac4 	vcmpe.f32	s9, s8
 800517a:	bfc8      	it	gt
 800517c:	2301      	movgt	r3, #1
 800517e:	ee27 5a85 	vmul.f32	s10, s15, s10
 8005182:	bfd8      	it	le
 8005184:	2300      	movle	r3, #0
 8005186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518a:	edc5 4a02 	vstr	s9, [r5, #8]
 800518e:	bfd8      	it	le
 8005190:	eef0 4a44 	vmovle.f32	s9, s8
 8005194:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8005198:	bfc8      	it	gt
 800519a:	2302      	movgt	r3, #2
 800519c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80051a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a4:	ed85 5a03 	vstr	s10, [r5, #12]
 80051a8:	bfd8      	it	le
 80051aa:	eeb0 5a64 	vmovle.f32	s10, s9
 80051ae:	eef4 5ac5 	vcmpe.f32	s11, s10
 80051b2:	bfc8      	it	gt
 80051b4:	2303      	movgt	r3, #3
 80051b6:	ee27 6a86 	vmul.f32	s12, s15, s12
 80051ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051be:	edc5 5a04 	vstr	s11, [r5, #16]
 80051c2:	bfd8      	it	le
 80051c4:	eef0 5a45 	vmovle.f32	s11, s10
 80051c8:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80051cc:	bfc8      	it	gt
 80051ce:	2304      	movgt	r3, #4
 80051d0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80051d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d8:	ed85 6a05 	vstr	s12, [r5, #20]
 80051dc:	bfd8      	it	le
 80051de:	eeb0 6a65 	vmovle.f32	s12, s11
 80051e2:	eef4 6ac6 	vcmpe.f32	s13, s12
 80051e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80051ea:	bfc8      	it	gt
 80051ec:	2305      	movgt	r3, #5
 80051ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f2:	edc5 6a06 	vstr	s13, [r5, #24]
 80051f6:	bfd8      	it	le
 80051f8:	eef0 6a46 	vmovle.f32	s13, s12
 80051fc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005200:	ee67 3aa3 	vmul.f32	s7, s15, s7
 8005204:	bfc8      	it	gt
 8005206:	2306      	movgt	r3, #6
 8005208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520c:	ed85 7a07 	vstr	s14, [r5, #28]
 8005210:	bf58      	it	pl
 8005212:	eeb0 7a66 	vmovpl.f32	s14, s13
 8005216:	eeb4 7ae3 	vcmpe.f32	s14, s7
 800521a:	bf48      	it	mi
 800521c:	2307      	movmi	r3, #7
 800521e:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8005222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005226:	edc5 3a08 	vstr	s7, [r5, #32]
 800522a:	bf58      	it	pl
 800522c:	eef0 3a47 	vmovpl.f32	s7, s14
 8005230:	eef4 3a67 	vcmp.f32	s7, s15
 8005234:	bf48      	it	mi
 8005236:	2308      	movmi	r3, #8
 8005238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523c:	bf48      	it	mi
 800523e:	2309      	movmi	r3, #9
 8005240:	3301      	adds	r3, #1
 8005242:	ed85 3a00 	vstr	s6, [r5]
 8005246:	edc5 7a09 	vstr	s15, [r5, #36]	; 0x24
 800524a:	8033      	strh	r3, [r6, #0]
 800524c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005250:	20000035 	.word	0x20000035
 8005254:	200003dc 	.word	0x200003dc
 8005258:	200003d8 	.word	0x200003d8
 800525c:	200003d4 	.word	0x200003d4
 8005260:	200003d0 	.word	0x200003d0
 8005264:	200003c4 	.word	0x200003c4
 8005268:	200003c8 	.word	0x200003c8
 800526c:	200003cc 	.word	0x200003cc
 8005270:	00000000 	.word	0x00000000

08005274 <__cvt>:
 8005274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005278:	ec55 4b10 	vmov	r4, r5, d0
 800527c:	2d00      	cmp	r5, #0
 800527e:	460e      	mov	r6, r1
 8005280:	4619      	mov	r1, r3
 8005282:	462b      	mov	r3, r5
 8005284:	bfbb      	ittet	lt
 8005286:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800528a:	461d      	movlt	r5, r3
 800528c:	2300      	movge	r3, #0
 800528e:	232d      	movlt	r3, #45	; 0x2d
 8005290:	700b      	strb	r3, [r1, #0]
 8005292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005294:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005298:	4691      	mov	r9, r2
 800529a:	f023 0820 	bic.w	r8, r3, #32
 800529e:	bfbc      	itt	lt
 80052a0:	4622      	movlt	r2, r4
 80052a2:	4614      	movlt	r4, r2
 80052a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052a8:	d005      	beq.n	80052b6 <__cvt+0x42>
 80052aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80052ae:	d100      	bne.n	80052b2 <__cvt+0x3e>
 80052b0:	3601      	adds	r6, #1
 80052b2:	2102      	movs	r1, #2
 80052b4:	e000      	b.n	80052b8 <__cvt+0x44>
 80052b6:	2103      	movs	r1, #3
 80052b8:	ab03      	add	r3, sp, #12
 80052ba:	9301      	str	r3, [sp, #4]
 80052bc:	ab02      	add	r3, sp, #8
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	ec45 4b10 	vmov	d0, r4, r5
 80052c4:	4653      	mov	r3, sl
 80052c6:	4632      	mov	r2, r6
 80052c8:	f000 ff52 	bl	8006170 <_dtoa_r>
 80052cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052d0:	4607      	mov	r7, r0
 80052d2:	d102      	bne.n	80052da <__cvt+0x66>
 80052d4:	f019 0f01 	tst.w	r9, #1
 80052d8:	d022      	beq.n	8005320 <__cvt+0xac>
 80052da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052de:	eb07 0906 	add.w	r9, r7, r6
 80052e2:	d110      	bne.n	8005306 <__cvt+0x92>
 80052e4:	783b      	ldrb	r3, [r7, #0]
 80052e6:	2b30      	cmp	r3, #48	; 0x30
 80052e8:	d10a      	bne.n	8005300 <__cvt+0x8c>
 80052ea:	2200      	movs	r2, #0
 80052ec:	2300      	movs	r3, #0
 80052ee:	4620      	mov	r0, r4
 80052f0:	4629      	mov	r1, r5
 80052f2:	f7fb fbf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80052f6:	b918      	cbnz	r0, 8005300 <__cvt+0x8c>
 80052f8:	f1c6 0601 	rsb	r6, r6, #1
 80052fc:	f8ca 6000 	str.w	r6, [sl]
 8005300:	f8da 3000 	ldr.w	r3, [sl]
 8005304:	4499      	add	r9, r3
 8005306:	2200      	movs	r2, #0
 8005308:	2300      	movs	r3, #0
 800530a:	4620      	mov	r0, r4
 800530c:	4629      	mov	r1, r5
 800530e:	f7fb fbe3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005312:	b108      	cbz	r0, 8005318 <__cvt+0xa4>
 8005314:	f8cd 900c 	str.w	r9, [sp, #12]
 8005318:	2230      	movs	r2, #48	; 0x30
 800531a:	9b03      	ldr	r3, [sp, #12]
 800531c:	454b      	cmp	r3, r9
 800531e:	d307      	bcc.n	8005330 <__cvt+0xbc>
 8005320:	9b03      	ldr	r3, [sp, #12]
 8005322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005324:	1bdb      	subs	r3, r3, r7
 8005326:	4638      	mov	r0, r7
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	b004      	add	sp, #16
 800532c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005330:	1c59      	adds	r1, r3, #1
 8005332:	9103      	str	r1, [sp, #12]
 8005334:	701a      	strb	r2, [r3, #0]
 8005336:	e7f0      	b.n	800531a <__cvt+0xa6>

08005338 <__exponent>:
 8005338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800533a:	4603      	mov	r3, r0
 800533c:	2900      	cmp	r1, #0
 800533e:	bfb8      	it	lt
 8005340:	4249      	neglt	r1, r1
 8005342:	f803 2b02 	strb.w	r2, [r3], #2
 8005346:	bfb4      	ite	lt
 8005348:	222d      	movlt	r2, #45	; 0x2d
 800534a:	222b      	movge	r2, #43	; 0x2b
 800534c:	2909      	cmp	r1, #9
 800534e:	7042      	strb	r2, [r0, #1]
 8005350:	dd2a      	ble.n	80053a8 <__exponent+0x70>
 8005352:	f10d 0207 	add.w	r2, sp, #7
 8005356:	4617      	mov	r7, r2
 8005358:	260a      	movs	r6, #10
 800535a:	4694      	mov	ip, r2
 800535c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005360:	fb06 1415 	mls	r4, r6, r5, r1
 8005364:	3430      	adds	r4, #48	; 0x30
 8005366:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800536a:	460c      	mov	r4, r1
 800536c:	2c63      	cmp	r4, #99	; 0x63
 800536e:	f102 32ff 	add.w	r2, r2, #4294967295
 8005372:	4629      	mov	r1, r5
 8005374:	dcf1      	bgt.n	800535a <__exponent+0x22>
 8005376:	3130      	adds	r1, #48	; 0x30
 8005378:	f1ac 0402 	sub.w	r4, ip, #2
 800537c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005380:	1c41      	adds	r1, r0, #1
 8005382:	4622      	mov	r2, r4
 8005384:	42ba      	cmp	r2, r7
 8005386:	d30a      	bcc.n	800539e <__exponent+0x66>
 8005388:	f10d 0209 	add.w	r2, sp, #9
 800538c:	eba2 020c 	sub.w	r2, r2, ip
 8005390:	42bc      	cmp	r4, r7
 8005392:	bf88      	it	hi
 8005394:	2200      	movhi	r2, #0
 8005396:	4413      	add	r3, r2
 8005398:	1a18      	subs	r0, r3, r0
 800539a:	b003      	add	sp, #12
 800539c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800539e:	f812 5b01 	ldrb.w	r5, [r2], #1
 80053a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80053a6:	e7ed      	b.n	8005384 <__exponent+0x4c>
 80053a8:	2330      	movs	r3, #48	; 0x30
 80053aa:	3130      	adds	r1, #48	; 0x30
 80053ac:	7083      	strb	r3, [r0, #2]
 80053ae:	70c1      	strb	r1, [r0, #3]
 80053b0:	1d03      	adds	r3, r0, #4
 80053b2:	e7f1      	b.n	8005398 <__exponent+0x60>

080053b4 <_printf_float>:
 80053b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b8:	ed2d 8b02 	vpush	{d8}
 80053bc:	b08d      	sub	sp, #52	; 0x34
 80053be:	460c      	mov	r4, r1
 80053c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80053c4:	4616      	mov	r6, r2
 80053c6:	461f      	mov	r7, r3
 80053c8:	4605      	mov	r5, r0
 80053ca:	f000 fdd1 	bl	8005f70 <_localeconv_r>
 80053ce:	f8d0 a000 	ldr.w	sl, [r0]
 80053d2:	4650      	mov	r0, sl
 80053d4:	f7fa ff54 	bl	8000280 <strlen>
 80053d8:	2300      	movs	r3, #0
 80053da:	930a      	str	r3, [sp, #40]	; 0x28
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	9305      	str	r3, [sp, #20]
 80053e0:	f8d8 3000 	ldr.w	r3, [r8]
 80053e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80053e8:	3307      	adds	r3, #7
 80053ea:	f023 0307 	bic.w	r3, r3, #7
 80053ee:	f103 0208 	add.w	r2, r3, #8
 80053f2:	f8c8 2000 	str.w	r2, [r8]
 80053f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053fe:	9307      	str	r3, [sp, #28]
 8005400:	f8cd 8018 	str.w	r8, [sp, #24]
 8005404:	ee08 0a10 	vmov	s16, r0
 8005408:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800540c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005410:	4b9e      	ldr	r3, [pc, #632]	; (800568c <_printf_float+0x2d8>)
 8005412:	f04f 32ff 	mov.w	r2, #4294967295
 8005416:	f7fb fb91 	bl	8000b3c <__aeabi_dcmpun>
 800541a:	bb88      	cbnz	r0, 8005480 <_printf_float+0xcc>
 800541c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005420:	4b9a      	ldr	r3, [pc, #616]	; (800568c <_printf_float+0x2d8>)
 8005422:	f04f 32ff 	mov.w	r2, #4294967295
 8005426:	f7fb fb6b 	bl	8000b00 <__aeabi_dcmple>
 800542a:	bb48      	cbnz	r0, 8005480 <_printf_float+0xcc>
 800542c:	2200      	movs	r2, #0
 800542e:	2300      	movs	r3, #0
 8005430:	4640      	mov	r0, r8
 8005432:	4649      	mov	r1, r9
 8005434:	f7fb fb5a 	bl	8000aec <__aeabi_dcmplt>
 8005438:	b110      	cbz	r0, 8005440 <_printf_float+0x8c>
 800543a:	232d      	movs	r3, #45	; 0x2d
 800543c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005440:	4a93      	ldr	r2, [pc, #588]	; (8005690 <_printf_float+0x2dc>)
 8005442:	4b94      	ldr	r3, [pc, #592]	; (8005694 <_printf_float+0x2e0>)
 8005444:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005448:	bf94      	ite	ls
 800544a:	4690      	movls	r8, r2
 800544c:	4698      	movhi	r8, r3
 800544e:	2303      	movs	r3, #3
 8005450:	6123      	str	r3, [r4, #16]
 8005452:	9b05      	ldr	r3, [sp, #20]
 8005454:	f023 0304 	bic.w	r3, r3, #4
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	f04f 0900 	mov.w	r9, #0
 800545e:	9700      	str	r7, [sp, #0]
 8005460:	4633      	mov	r3, r6
 8005462:	aa0b      	add	r2, sp, #44	; 0x2c
 8005464:	4621      	mov	r1, r4
 8005466:	4628      	mov	r0, r5
 8005468:	f000 f9da 	bl	8005820 <_printf_common>
 800546c:	3001      	adds	r0, #1
 800546e:	f040 8090 	bne.w	8005592 <_printf_float+0x1de>
 8005472:	f04f 30ff 	mov.w	r0, #4294967295
 8005476:	b00d      	add	sp, #52	; 0x34
 8005478:	ecbd 8b02 	vpop	{d8}
 800547c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005480:	4642      	mov	r2, r8
 8005482:	464b      	mov	r3, r9
 8005484:	4640      	mov	r0, r8
 8005486:	4649      	mov	r1, r9
 8005488:	f7fb fb58 	bl	8000b3c <__aeabi_dcmpun>
 800548c:	b140      	cbz	r0, 80054a0 <_printf_float+0xec>
 800548e:	464b      	mov	r3, r9
 8005490:	2b00      	cmp	r3, #0
 8005492:	bfbc      	itt	lt
 8005494:	232d      	movlt	r3, #45	; 0x2d
 8005496:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800549a:	4a7f      	ldr	r2, [pc, #508]	; (8005698 <_printf_float+0x2e4>)
 800549c:	4b7f      	ldr	r3, [pc, #508]	; (800569c <_printf_float+0x2e8>)
 800549e:	e7d1      	b.n	8005444 <_printf_float+0x90>
 80054a0:	6863      	ldr	r3, [r4, #4]
 80054a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80054a6:	9206      	str	r2, [sp, #24]
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	d13f      	bne.n	800552c <_printf_float+0x178>
 80054ac:	2306      	movs	r3, #6
 80054ae:	6063      	str	r3, [r4, #4]
 80054b0:	9b05      	ldr	r3, [sp, #20]
 80054b2:	6861      	ldr	r1, [r4, #4]
 80054b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80054b8:	2300      	movs	r3, #0
 80054ba:	9303      	str	r3, [sp, #12]
 80054bc:	ab0a      	add	r3, sp, #40	; 0x28
 80054be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80054c2:	ab09      	add	r3, sp, #36	; 0x24
 80054c4:	ec49 8b10 	vmov	d0, r8, r9
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	6022      	str	r2, [r4, #0]
 80054cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80054d0:	4628      	mov	r0, r5
 80054d2:	f7ff fecf 	bl	8005274 <__cvt>
 80054d6:	9b06      	ldr	r3, [sp, #24]
 80054d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054da:	2b47      	cmp	r3, #71	; 0x47
 80054dc:	4680      	mov	r8, r0
 80054de:	d108      	bne.n	80054f2 <_printf_float+0x13e>
 80054e0:	1cc8      	adds	r0, r1, #3
 80054e2:	db02      	blt.n	80054ea <_printf_float+0x136>
 80054e4:	6863      	ldr	r3, [r4, #4]
 80054e6:	4299      	cmp	r1, r3
 80054e8:	dd41      	ble.n	800556e <_printf_float+0x1ba>
 80054ea:	f1ab 0302 	sub.w	r3, fp, #2
 80054ee:	fa5f fb83 	uxtb.w	fp, r3
 80054f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054f6:	d820      	bhi.n	800553a <_printf_float+0x186>
 80054f8:	3901      	subs	r1, #1
 80054fa:	465a      	mov	r2, fp
 80054fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005500:	9109      	str	r1, [sp, #36]	; 0x24
 8005502:	f7ff ff19 	bl	8005338 <__exponent>
 8005506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005508:	1813      	adds	r3, r2, r0
 800550a:	2a01      	cmp	r2, #1
 800550c:	4681      	mov	r9, r0
 800550e:	6123      	str	r3, [r4, #16]
 8005510:	dc02      	bgt.n	8005518 <_printf_float+0x164>
 8005512:	6822      	ldr	r2, [r4, #0]
 8005514:	07d2      	lsls	r2, r2, #31
 8005516:	d501      	bpl.n	800551c <_printf_float+0x168>
 8005518:	3301      	adds	r3, #1
 800551a:	6123      	str	r3, [r4, #16]
 800551c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005520:	2b00      	cmp	r3, #0
 8005522:	d09c      	beq.n	800545e <_printf_float+0xaa>
 8005524:	232d      	movs	r3, #45	; 0x2d
 8005526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800552a:	e798      	b.n	800545e <_printf_float+0xaa>
 800552c:	9a06      	ldr	r2, [sp, #24]
 800552e:	2a47      	cmp	r2, #71	; 0x47
 8005530:	d1be      	bne.n	80054b0 <_printf_float+0xfc>
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1bc      	bne.n	80054b0 <_printf_float+0xfc>
 8005536:	2301      	movs	r3, #1
 8005538:	e7b9      	b.n	80054ae <_printf_float+0xfa>
 800553a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800553e:	d118      	bne.n	8005572 <_printf_float+0x1be>
 8005540:	2900      	cmp	r1, #0
 8005542:	6863      	ldr	r3, [r4, #4]
 8005544:	dd0b      	ble.n	800555e <_printf_float+0x1aa>
 8005546:	6121      	str	r1, [r4, #16]
 8005548:	b913      	cbnz	r3, 8005550 <_printf_float+0x19c>
 800554a:	6822      	ldr	r2, [r4, #0]
 800554c:	07d0      	lsls	r0, r2, #31
 800554e:	d502      	bpl.n	8005556 <_printf_float+0x1a2>
 8005550:	3301      	adds	r3, #1
 8005552:	440b      	add	r3, r1
 8005554:	6123      	str	r3, [r4, #16]
 8005556:	65a1      	str	r1, [r4, #88]	; 0x58
 8005558:	f04f 0900 	mov.w	r9, #0
 800555c:	e7de      	b.n	800551c <_printf_float+0x168>
 800555e:	b913      	cbnz	r3, 8005566 <_printf_float+0x1b2>
 8005560:	6822      	ldr	r2, [r4, #0]
 8005562:	07d2      	lsls	r2, r2, #31
 8005564:	d501      	bpl.n	800556a <_printf_float+0x1b6>
 8005566:	3302      	adds	r3, #2
 8005568:	e7f4      	b.n	8005554 <_printf_float+0x1a0>
 800556a:	2301      	movs	r3, #1
 800556c:	e7f2      	b.n	8005554 <_printf_float+0x1a0>
 800556e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005574:	4299      	cmp	r1, r3
 8005576:	db05      	blt.n	8005584 <_printf_float+0x1d0>
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	6121      	str	r1, [r4, #16]
 800557c:	07d8      	lsls	r0, r3, #31
 800557e:	d5ea      	bpl.n	8005556 <_printf_float+0x1a2>
 8005580:	1c4b      	adds	r3, r1, #1
 8005582:	e7e7      	b.n	8005554 <_printf_float+0x1a0>
 8005584:	2900      	cmp	r1, #0
 8005586:	bfd4      	ite	le
 8005588:	f1c1 0202 	rsble	r2, r1, #2
 800558c:	2201      	movgt	r2, #1
 800558e:	4413      	add	r3, r2
 8005590:	e7e0      	b.n	8005554 <_printf_float+0x1a0>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	055a      	lsls	r2, r3, #21
 8005596:	d407      	bmi.n	80055a8 <_printf_float+0x1f4>
 8005598:	6923      	ldr	r3, [r4, #16]
 800559a:	4642      	mov	r2, r8
 800559c:	4631      	mov	r1, r6
 800559e:	4628      	mov	r0, r5
 80055a0:	47b8      	blx	r7
 80055a2:	3001      	adds	r0, #1
 80055a4:	d12c      	bne.n	8005600 <_printf_float+0x24c>
 80055a6:	e764      	b.n	8005472 <_printf_float+0xbe>
 80055a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055ac:	f240 80e0 	bls.w	8005770 <_printf_float+0x3bc>
 80055b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055b4:	2200      	movs	r2, #0
 80055b6:	2300      	movs	r3, #0
 80055b8:	f7fb fa8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80055bc:	2800      	cmp	r0, #0
 80055be:	d034      	beq.n	800562a <_printf_float+0x276>
 80055c0:	4a37      	ldr	r2, [pc, #220]	; (80056a0 <_printf_float+0x2ec>)
 80055c2:	2301      	movs	r3, #1
 80055c4:	4631      	mov	r1, r6
 80055c6:	4628      	mov	r0, r5
 80055c8:	47b8      	blx	r7
 80055ca:	3001      	adds	r0, #1
 80055cc:	f43f af51 	beq.w	8005472 <_printf_float+0xbe>
 80055d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055d4:	429a      	cmp	r2, r3
 80055d6:	db02      	blt.n	80055de <_printf_float+0x22a>
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	07d8      	lsls	r0, r3, #31
 80055dc:	d510      	bpl.n	8005600 <_printf_float+0x24c>
 80055de:	ee18 3a10 	vmov	r3, s16
 80055e2:	4652      	mov	r2, sl
 80055e4:	4631      	mov	r1, r6
 80055e6:	4628      	mov	r0, r5
 80055e8:	47b8      	blx	r7
 80055ea:	3001      	adds	r0, #1
 80055ec:	f43f af41 	beq.w	8005472 <_printf_float+0xbe>
 80055f0:	f04f 0800 	mov.w	r8, #0
 80055f4:	f104 091a 	add.w	r9, r4, #26
 80055f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055fa:	3b01      	subs	r3, #1
 80055fc:	4543      	cmp	r3, r8
 80055fe:	dc09      	bgt.n	8005614 <_printf_float+0x260>
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	079b      	lsls	r3, r3, #30
 8005604:	f100 8107 	bmi.w	8005816 <_printf_float+0x462>
 8005608:	68e0      	ldr	r0, [r4, #12]
 800560a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800560c:	4298      	cmp	r0, r3
 800560e:	bfb8      	it	lt
 8005610:	4618      	movlt	r0, r3
 8005612:	e730      	b.n	8005476 <_printf_float+0xc2>
 8005614:	2301      	movs	r3, #1
 8005616:	464a      	mov	r2, r9
 8005618:	4631      	mov	r1, r6
 800561a:	4628      	mov	r0, r5
 800561c:	47b8      	blx	r7
 800561e:	3001      	adds	r0, #1
 8005620:	f43f af27 	beq.w	8005472 <_printf_float+0xbe>
 8005624:	f108 0801 	add.w	r8, r8, #1
 8005628:	e7e6      	b.n	80055f8 <_printf_float+0x244>
 800562a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800562c:	2b00      	cmp	r3, #0
 800562e:	dc39      	bgt.n	80056a4 <_printf_float+0x2f0>
 8005630:	4a1b      	ldr	r2, [pc, #108]	; (80056a0 <_printf_float+0x2ec>)
 8005632:	2301      	movs	r3, #1
 8005634:	4631      	mov	r1, r6
 8005636:	4628      	mov	r0, r5
 8005638:	47b8      	blx	r7
 800563a:	3001      	adds	r0, #1
 800563c:	f43f af19 	beq.w	8005472 <_printf_float+0xbe>
 8005640:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005644:	4313      	orrs	r3, r2
 8005646:	d102      	bne.n	800564e <_printf_float+0x29a>
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	07d9      	lsls	r1, r3, #31
 800564c:	d5d8      	bpl.n	8005600 <_printf_float+0x24c>
 800564e:	ee18 3a10 	vmov	r3, s16
 8005652:	4652      	mov	r2, sl
 8005654:	4631      	mov	r1, r6
 8005656:	4628      	mov	r0, r5
 8005658:	47b8      	blx	r7
 800565a:	3001      	adds	r0, #1
 800565c:	f43f af09 	beq.w	8005472 <_printf_float+0xbe>
 8005660:	f04f 0900 	mov.w	r9, #0
 8005664:	f104 0a1a 	add.w	sl, r4, #26
 8005668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800566a:	425b      	negs	r3, r3
 800566c:	454b      	cmp	r3, r9
 800566e:	dc01      	bgt.n	8005674 <_printf_float+0x2c0>
 8005670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005672:	e792      	b.n	800559a <_printf_float+0x1e6>
 8005674:	2301      	movs	r3, #1
 8005676:	4652      	mov	r2, sl
 8005678:	4631      	mov	r1, r6
 800567a:	4628      	mov	r0, r5
 800567c:	47b8      	blx	r7
 800567e:	3001      	adds	r0, #1
 8005680:	f43f aef7 	beq.w	8005472 <_printf_float+0xbe>
 8005684:	f109 0901 	add.w	r9, r9, #1
 8005688:	e7ee      	b.n	8005668 <_printf_float+0x2b4>
 800568a:	bf00      	nop
 800568c:	7fefffff 	.word	0x7fefffff
 8005690:	0800f36c 	.word	0x0800f36c
 8005694:	0800f370 	.word	0x0800f370
 8005698:	0800f374 	.word	0x0800f374
 800569c:	0800f378 	.word	0x0800f378
 80056a0:	0800f37c 	.word	0x0800f37c
 80056a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056a8:	429a      	cmp	r2, r3
 80056aa:	bfa8      	it	ge
 80056ac:	461a      	movge	r2, r3
 80056ae:	2a00      	cmp	r2, #0
 80056b0:	4691      	mov	r9, r2
 80056b2:	dc37      	bgt.n	8005724 <_printf_float+0x370>
 80056b4:	f04f 0b00 	mov.w	fp, #0
 80056b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056bc:	f104 021a 	add.w	r2, r4, #26
 80056c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056c2:	9305      	str	r3, [sp, #20]
 80056c4:	eba3 0309 	sub.w	r3, r3, r9
 80056c8:	455b      	cmp	r3, fp
 80056ca:	dc33      	bgt.n	8005734 <_printf_float+0x380>
 80056cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056d0:	429a      	cmp	r2, r3
 80056d2:	db3b      	blt.n	800574c <_printf_float+0x398>
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	07da      	lsls	r2, r3, #31
 80056d8:	d438      	bmi.n	800574c <_printf_float+0x398>
 80056da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80056de:	eba2 0903 	sub.w	r9, r2, r3
 80056e2:	9b05      	ldr	r3, [sp, #20]
 80056e4:	1ad2      	subs	r2, r2, r3
 80056e6:	4591      	cmp	r9, r2
 80056e8:	bfa8      	it	ge
 80056ea:	4691      	movge	r9, r2
 80056ec:	f1b9 0f00 	cmp.w	r9, #0
 80056f0:	dc35      	bgt.n	800575e <_printf_float+0x3aa>
 80056f2:	f04f 0800 	mov.w	r8, #0
 80056f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056fa:	f104 0a1a 	add.w	sl, r4, #26
 80056fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005702:	1a9b      	subs	r3, r3, r2
 8005704:	eba3 0309 	sub.w	r3, r3, r9
 8005708:	4543      	cmp	r3, r8
 800570a:	f77f af79 	ble.w	8005600 <_printf_float+0x24c>
 800570e:	2301      	movs	r3, #1
 8005710:	4652      	mov	r2, sl
 8005712:	4631      	mov	r1, r6
 8005714:	4628      	mov	r0, r5
 8005716:	47b8      	blx	r7
 8005718:	3001      	adds	r0, #1
 800571a:	f43f aeaa 	beq.w	8005472 <_printf_float+0xbe>
 800571e:	f108 0801 	add.w	r8, r8, #1
 8005722:	e7ec      	b.n	80056fe <_printf_float+0x34a>
 8005724:	4613      	mov	r3, r2
 8005726:	4631      	mov	r1, r6
 8005728:	4642      	mov	r2, r8
 800572a:	4628      	mov	r0, r5
 800572c:	47b8      	blx	r7
 800572e:	3001      	adds	r0, #1
 8005730:	d1c0      	bne.n	80056b4 <_printf_float+0x300>
 8005732:	e69e      	b.n	8005472 <_printf_float+0xbe>
 8005734:	2301      	movs	r3, #1
 8005736:	4631      	mov	r1, r6
 8005738:	4628      	mov	r0, r5
 800573a:	9205      	str	r2, [sp, #20]
 800573c:	47b8      	blx	r7
 800573e:	3001      	adds	r0, #1
 8005740:	f43f ae97 	beq.w	8005472 <_printf_float+0xbe>
 8005744:	9a05      	ldr	r2, [sp, #20]
 8005746:	f10b 0b01 	add.w	fp, fp, #1
 800574a:	e7b9      	b.n	80056c0 <_printf_float+0x30c>
 800574c:	ee18 3a10 	vmov	r3, s16
 8005750:	4652      	mov	r2, sl
 8005752:	4631      	mov	r1, r6
 8005754:	4628      	mov	r0, r5
 8005756:	47b8      	blx	r7
 8005758:	3001      	adds	r0, #1
 800575a:	d1be      	bne.n	80056da <_printf_float+0x326>
 800575c:	e689      	b.n	8005472 <_printf_float+0xbe>
 800575e:	9a05      	ldr	r2, [sp, #20]
 8005760:	464b      	mov	r3, r9
 8005762:	4442      	add	r2, r8
 8005764:	4631      	mov	r1, r6
 8005766:	4628      	mov	r0, r5
 8005768:	47b8      	blx	r7
 800576a:	3001      	adds	r0, #1
 800576c:	d1c1      	bne.n	80056f2 <_printf_float+0x33e>
 800576e:	e680      	b.n	8005472 <_printf_float+0xbe>
 8005770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005772:	2a01      	cmp	r2, #1
 8005774:	dc01      	bgt.n	800577a <_printf_float+0x3c6>
 8005776:	07db      	lsls	r3, r3, #31
 8005778:	d53a      	bpl.n	80057f0 <_printf_float+0x43c>
 800577a:	2301      	movs	r3, #1
 800577c:	4642      	mov	r2, r8
 800577e:	4631      	mov	r1, r6
 8005780:	4628      	mov	r0, r5
 8005782:	47b8      	blx	r7
 8005784:	3001      	adds	r0, #1
 8005786:	f43f ae74 	beq.w	8005472 <_printf_float+0xbe>
 800578a:	ee18 3a10 	vmov	r3, s16
 800578e:	4652      	mov	r2, sl
 8005790:	4631      	mov	r1, r6
 8005792:	4628      	mov	r0, r5
 8005794:	47b8      	blx	r7
 8005796:	3001      	adds	r0, #1
 8005798:	f43f ae6b 	beq.w	8005472 <_printf_float+0xbe>
 800579c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057a0:	2200      	movs	r2, #0
 80057a2:	2300      	movs	r3, #0
 80057a4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80057a8:	f7fb f996 	bl	8000ad8 <__aeabi_dcmpeq>
 80057ac:	b9d8      	cbnz	r0, 80057e6 <_printf_float+0x432>
 80057ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80057b2:	f108 0201 	add.w	r2, r8, #1
 80057b6:	4631      	mov	r1, r6
 80057b8:	4628      	mov	r0, r5
 80057ba:	47b8      	blx	r7
 80057bc:	3001      	adds	r0, #1
 80057be:	d10e      	bne.n	80057de <_printf_float+0x42a>
 80057c0:	e657      	b.n	8005472 <_printf_float+0xbe>
 80057c2:	2301      	movs	r3, #1
 80057c4:	4652      	mov	r2, sl
 80057c6:	4631      	mov	r1, r6
 80057c8:	4628      	mov	r0, r5
 80057ca:	47b8      	blx	r7
 80057cc:	3001      	adds	r0, #1
 80057ce:	f43f ae50 	beq.w	8005472 <_printf_float+0xbe>
 80057d2:	f108 0801 	add.w	r8, r8, #1
 80057d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057d8:	3b01      	subs	r3, #1
 80057da:	4543      	cmp	r3, r8
 80057dc:	dcf1      	bgt.n	80057c2 <_printf_float+0x40e>
 80057de:	464b      	mov	r3, r9
 80057e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057e4:	e6da      	b.n	800559c <_printf_float+0x1e8>
 80057e6:	f04f 0800 	mov.w	r8, #0
 80057ea:	f104 0a1a 	add.w	sl, r4, #26
 80057ee:	e7f2      	b.n	80057d6 <_printf_float+0x422>
 80057f0:	2301      	movs	r3, #1
 80057f2:	4642      	mov	r2, r8
 80057f4:	e7df      	b.n	80057b6 <_printf_float+0x402>
 80057f6:	2301      	movs	r3, #1
 80057f8:	464a      	mov	r2, r9
 80057fa:	4631      	mov	r1, r6
 80057fc:	4628      	mov	r0, r5
 80057fe:	47b8      	blx	r7
 8005800:	3001      	adds	r0, #1
 8005802:	f43f ae36 	beq.w	8005472 <_printf_float+0xbe>
 8005806:	f108 0801 	add.w	r8, r8, #1
 800580a:	68e3      	ldr	r3, [r4, #12]
 800580c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800580e:	1a5b      	subs	r3, r3, r1
 8005810:	4543      	cmp	r3, r8
 8005812:	dcf0      	bgt.n	80057f6 <_printf_float+0x442>
 8005814:	e6f8      	b.n	8005608 <_printf_float+0x254>
 8005816:	f04f 0800 	mov.w	r8, #0
 800581a:	f104 0919 	add.w	r9, r4, #25
 800581e:	e7f4      	b.n	800580a <_printf_float+0x456>

08005820 <_printf_common>:
 8005820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005824:	4616      	mov	r6, r2
 8005826:	4699      	mov	r9, r3
 8005828:	688a      	ldr	r2, [r1, #8]
 800582a:	690b      	ldr	r3, [r1, #16]
 800582c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005830:	4293      	cmp	r3, r2
 8005832:	bfb8      	it	lt
 8005834:	4613      	movlt	r3, r2
 8005836:	6033      	str	r3, [r6, #0]
 8005838:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800583c:	4607      	mov	r7, r0
 800583e:	460c      	mov	r4, r1
 8005840:	b10a      	cbz	r2, 8005846 <_printf_common+0x26>
 8005842:	3301      	adds	r3, #1
 8005844:	6033      	str	r3, [r6, #0]
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	0699      	lsls	r1, r3, #26
 800584a:	bf42      	ittt	mi
 800584c:	6833      	ldrmi	r3, [r6, #0]
 800584e:	3302      	addmi	r3, #2
 8005850:	6033      	strmi	r3, [r6, #0]
 8005852:	6825      	ldr	r5, [r4, #0]
 8005854:	f015 0506 	ands.w	r5, r5, #6
 8005858:	d106      	bne.n	8005868 <_printf_common+0x48>
 800585a:	f104 0a19 	add.w	sl, r4, #25
 800585e:	68e3      	ldr	r3, [r4, #12]
 8005860:	6832      	ldr	r2, [r6, #0]
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	42ab      	cmp	r3, r5
 8005866:	dc26      	bgt.n	80058b6 <_printf_common+0x96>
 8005868:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800586c:	1e13      	subs	r3, r2, #0
 800586e:	6822      	ldr	r2, [r4, #0]
 8005870:	bf18      	it	ne
 8005872:	2301      	movne	r3, #1
 8005874:	0692      	lsls	r2, r2, #26
 8005876:	d42b      	bmi.n	80058d0 <_printf_common+0xb0>
 8005878:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800587c:	4649      	mov	r1, r9
 800587e:	4638      	mov	r0, r7
 8005880:	47c0      	blx	r8
 8005882:	3001      	adds	r0, #1
 8005884:	d01e      	beq.n	80058c4 <_printf_common+0xa4>
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	6922      	ldr	r2, [r4, #16]
 800588a:	f003 0306 	and.w	r3, r3, #6
 800588e:	2b04      	cmp	r3, #4
 8005890:	bf02      	ittt	eq
 8005892:	68e5      	ldreq	r5, [r4, #12]
 8005894:	6833      	ldreq	r3, [r6, #0]
 8005896:	1aed      	subeq	r5, r5, r3
 8005898:	68a3      	ldr	r3, [r4, #8]
 800589a:	bf0c      	ite	eq
 800589c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058a0:	2500      	movne	r5, #0
 80058a2:	4293      	cmp	r3, r2
 80058a4:	bfc4      	itt	gt
 80058a6:	1a9b      	subgt	r3, r3, r2
 80058a8:	18ed      	addgt	r5, r5, r3
 80058aa:	2600      	movs	r6, #0
 80058ac:	341a      	adds	r4, #26
 80058ae:	42b5      	cmp	r5, r6
 80058b0:	d11a      	bne.n	80058e8 <_printf_common+0xc8>
 80058b2:	2000      	movs	r0, #0
 80058b4:	e008      	b.n	80058c8 <_printf_common+0xa8>
 80058b6:	2301      	movs	r3, #1
 80058b8:	4652      	mov	r2, sl
 80058ba:	4649      	mov	r1, r9
 80058bc:	4638      	mov	r0, r7
 80058be:	47c0      	blx	r8
 80058c0:	3001      	adds	r0, #1
 80058c2:	d103      	bne.n	80058cc <_printf_common+0xac>
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295
 80058c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058cc:	3501      	adds	r5, #1
 80058ce:	e7c6      	b.n	800585e <_printf_common+0x3e>
 80058d0:	18e1      	adds	r1, r4, r3
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	2030      	movs	r0, #48	; 0x30
 80058d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058da:	4422      	add	r2, r4
 80058dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058e4:	3302      	adds	r3, #2
 80058e6:	e7c7      	b.n	8005878 <_printf_common+0x58>
 80058e8:	2301      	movs	r3, #1
 80058ea:	4622      	mov	r2, r4
 80058ec:	4649      	mov	r1, r9
 80058ee:	4638      	mov	r0, r7
 80058f0:	47c0      	blx	r8
 80058f2:	3001      	adds	r0, #1
 80058f4:	d0e6      	beq.n	80058c4 <_printf_common+0xa4>
 80058f6:	3601      	adds	r6, #1
 80058f8:	e7d9      	b.n	80058ae <_printf_common+0x8e>
	...

080058fc <_printf_i>:
 80058fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005900:	7e0f      	ldrb	r7, [r1, #24]
 8005902:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005904:	2f78      	cmp	r7, #120	; 0x78
 8005906:	4691      	mov	r9, r2
 8005908:	4680      	mov	r8, r0
 800590a:	460c      	mov	r4, r1
 800590c:	469a      	mov	sl, r3
 800590e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005912:	d807      	bhi.n	8005924 <_printf_i+0x28>
 8005914:	2f62      	cmp	r7, #98	; 0x62
 8005916:	d80a      	bhi.n	800592e <_printf_i+0x32>
 8005918:	2f00      	cmp	r7, #0
 800591a:	f000 80d4 	beq.w	8005ac6 <_printf_i+0x1ca>
 800591e:	2f58      	cmp	r7, #88	; 0x58
 8005920:	f000 80c0 	beq.w	8005aa4 <_printf_i+0x1a8>
 8005924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005928:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800592c:	e03a      	b.n	80059a4 <_printf_i+0xa8>
 800592e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005932:	2b15      	cmp	r3, #21
 8005934:	d8f6      	bhi.n	8005924 <_printf_i+0x28>
 8005936:	a101      	add	r1, pc, #4	; (adr r1, 800593c <_printf_i+0x40>)
 8005938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800593c:	08005995 	.word	0x08005995
 8005940:	080059a9 	.word	0x080059a9
 8005944:	08005925 	.word	0x08005925
 8005948:	08005925 	.word	0x08005925
 800594c:	08005925 	.word	0x08005925
 8005950:	08005925 	.word	0x08005925
 8005954:	080059a9 	.word	0x080059a9
 8005958:	08005925 	.word	0x08005925
 800595c:	08005925 	.word	0x08005925
 8005960:	08005925 	.word	0x08005925
 8005964:	08005925 	.word	0x08005925
 8005968:	08005aad 	.word	0x08005aad
 800596c:	080059d5 	.word	0x080059d5
 8005970:	08005a67 	.word	0x08005a67
 8005974:	08005925 	.word	0x08005925
 8005978:	08005925 	.word	0x08005925
 800597c:	08005acf 	.word	0x08005acf
 8005980:	08005925 	.word	0x08005925
 8005984:	080059d5 	.word	0x080059d5
 8005988:	08005925 	.word	0x08005925
 800598c:	08005925 	.word	0x08005925
 8005990:	08005a6f 	.word	0x08005a6f
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	1d1a      	adds	r2, r3, #4
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	602a      	str	r2, [r5, #0]
 800599c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059a4:	2301      	movs	r3, #1
 80059a6:	e09f      	b.n	8005ae8 <_printf_i+0x1ec>
 80059a8:	6820      	ldr	r0, [r4, #0]
 80059aa:	682b      	ldr	r3, [r5, #0]
 80059ac:	0607      	lsls	r7, r0, #24
 80059ae:	f103 0104 	add.w	r1, r3, #4
 80059b2:	6029      	str	r1, [r5, #0]
 80059b4:	d501      	bpl.n	80059ba <_printf_i+0xbe>
 80059b6:	681e      	ldr	r6, [r3, #0]
 80059b8:	e003      	b.n	80059c2 <_printf_i+0xc6>
 80059ba:	0646      	lsls	r6, r0, #25
 80059bc:	d5fb      	bpl.n	80059b6 <_printf_i+0xba>
 80059be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059c2:	2e00      	cmp	r6, #0
 80059c4:	da03      	bge.n	80059ce <_printf_i+0xd2>
 80059c6:	232d      	movs	r3, #45	; 0x2d
 80059c8:	4276      	negs	r6, r6
 80059ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059ce:	485a      	ldr	r0, [pc, #360]	; (8005b38 <_printf_i+0x23c>)
 80059d0:	230a      	movs	r3, #10
 80059d2:	e012      	b.n	80059fa <_printf_i+0xfe>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	6820      	ldr	r0, [r4, #0]
 80059d8:	1d19      	adds	r1, r3, #4
 80059da:	6029      	str	r1, [r5, #0]
 80059dc:	0605      	lsls	r5, r0, #24
 80059de:	d501      	bpl.n	80059e4 <_printf_i+0xe8>
 80059e0:	681e      	ldr	r6, [r3, #0]
 80059e2:	e002      	b.n	80059ea <_printf_i+0xee>
 80059e4:	0641      	lsls	r1, r0, #25
 80059e6:	d5fb      	bpl.n	80059e0 <_printf_i+0xe4>
 80059e8:	881e      	ldrh	r6, [r3, #0]
 80059ea:	4853      	ldr	r0, [pc, #332]	; (8005b38 <_printf_i+0x23c>)
 80059ec:	2f6f      	cmp	r7, #111	; 0x6f
 80059ee:	bf0c      	ite	eq
 80059f0:	2308      	moveq	r3, #8
 80059f2:	230a      	movne	r3, #10
 80059f4:	2100      	movs	r1, #0
 80059f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059fa:	6865      	ldr	r5, [r4, #4]
 80059fc:	60a5      	str	r5, [r4, #8]
 80059fe:	2d00      	cmp	r5, #0
 8005a00:	bfa2      	ittt	ge
 8005a02:	6821      	ldrge	r1, [r4, #0]
 8005a04:	f021 0104 	bicge.w	r1, r1, #4
 8005a08:	6021      	strge	r1, [r4, #0]
 8005a0a:	b90e      	cbnz	r6, 8005a10 <_printf_i+0x114>
 8005a0c:	2d00      	cmp	r5, #0
 8005a0e:	d04b      	beq.n	8005aa8 <_printf_i+0x1ac>
 8005a10:	4615      	mov	r5, r2
 8005a12:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a16:	fb03 6711 	mls	r7, r3, r1, r6
 8005a1a:	5dc7      	ldrb	r7, [r0, r7]
 8005a1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a20:	4637      	mov	r7, r6
 8005a22:	42bb      	cmp	r3, r7
 8005a24:	460e      	mov	r6, r1
 8005a26:	d9f4      	bls.n	8005a12 <_printf_i+0x116>
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d10b      	bne.n	8005a44 <_printf_i+0x148>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	07de      	lsls	r6, r3, #31
 8005a30:	d508      	bpl.n	8005a44 <_printf_i+0x148>
 8005a32:	6923      	ldr	r3, [r4, #16]
 8005a34:	6861      	ldr	r1, [r4, #4]
 8005a36:	4299      	cmp	r1, r3
 8005a38:	bfde      	ittt	le
 8005a3a:	2330      	movle	r3, #48	; 0x30
 8005a3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a44:	1b52      	subs	r2, r2, r5
 8005a46:	6122      	str	r2, [r4, #16]
 8005a48:	f8cd a000 	str.w	sl, [sp]
 8005a4c:	464b      	mov	r3, r9
 8005a4e:	aa03      	add	r2, sp, #12
 8005a50:	4621      	mov	r1, r4
 8005a52:	4640      	mov	r0, r8
 8005a54:	f7ff fee4 	bl	8005820 <_printf_common>
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d14a      	bne.n	8005af2 <_printf_i+0x1f6>
 8005a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a60:	b004      	add	sp, #16
 8005a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	f043 0320 	orr.w	r3, r3, #32
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	4833      	ldr	r0, [pc, #204]	; (8005b3c <_printf_i+0x240>)
 8005a70:	2778      	movs	r7, #120	; 0x78
 8005a72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	6829      	ldr	r1, [r5, #0]
 8005a7a:	061f      	lsls	r7, r3, #24
 8005a7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a80:	d402      	bmi.n	8005a88 <_printf_i+0x18c>
 8005a82:	065f      	lsls	r7, r3, #25
 8005a84:	bf48      	it	mi
 8005a86:	b2b6      	uxthmi	r6, r6
 8005a88:	07df      	lsls	r7, r3, #31
 8005a8a:	bf48      	it	mi
 8005a8c:	f043 0320 	orrmi.w	r3, r3, #32
 8005a90:	6029      	str	r1, [r5, #0]
 8005a92:	bf48      	it	mi
 8005a94:	6023      	strmi	r3, [r4, #0]
 8005a96:	b91e      	cbnz	r6, 8005aa0 <_printf_i+0x1a4>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	f023 0320 	bic.w	r3, r3, #32
 8005a9e:	6023      	str	r3, [r4, #0]
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	e7a7      	b.n	80059f4 <_printf_i+0xf8>
 8005aa4:	4824      	ldr	r0, [pc, #144]	; (8005b38 <_printf_i+0x23c>)
 8005aa6:	e7e4      	b.n	8005a72 <_printf_i+0x176>
 8005aa8:	4615      	mov	r5, r2
 8005aaa:	e7bd      	b.n	8005a28 <_printf_i+0x12c>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	6826      	ldr	r6, [r4, #0]
 8005ab0:	6961      	ldr	r1, [r4, #20]
 8005ab2:	1d18      	adds	r0, r3, #4
 8005ab4:	6028      	str	r0, [r5, #0]
 8005ab6:	0635      	lsls	r5, r6, #24
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	d501      	bpl.n	8005ac0 <_printf_i+0x1c4>
 8005abc:	6019      	str	r1, [r3, #0]
 8005abe:	e002      	b.n	8005ac6 <_printf_i+0x1ca>
 8005ac0:	0670      	lsls	r0, r6, #25
 8005ac2:	d5fb      	bpl.n	8005abc <_printf_i+0x1c0>
 8005ac4:	8019      	strh	r1, [r3, #0]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6123      	str	r3, [r4, #16]
 8005aca:	4615      	mov	r5, r2
 8005acc:	e7bc      	b.n	8005a48 <_printf_i+0x14c>
 8005ace:	682b      	ldr	r3, [r5, #0]
 8005ad0:	1d1a      	adds	r2, r3, #4
 8005ad2:	602a      	str	r2, [r5, #0]
 8005ad4:	681d      	ldr	r5, [r3, #0]
 8005ad6:	6862      	ldr	r2, [r4, #4]
 8005ad8:	2100      	movs	r1, #0
 8005ada:	4628      	mov	r0, r5
 8005adc:	f7fa fb80 	bl	80001e0 <memchr>
 8005ae0:	b108      	cbz	r0, 8005ae6 <_printf_i+0x1ea>
 8005ae2:	1b40      	subs	r0, r0, r5
 8005ae4:	6060      	str	r0, [r4, #4]
 8005ae6:	6863      	ldr	r3, [r4, #4]
 8005ae8:	6123      	str	r3, [r4, #16]
 8005aea:	2300      	movs	r3, #0
 8005aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005af0:	e7aa      	b.n	8005a48 <_printf_i+0x14c>
 8005af2:	6923      	ldr	r3, [r4, #16]
 8005af4:	462a      	mov	r2, r5
 8005af6:	4649      	mov	r1, r9
 8005af8:	4640      	mov	r0, r8
 8005afa:	47d0      	blx	sl
 8005afc:	3001      	adds	r0, #1
 8005afe:	d0ad      	beq.n	8005a5c <_printf_i+0x160>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	079b      	lsls	r3, r3, #30
 8005b04:	d413      	bmi.n	8005b2e <_printf_i+0x232>
 8005b06:	68e0      	ldr	r0, [r4, #12]
 8005b08:	9b03      	ldr	r3, [sp, #12]
 8005b0a:	4298      	cmp	r0, r3
 8005b0c:	bfb8      	it	lt
 8005b0e:	4618      	movlt	r0, r3
 8005b10:	e7a6      	b.n	8005a60 <_printf_i+0x164>
 8005b12:	2301      	movs	r3, #1
 8005b14:	4632      	mov	r2, r6
 8005b16:	4649      	mov	r1, r9
 8005b18:	4640      	mov	r0, r8
 8005b1a:	47d0      	blx	sl
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d09d      	beq.n	8005a5c <_printf_i+0x160>
 8005b20:	3501      	adds	r5, #1
 8005b22:	68e3      	ldr	r3, [r4, #12]
 8005b24:	9903      	ldr	r1, [sp, #12]
 8005b26:	1a5b      	subs	r3, r3, r1
 8005b28:	42ab      	cmp	r3, r5
 8005b2a:	dcf2      	bgt.n	8005b12 <_printf_i+0x216>
 8005b2c:	e7eb      	b.n	8005b06 <_printf_i+0x20a>
 8005b2e:	2500      	movs	r5, #0
 8005b30:	f104 0619 	add.w	r6, r4, #25
 8005b34:	e7f5      	b.n	8005b22 <_printf_i+0x226>
 8005b36:	bf00      	nop
 8005b38:	0800f37e 	.word	0x0800f37e
 8005b3c:	0800f38f 	.word	0x0800f38f

08005b40 <std>:
 8005b40:	2300      	movs	r3, #0
 8005b42:	b510      	push	{r4, lr}
 8005b44:	4604      	mov	r4, r0
 8005b46:	e9c0 3300 	strd	r3, r3, [r0]
 8005b4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b4e:	6083      	str	r3, [r0, #8]
 8005b50:	8181      	strh	r1, [r0, #12]
 8005b52:	6643      	str	r3, [r0, #100]	; 0x64
 8005b54:	81c2      	strh	r2, [r0, #14]
 8005b56:	6183      	str	r3, [r0, #24]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	305c      	adds	r0, #92	; 0x5c
 8005b5e:	f000 f9ff 	bl	8005f60 <memset>
 8005b62:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <std+0x58>)
 8005b64:	6263      	str	r3, [r4, #36]	; 0x24
 8005b66:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <std+0x5c>)
 8005b68:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <std+0x60>)
 8005b6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ba4 <std+0x64>)
 8005b70:	6323      	str	r3, [r4, #48]	; 0x30
 8005b72:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <std+0x68>)
 8005b74:	6224      	str	r4, [r4, #32]
 8005b76:	429c      	cmp	r4, r3
 8005b78:	d006      	beq.n	8005b88 <std+0x48>
 8005b7a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005b7e:	4294      	cmp	r4, r2
 8005b80:	d002      	beq.n	8005b88 <std+0x48>
 8005b82:	33d0      	adds	r3, #208	; 0xd0
 8005b84:	429c      	cmp	r4, r3
 8005b86:	d105      	bne.n	8005b94 <std+0x54>
 8005b88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b90:	f000 ba62 	b.w	8006058 <__retarget_lock_init_recursive>
 8005b94:	bd10      	pop	{r4, pc}
 8005b96:	bf00      	nop
 8005b98:	08005db1 	.word	0x08005db1
 8005b9c:	08005dd3 	.word	0x08005dd3
 8005ba0:	08005e0b 	.word	0x08005e0b
 8005ba4:	08005e2f 	.word	0x08005e2f
 8005ba8:	200003ec 	.word	0x200003ec

08005bac <stdio_exit_handler>:
 8005bac:	4a02      	ldr	r2, [pc, #8]	; (8005bb8 <stdio_exit_handler+0xc>)
 8005bae:	4903      	ldr	r1, [pc, #12]	; (8005bbc <stdio_exit_handler+0x10>)
 8005bb0:	4803      	ldr	r0, [pc, #12]	; (8005bc0 <stdio_exit_handler+0x14>)
 8005bb2:	f000 b869 	b.w	8005c88 <_fwalk_sglue>
 8005bb6:	bf00      	nop
 8005bb8:	20000038 	.word	0x20000038
 8005bbc:	080079e1 	.word	0x080079e1
 8005bc0:	20000044 	.word	0x20000044

08005bc4 <cleanup_stdio>:
 8005bc4:	6841      	ldr	r1, [r0, #4]
 8005bc6:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <cleanup_stdio+0x34>)
 8005bc8:	4299      	cmp	r1, r3
 8005bca:	b510      	push	{r4, lr}
 8005bcc:	4604      	mov	r4, r0
 8005bce:	d001      	beq.n	8005bd4 <cleanup_stdio+0x10>
 8005bd0:	f001 ff06 	bl	80079e0 <_fflush_r>
 8005bd4:	68a1      	ldr	r1, [r4, #8]
 8005bd6:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <cleanup_stdio+0x38>)
 8005bd8:	4299      	cmp	r1, r3
 8005bda:	d002      	beq.n	8005be2 <cleanup_stdio+0x1e>
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f001 feff 	bl	80079e0 <_fflush_r>
 8005be2:	68e1      	ldr	r1, [r4, #12]
 8005be4:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <cleanup_stdio+0x3c>)
 8005be6:	4299      	cmp	r1, r3
 8005be8:	d004      	beq.n	8005bf4 <cleanup_stdio+0x30>
 8005bea:	4620      	mov	r0, r4
 8005bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf0:	f001 bef6 	b.w	80079e0 <_fflush_r>
 8005bf4:	bd10      	pop	{r4, pc}
 8005bf6:	bf00      	nop
 8005bf8:	200003ec 	.word	0x200003ec
 8005bfc:	20000454 	.word	0x20000454
 8005c00:	200004bc 	.word	0x200004bc

08005c04 <global_stdio_init.part.0>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	4b0b      	ldr	r3, [pc, #44]	; (8005c34 <global_stdio_init.part.0+0x30>)
 8005c08:	4c0b      	ldr	r4, [pc, #44]	; (8005c38 <global_stdio_init.part.0+0x34>)
 8005c0a:	4a0c      	ldr	r2, [pc, #48]	; (8005c3c <global_stdio_init.part.0+0x38>)
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	4620      	mov	r0, r4
 8005c10:	2200      	movs	r2, #0
 8005c12:	2104      	movs	r1, #4
 8005c14:	f7ff ff94 	bl	8005b40 <std>
 8005c18:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	2109      	movs	r1, #9
 8005c20:	f7ff ff8e 	bl	8005b40 <std>
 8005c24:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c28:	2202      	movs	r2, #2
 8005c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c2e:	2112      	movs	r1, #18
 8005c30:	f7ff bf86 	b.w	8005b40 <std>
 8005c34:	20000524 	.word	0x20000524
 8005c38:	200003ec 	.word	0x200003ec
 8005c3c:	08005bad 	.word	0x08005bad

08005c40 <__sfp_lock_acquire>:
 8005c40:	4801      	ldr	r0, [pc, #4]	; (8005c48 <__sfp_lock_acquire+0x8>)
 8005c42:	f000 ba0a 	b.w	800605a <__retarget_lock_acquire_recursive>
 8005c46:	bf00      	nop
 8005c48:	2000052d 	.word	0x2000052d

08005c4c <__sfp_lock_release>:
 8005c4c:	4801      	ldr	r0, [pc, #4]	; (8005c54 <__sfp_lock_release+0x8>)
 8005c4e:	f000 ba05 	b.w	800605c <__retarget_lock_release_recursive>
 8005c52:	bf00      	nop
 8005c54:	2000052d 	.word	0x2000052d

08005c58 <__sinit>:
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	f7ff fff0 	bl	8005c40 <__sfp_lock_acquire>
 8005c60:	6a23      	ldr	r3, [r4, #32]
 8005c62:	b11b      	cbz	r3, 8005c6c <__sinit+0x14>
 8005c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c68:	f7ff bff0 	b.w	8005c4c <__sfp_lock_release>
 8005c6c:	4b04      	ldr	r3, [pc, #16]	; (8005c80 <__sinit+0x28>)
 8005c6e:	6223      	str	r3, [r4, #32]
 8005c70:	4b04      	ldr	r3, [pc, #16]	; (8005c84 <__sinit+0x2c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f5      	bne.n	8005c64 <__sinit+0xc>
 8005c78:	f7ff ffc4 	bl	8005c04 <global_stdio_init.part.0>
 8005c7c:	e7f2      	b.n	8005c64 <__sinit+0xc>
 8005c7e:	bf00      	nop
 8005c80:	08005bc5 	.word	0x08005bc5
 8005c84:	20000524 	.word	0x20000524

08005c88 <_fwalk_sglue>:
 8005c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c8c:	4607      	mov	r7, r0
 8005c8e:	4688      	mov	r8, r1
 8005c90:	4614      	mov	r4, r2
 8005c92:	2600      	movs	r6, #0
 8005c94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c98:	f1b9 0901 	subs.w	r9, r9, #1
 8005c9c:	d505      	bpl.n	8005caa <_fwalk_sglue+0x22>
 8005c9e:	6824      	ldr	r4, [r4, #0]
 8005ca0:	2c00      	cmp	r4, #0
 8005ca2:	d1f7      	bne.n	8005c94 <_fwalk_sglue+0xc>
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005caa:	89ab      	ldrh	r3, [r5, #12]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d907      	bls.n	8005cc0 <_fwalk_sglue+0x38>
 8005cb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	d003      	beq.n	8005cc0 <_fwalk_sglue+0x38>
 8005cb8:	4629      	mov	r1, r5
 8005cba:	4638      	mov	r0, r7
 8005cbc:	47c0      	blx	r8
 8005cbe:	4306      	orrs	r6, r0
 8005cc0:	3568      	adds	r5, #104	; 0x68
 8005cc2:	e7e9      	b.n	8005c98 <_fwalk_sglue+0x10>

08005cc4 <iprintf>:
 8005cc4:	b40f      	push	{r0, r1, r2, r3}
 8005cc6:	b507      	push	{r0, r1, r2, lr}
 8005cc8:	4906      	ldr	r1, [pc, #24]	; (8005ce4 <iprintf+0x20>)
 8005cca:	ab04      	add	r3, sp, #16
 8005ccc:	6808      	ldr	r0, [r1, #0]
 8005cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cd2:	6881      	ldr	r1, [r0, #8]
 8005cd4:	9301      	str	r3, [sp, #4]
 8005cd6:	f001 fce3 	bl	80076a0 <_vfiprintf_r>
 8005cda:	b003      	add	sp, #12
 8005cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ce0:	b004      	add	sp, #16
 8005ce2:	4770      	bx	lr
 8005ce4:	20000090 	.word	0x20000090

08005ce8 <putchar>:
 8005ce8:	4b02      	ldr	r3, [pc, #8]	; (8005cf4 <putchar+0xc>)
 8005cea:	4601      	mov	r1, r0
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	6882      	ldr	r2, [r0, #8]
 8005cf0:	f001 bf00 	b.w	8007af4 <_putc_r>
 8005cf4:	20000090 	.word	0x20000090

08005cf8 <_puts_r>:
 8005cf8:	6a03      	ldr	r3, [r0, #32]
 8005cfa:	b570      	push	{r4, r5, r6, lr}
 8005cfc:	6884      	ldr	r4, [r0, #8]
 8005cfe:	4605      	mov	r5, r0
 8005d00:	460e      	mov	r6, r1
 8005d02:	b90b      	cbnz	r3, 8005d08 <_puts_r+0x10>
 8005d04:	f7ff ffa8 	bl	8005c58 <__sinit>
 8005d08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d0a:	07db      	lsls	r3, r3, #31
 8005d0c:	d405      	bmi.n	8005d1a <_puts_r+0x22>
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	0598      	lsls	r0, r3, #22
 8005d12:	d402      	bmi.n	8005d1a <_puts_r+0x22>
 8005d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d16:	f000 f9a0 	bl	800605a <__retarget_lock_acquire_recursive>
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	0719      	lsls	r1, r3, #28
 8005d1e:	d513      	bpl.n	8005d48 <_puts_r+0x50>
 8005d20:	6923      	ldr	r3, [r4, #16]
 8005d22:	b18b      	cbz	r3, 8005d48 <_puts_r+0x50>
 8005d24:	3e01      	subs	r6, #1
 8005d26:	68a3      	ldr	r3, [r4, #8]
 8005d28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	60a3      	str	r3, [r4, #8]
 8005d30:	b9e9      	cbnz	r1, 8005d6e <_puts_r+0x76>
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	da2e      	bge.n	8005d94 <_puts_r+0x9c>
 8005d36:	4622      	mov	r2, r4
 8005d38:	210a      	movs	r1, #10
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f000 f87b 	bl	8005e36 <__swbuf_r>
 8005d40:	3001      	adds	r0, #1
 8005d42:	d007      	beq.n	8005d54 <_puts_r+0x5c>
 8005d44:	250a      	movs	r5, #10
 8005d46:	e007      	b.n	8005d58 <_puts_r+0x60>
 8005d48:	4621      	mov	r1, r4
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	f000 f8b0 	bl	8005eb0 <__swsetup_r>
 8005d50:	2800      	cmp	r0, #0
 8005d52:	d0e7      	beq.n	8005d24 <_puts_r+0x2c>
 8005d54:	f04f 35ff 	mov.w	r5, #4294967295
 8005d58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d5a:	07da      	lsls	r2, r3, #31
 8005d5c:	d405      	bmi.n	8005d6a <_puts_r+0x72>
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	059b      	lsls	r3, r3, #22
 8005d62:	d402      	bmi.n	8005d6a <_puts_r+0x72>
 8005d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d66:	f000 f979 	bl	800605c <__retarget_lock_release_recursive>
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	bd70      	pop	{r4, r5, r6, pc}
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	da04      	bge.n	8005d7c <_puts_r+0x84>
 8005d72:	69a2      	ldr	r2, [r4, #24]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	dc06      	bgt.n	8005d86 <_puts_r+0x8e>
 8005d78:	290a      	cmp	r1, #10
 8005d7a:	d004      	beq.n	8005d86 <_puts_r+0x8e>
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	6022      	str	r2, [r4, #0]
 8005d82:	7019      	strb	r1, [r3, #0]
 8005d84:	e7cf      	b.n	8005d26 <_puts_r+0x2e>
 8005d86:	4622      	mov	r2, r4
 8005d88:	4628      	mov	r0, r5
 8005d8a:	f000 f854 	bl	8005e36 <__swbuf_r>
 8005d8e:	3001      	adds	r0, #1
 8005d90:	d1c9      	bne.n	8005d26 <_puts_r+0x2e>
 8005d92:	e7df      	b.n	8005d54 <_puts_r+0x5c>
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	250a      	movs	r5, #10
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	6022      	str	r2, [r4, #0]
 8005d9c:	701d      	strb	r5, [r3, #0]
 8005d9e:	e7db      	b.n	8005d58 <_puts_r+0x60>

08005da0 <puts>:
 8005da0:	4b02      	ldr	r3, [pc, #8]	; (8005dac <puts+0xc>)
 8005da2:	4601      	mov	r1, r0
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	f7ff bfa7 	b.w	8005cf8 <_puts_r>
 8005daa:	bf00      	nop
 8005dac:	20000090 	.word	0x20000090

08005db0 <__sread>:
 8005db0:	b510      	push	{r4, lr}
 8005db2:	460c      	mov	r4, r1
 8005db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db8:	f000 f900 	bl	8005fbc <_read_r>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	bfab      	itete	ge
 8005dc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8005dc4:	181b      	addge	r3, r3, r0
 8005dc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dca:	bfac      	ite	ge
 8005dcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005dce:	81a3      	strhlt	r3, [r4, #12]
 8005dd0:	bd10      	pop	{r4, pc}

08005dd2 <__swrite>:
 8005dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd6:	461f      	mov	r7, r3
 8005dd8:	898b      	ldrh	r3, [r1, #12]
 8005dda:	05db      	lsls	r3, r3, #23
 8005ddc:	4605      	mov	r5, r0
 8005dde:	460c      	mov	r4, r1
 8005de0:	4616      	mov	r6, r2
 8005de2:	d505      	bpl.n	8005df0 <__swrite+0x1e>
 8005de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de8:	2302      	movs	r3, #2
 8005dea:	2200      	movs	r2, #0
 8005dec:	f000 f8d4 	bl	8005f98 <_lseek_r>
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dfa:	81a3      	strh	r3, [r4, #12]
 8005dfc:	4632      	mov	r2, r6
 8005dfe:	463b      	mov	r3, r7
 8005e00:	4628      	mov	r0, r5
 8005e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e06:	f000 b8eb 	b.w	8005fe0 <_write_r>

08005e0a <__sseek>:
 8005e0a:	b510      	push	{r4, lr}
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e12:	f000 f8c1 	bl	8005f98 <_lseek_r>
 8005e16:	1c43      	adds	r3, r0, #1
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	bf15      	itete	ne
 8005e1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e26:	81a3      	strheq	r3, [r4, #12]
 8005e28:	bf18      	it	ne
 8005e2a:	81a3      	strhne	r3, [r4, #12]
 8005e2c:	bd10      	pop	{r4, pc}

08005e2e <__sclose>:
 8005e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e32:	f000 b8a1 	b.w	8005f78 <_close_r>

08005e36 <__swbuf_r>:
 8005e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e38:	460e      	mov	r6, r1
 8005e3a:	4614      	mov	r4, r2
 8005e3c:	4605      	mov	r5, r0
 8005e3e:	b118      	cbz	r0, 8005e48 <__swbuf_r+0x12>
 8005e40:	6a03      	ldr	r3, [r0, #32]
 8005e42:	b90b      	cbnz	r3, 8005e48 <__swbuf_r+0x12>
 8005e44:	f7ff ff08 	bl	8005c58 <__sinit>
 8005e48:	69a3      	ldr	r3, [r4, #24]
 8005e4a:	60a3      	str	r3, [r4, #8]
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	071a      	lsls	r2, r3, #28
 8005e50:	d525      	bpl.n	8005e9e <__swbuf_r+0x68>
 8005e52:	6923      	ldr	r3, [r4, #16]
 8005e54:	b31b      	cbz	r3, 8005e9e <__swbuf_r+0x68>
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	6922      	ldr	r2, [r4, #16]
 8005e5a:	1a98      	subs	r0, r3, r2
 8005e5c:	6963      	ldr	r3, [r4, #20]
 8005e5e:	b2f6      	uxtb	r6, r6
 8005e60:	4283      	cmp	r3, r0
 8005e62:	4637      	mov	r7, r6
 8005e64:	dc04      	bgt.n	8005e70 <__swbuf_r+0x3a>
 8005e66:	4621      	mov	r1, r4
 8005e68:	4628      	mov	r0, r5
 8005e6a:	f001 fdb9 	bl	80079e0 <_fflush_r>
 8005e6e:	b9e0      	cbnz	r0, 8005eaa <__swbuf_r+0x74>
 8005e70:	68a3      	ldr	r3, [r4, #8]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	60a3      	str	r3, [r4, #8]
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	6022      	str	r2, [r4, #0]
 8005e7c:	701e      	strb	r6, [r3, #0]
 8005e7e:	6962      	ldr	r2, [r4, #20]
 8005e80:	1c43      	adds	r3, r0, #1
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d004      	beq.n	8005e90 <__swbuf_r+0x5a>
 8005e86:	89a3      	ldrh	r3, [r4, #12]
 8005e88:	07db      	lsls	r3, r3, #31
 8005e8a:	d506      	bpl.n	8005e9a <__swbuf_r+0x64>
 8005e8c:	2e0a      	cmp	r6, #10
 8005e8e:	d104      	bne.n	8005e9a <__swbuf_r+0x64>
 8005e90:	4621      	mov	r1, r4
 8005e92:	4628      	mov	r0, r5
 8005e94:	f001 fda4 	bl	80079e0 <_fflush_r>
 8005e98:	b938      	cbnz	r0, 8005eaa <__swbuf_r+0x74>
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e9e:	4621      	mov	r1, r4
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f000 f805 	bl	8005eb0 <__swsetup_r>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d0d5      	beq.n	8005e56 <__swbuf_r+0x20>
 8005eaa:	f04f 37ff 	mov.w	r7, #4294967295
 8005eae:	e7f4      	b.n	8005e9a <__swbuf_r+0x64>

08005eb0 <__swsetup_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4b2a      	ldr	r3, [pc, #168]	; (8005f5c <__swsetup_r+0xac>)
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	460c      	mov	r4, r1
 8005eba:	b118      	cbz	r0, 8005ec4 <__swsetup_r+0x14>
 8005ebc:	6a03      	ldr	r3, [r0, #32]
 8005ebe:	b90b      	cbnz	r3, 8005ec4 <__swsetup_r+0x14>
 8005ec0:	f7ff feca 	bl	8005c58 <__sinit>
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005eca:	0718      	lsls	r0, r3, #28
 8005ecc:	d422      	bmi.n	8005f14 <__swsetup_r+0x64>
 8005ece:	06d9      	lsls	r1, r3, #27
 8005ed0:	d407      	bmi.n	8005ee2 <__swsetup_r+0x32>
 8005ed2:	2309      	movs	r3, #9
 8005ed4:	602b      	str	r3, [r5, #0]
 8005ed6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005eda:	81a3      	strh	r3, [r4, #12]
 8005edc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee0:	e034      	b.n	8005f4c <__swsetup_r+0x9c>
 8005ee2:	0758      	lsls	r0, r3, #29
 8005ee4:	d512      	bpl.n	8005f0c <__swsetup_r+0x5c>
 8005ee6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ee8:	b141      	cbz	r1, 8005efc <__swsetup_r+0x4c>
 8005eea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005eee:	4299      	cmp	r1, r3
 8005ef0:	d002      	beq.n	8005ef8 <__swsetup_r+0x48>
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f000 ff2e 	bl	8006d54 <_free_r>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6363      	str	r3, [r4, #52]	; 0x34
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f02:	81a3      	strh	r3, [r4, #12]
 8005f04:	2300      	movs	r3, #0
 8005f06:	6063      	str	r3, [r4, #4]
 8005f08:	6923      	ldr	r3, [r4, #16]
 8005f0a:	6023      	str	r3, [r4, #0]
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	f043 0308 	orr.w	r3, r3, #8
 8005f12:	81a3      	strh	r3, [r4, #12]
 8005f14:	6923      	ldr	r3, [r4, #16]
 8005f16:	b94b      	cbnz	r3, 8005f2c <__swsetup_r+0x7c>
 8005f18:	89a3      	ldrh	r3, [r4, #12]
 8005f1a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f22:	d003      	beq.n	8005f2c <__swsetup_r+0x7c>
 8005f24:	4621      	mov	r1, r4
 8005f26:	4628      	mov	r0, r5
 8005f28:	f001 fda8 	bl	8007a7c <__smakebuf_r>
 8005f2c:	89a0      	ldrh	r0, [r4, #12]
 8005f2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f32:	f010 0301 	ands.w	r3, r0, #1
 8005f36:	d00a      	beq.n	8005f4e <__swsetup_r+0x9e>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60a3      	str	r3, [r4, #8]
 8005f3c:	6963      	ldr	r3, [r4, #20]
 8005f3e:	425b      	negs	r3, r3
 8005f40:	61a3      	str	r3, [r4, #24]
 8005f42:	6923      	ldr	r3, [r4, #16]
 8005f44:	b943      	cbnz	r3, 8005f58 <__swsetup_r+0xa8>
 8005f46:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f4a:	d1c4      	bne.n	8005ed6 <__swsetup_r+0x26>
 8005f4c:	bd38      	pop	{r3, r4, r5, pc}
 8005f4e:	0781      	lsls	r1, r0, #30
 8005f50:	bf58      	it	pl
 8005f52:	6963      	ldrpl	r3, [r4, #20]
 8005f54:	60a3      	str	r3, [r4, #8]
 8005f56:	e7f4      	b.n	8005f42 <__swsetup_r+0x92>
 8005f58:	2000      	movs	r0, #0
 8005f5a:	e7f7      	b.n	8005f4c <__swsetup_r+0x9c>
 8005f5c:	20000090 	.word	0x20000090

08005f60 <memset>:
 8005f60:	4402      	add	r2, r0
 8005f62:	4603      	mov	r3, r0
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d100      	bne.n	8005f6a <memset+0xa>
 8005f68:	4770      	bx	lr
 8005f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f6e:	e7f9      	b.n	8005f64 <memset+0x4>

08005f70 <_localeconv_r>:
 8005f70:	4800      	ldr	r0, [pc, #0]	; (8005f74 <_localeconv_r+0x4>)
 8005f72:	4770      	bx	lr
 8005f74:	20000184 	.word	0x20000184

08005f78 <_close_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	4d06      	ldr	r5, [pc, #24]	; (8005f94 <_close_r+0x1c>)
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	4604      	mov	r4, r0
 8005f80:	4608      	mov	r0, r1
 8005f82:	602b      	str	r3, [r5, #0]
 8005f84:	f7fb ff89 	bl	8001e9a <_close>
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	d102      	bne.n	8005f92 <_close_r+0x1a>
 8005f8c:	682b      	ldr	r3, [r5, #0]
 8005f8e:	b103      	cbz	r3, 8005f92 <_close_r+0x1a>
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	bd38      	pop	{r3, r4, r5, pc}
 8005f94:	20000528 	.word	0x20000528

08005f98 <_lseek_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4d07      	ldr	r5, [pc, #28]	; (8005fb8 <_lseek_r+0x20>)
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	4608      	mov	r0, r1
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	602a      	str	r2, [r5, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f7fb ff9e 	bl	8001ee8 <_lseek>
 8005fac:	1c43      	adds	r3, r0, #1
 8005fae:	d102      	bne.n	8005fb6 <_lseek_r+0x1e>
 8005fb0:	682b      	ldr	r3, [r5, #0]
 8005fb2:	b103      	cbz	r3, 8005fb6 <_lseek_r+0x1e>
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	bd38      	pop	{r3, r4, r5, pc}
 8005fb8:	20000528 	.word	0x20000528

08005fbc <_read_r>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	4d07      	ldr	r5, [pc, #28]	; (8005fdc <_read_r+0x20>)
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	4608      	mov	r0, r1
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	602a      	str	r2, [r5, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f7fb ff2c 	bl	8001e28 <_read>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	d102      	bne.n	8005fda <_read_r+0x1e>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	b103      	cbz	r3, 8005fda <_read_r+0x1e>
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	bd38      	pop	{r3, r4, r5, pc}
 8005fdc:	20000528 	.word	0x20000528

08005fe0 <_write_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4d07      	ldr	r5, [pc, #28]	; (8006000 <_write_r+0x20>)
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	4608      	mov	r0, r1
 8005fe8:	4611      	mov	r1, r2
 8005fea:	2200      	movs	r2, #0
 8005fec:	602a      	str	r2, [r5, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f7fb ff37 	bl	8001e62 <_write>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	d102      	bne.n	8005ffe <_write_r+0x1e>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	b103      	cbz	r3, 8005ffe <_write_r+0x1e>
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	20000528 	.word	0x20000528

08006004 <__errno>:
 8006004:	4b01      	ldr	r3, [pc, #4]	; (800600c <__errno+0x8>)
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	20000090 	.word	0x20000090

08006010 <__libc_init_array>:
 8006010:	b570      	push	{r4, r5, r6, lr}
 8006012:	4d0d      	ldr	r5, [pc, #52]	; (8006048 <__libc_init_array+0x38>)
 8006014:	4c0d      	ldr	r4, [pc, #52]	; (800604c <__libc_init_array+0x3c>)
 8006016:	1b64      	subs	r4, r4, r5
 8006018:	10a4      	asrs	r4, r4, #2
 800601a:	2600      	movs	r6, #0
 800601c:	42a6      	cmp	r6, r4
 800601e:	d109      	bne.n	8006034 <__libc_init_array+0x24>
 8006020:	4d0b      	ldr	r5, [pc, #44]	; (8006050 <__libc_init_array+0x40>)
 8006022:	4c0c      	ldr	r4, [pc, #48]	; (8006054 <__libc_init_array+0x44>)
 8006024:	f002 f892 	bl	800814c <_init>
 8006028:	1b64      	subs	r4, r4, r5
 800602a:	10a4      	asrs	r4, r4, #2
 800602c:	2600      	movs	r6, #0
 800602e:	42a6      	cmp	r6, r4
 8006030:	d105      	bne.n	800603e <__libc_init_array+0x2e>
 8006032:	bd70      	pop	{r4, r5, r6, pc}
 8006034:	f855 3b04 	ldr.w	r3, [r5], #4
 8006038:	4798      	blx	r3
 800603a:	3601      	adds	r6, #1
 800603c:	e7ee      	b.n	800601c <__libc_init_array+0xc>
 800603e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006042:	4798      	blx	r3
 8006044:	3601      	adds	r6, #1
 8006046:	e7f2      	b.n	800602e <__libc_init_array+0x1e>
 8006048:	0800f718 	.word	0x0800f718
 800604c:	0800f718 	.word	0x0800f718
 8006050:	0800f718 	.word	0x0800f718
 8006054:	0800f71c 	.word	0x0800f71c

08006058 <__retarget_lock_init_recursive>:
 8006058:	4770      	bx	lr

0800605a <__retarget_lock_acquire_recursive>:
 800605a:	4770      	bx	lr

0800605c <__retarget_lock_release_recursive>:
 800605c:	4770      	bx	lr

0800605e <quorem>:
 800605e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006062:	6903      	ldr	r3, [r0, #16]
 8006064:	690c      	ldr	r4, [r1, #16]
 8006066:	42a3      	cmp	r3, r4
 8006068:	4607      	mov	r7, r0
 800606a:	db7e      	blt.n	800616a <quorem+0x10c>
 800606c:	3c01      	subs	r4, #1
 800606e:	f101 0814 	add.w	r8, r1, #20
 8006072:	f100 0514 	add.w	r5, r0, #20
 8006076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800607a:	9301      	str	r3, [sp, #4]
 800607c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006080:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006084:	3301      	adds	r3, #1
 8006086:	429a      	cmp	r2, r3
 8006088:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800608c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006090:	fbb2 f6f3 	udiv	r6, r2, r3
 8006094:	d331      	bcc.n	80060fa <quorem+0x9c>
 8006096:	f04f 0e00 	mov.w	lr, #0
 800609a:	4640      	mov	r0, r8
 800609c:	46ac      	mov	ip, r5
 800609e:	46f2      	mov	sl, lr
 80060a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80060a4:	b293      	uxth	r3, r2
 80060a6:	fb06 e303 	mla	r3, r6, r3, lr
 80060aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060ae:	0c1a      	lsrs	r2, r3, #16
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	ebaa 0303 	sub.w	r3, sl, r3
 80060b6:	f8dc a000 	ldr.w	sl, [ip]
 80060ba:	fa13 f38a 	uxtah	r3, r3, sl
 80060be:	fb06 220e 	mla	r2, r6, lr, r2
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	9b00      	ldr	r3, [sp, #0]
 80060c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060ca:	b292      	uxth	r2, r2
 80060cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80060d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80060d8:	4581      	cmp	r9, r0
 80060da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060de:	f84c 3b04 	str.w	r3, [ip], #4
 80060e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060e6:	d2db      	bcs.n	80060a0 <quorem+0x42>
 80060e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80060ec:	b92b      	cbnz	r3, 80060fa <quorem+0x9c>
 80060ee:	9b01      	ldr	r3, [sp, #4]
 80060f0:	3b04      	subs	r3, #4
 80060f2:	429d      	cmp	r5, r3
 80060f4:	461a      	mov	r2, r3
 80060f6:	d32c      	bcc.n	8006152 <quorem+0xf4>
 80060f8:	613c      	str	r4, [r7, #16]
 80060fa:	4638      	mov	r0, r7
 80060fc:	f001 f9a6 	bl	800744c <__mcmp>
 8006100:	2800      	cmp	r0, #0
 8006102:	db22      	blt.n	800614a <quorem+0xec>
 8006104:	3601      	adds	r6, #1
 8006106:	4629      	mov	r1, r5
 8006108:	2000      	movs	r0, #0
 800610a:	f858 2b04 	ldr.w	r2, [r8], #4
 800610e:	f8d1 c000 	ldr.w	ip, [r1]
 8006112:	b293      	uxth	r3, r2
 8006114:	1ac3      	subs	r3, r0, r3
 8006116:	0c12      	lsrs	r2, r2, #16
 8006118:	fa13 f38c 	uxtah	r3, r3, ip
 800611c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006120:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006124:	b29b      	uxth	r3, r3
 8006126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800612a:	45c1      	cmp	r9, r8
 800612c:	f841 3b04 	str.w	r3, [r1], #4
 8006130:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006134:	d2e9      	bcs.n	800610a <quorem+0xac>
 8006136:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800613a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800613e:	b922      	cbnz	r2, 800614a <quorem+0xec>
 8006140:	3b04      	subs	r3, #4
 8006142:	429d      	cmp	r5, r3
 8006144:	461a      	mov	r2, r3
 8006146:	d30a      	bcc.n	800615e <quorem+0x100>
 8006148:	613c      	str	r4, [r7, #16]
 800614a:	4630      	mov	r0, r6
 800614c:	b003      	add	sp, #12
 800614e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006152:	6812      	ldr	r2, [r2, #0]
 8006154:	3b04      	subs	r3, #4
 8006156:	2a00      	cmp	r2, #0
 8006158:	d1ce      	bne.n	80060f8 <quorem+0x9a>
 800615a:	3c01      	subs	r4, #1
 800615c:	e7c9      	b.n	80060f2 <quorem+0x94>
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	3b04      	subs	r3, #4
 8006162:	2a00      	cmp	r2, #0
 8006164:	d1f0      	bne.n	8006148 <quorem+0xea>
 8006166:	3c01      	subs	r4, #1
 8006168:	e7eb      	b.n	8006142 <quorem+0xe4>
 800616a:	2000      	movs	r0, #0
 800616c:	e7ee      	b.n	800614c <quorem+0xee>
	...

08006170 <_dtoa_r>:
 8006170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006174:	ed2d 8b04 	vpush	{d8-d9}
 8006178:	69c5      	ldr	r5, [r0, #28]
 800617a:	b093      	sub	sp, #76	; 0x4c
 800617c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006180:	ec57 6b10 	vmov	r6, r7, d0
 8006184:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006188:	9107      	str	r1, [sp, #28]
 800618a:	4604      	mov	r4, r0
 800618c:	920a      	str	r2, [sp, #40]	; 0x28
 800618e:	930d      	str	r3, [sp, #52]	; 0x34
 8006190:	b975      	cbnz	r5, 80061b0 <_dtoa_r+0x40>
 8006192:	2010      	movs	r0, #16
 8006194:	f000 fe2a 	bl	8006dec <malloc>
 8006198:	4602      	mov	r2, r0
 800619a:	61e0      	str	r0, [r4, #28]
 800619c:	b920      	cbnz	r0, 80061a8 <_dtoa_r+0x38>
 800619e:	4bae      	ldr	r3, [pc, #696]	; (8006458 <_dtoa_r+0x2e8>)
 80061a0:	21ef      	movs	r1, #239	; 0xef
 80061a2:	48ae      	ldr	r0, [pc, #696]	; (800645c <_dtoa_r+0x2ec>)
 80061a4:	f001 fd1a 	bl	8007bdc <__assert_func>
 80061a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80061ac:	6005      	str	r5, [r0, #0]
 80061ae:	60c5      	str	r5, [r0, #12]
 80061b0:	69e3      	ldr	r3, [r4, #28]
 80061b2:	6819      	ldr	r1, [r3, #0]
 80061b4:	b151      	cbz	r1, 80061cc <_dtoa_r+0x5c>
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	604a      	str	r2, [r1, #4]
 80061ba:	2301      	movs	r3, #1
 80061bc:	4093      	lsls	r3, r2
 80061be:	608b      	str	r3, [r1, #8]
 80061c0:	4620      	mov	r0, r4
 80061c2:	f000 ff07 	bl	8006fd4 <_Bfree>
 80061c6:	69e3      	ldr	r3, [r4, #28]
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	1e3b      	subs	r3, r7, #0
 80061ce:	bfbb      	ittet	lt
 80061d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80061d4:	9303      	strlt	r3, [sp, #12]
 80061d6:	2300      	movge	r3, #0
 80061d8:	2201      	movlt	r2, #1
 80061da:	bfac      	ite	ge
 80061dc:	f8c8 3000 	strge.w	r3, [r8]
 80061e0:	f8c8 2000 	strlt.w	r2, [r8]
 80061e4:	4b9e      	ldr	r3, [pc, #632]	; (8006460 <_dtoa_r+0x2f0>)
 80061e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80061ea:	ea33 0308 	bics.w	r3, r3, r8
 80061ee:	d11b      	bne.n	8006228 <_dtoa_r+0xb8>
 80061f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80061f6:	6013      	str	r3, [r2, #0]
 80061f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80061fc:	4333      	orrs	r3, r6
 80061fe:	f000 8593 	beq.w	8006d28 <_dtoa_r+0xbb8>
 8006202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006204:	b963      	cbnz	r3, 8006220 <_dtoa_r+0xb0>
 8006206:	4b97      	ldr	r3, [pc, #604]	; (8006464 <_dtoa_r+0x2f4>)
 8006208:	e027      	b.n	800625a <_dtoa_r+0xea>
 800620a:	4b97      	ldr	r3, [pc, #604]	; (8006468 <_dtoa_r+0x2f8>)
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	3308      	adds	r3, #8
 8006210:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	9800      	ldr	r0, [sp, #0]
 8006216:	b013      	add	sp, #76	; 0x4c
 8006218:	ecbd 8b04 	vpop	{d8-d9}
 800621c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006220:	4b90      	ldr	r3, [pc, #576]	; (8006464 <_dtoa_r+0x2f4>)
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	3303      	adds	r3, #3
 8006226:	e7f3      	b.n	8006210 <_dtoa_r+0xa0>
 8006228:	ed9d 7b02 	vldr	d7, [sp, #8]
 800622c:	2200      	movs	r2, #0
 800622e:	ec51 0b17 	vmov	r0, r1, d7
 8006232:	eeb0 8a47 	vmov.f32	s16, s14
 8006236:	eef0 8a67 	vmov.f32	s17, s15
 800623a:	2300      	movs	r3, #0
 800623c:	f7fa fc4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006240:	4681      	mov	r9, r0
 8006242:	b160      	cbz	r0, 800625e <_dtoa_r+0xee>
 8006244:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006246:	2301      	movs	r3, #1
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 8568 	beq.w	8006d22 <_dtoa_r+0xbb2>
 8006252:	4b86      	ldr	r3, [pc, #536]	; (800646c <_dtoa_r+0x2fc>)
 8006254:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	3b01      	subs	r3, #1
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	e7da      	b.n	8006214 <_dtoa_r+0xa4>
 800625e:	aa10      	add	r2, sp, #64	; 0x40
 8006260:	a911      	add	r1, sp, #68	; 0x44
 8006262:	4620      	mov	r0, r4
 8006264:	eeb0 0a48 	vmov.f32	s0, s16
 8006268:	eef0 0a68 	vmov.f32	s1, s17
 800626c:	f001 f994 	bl	8007598 <__d2b>
 8006270:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006274:	4682      	mov	sl, r0
 8006276:	2d00      	cmp	r5, #0
 8006278:	d07f      	beq.n	800637a <_dtoa_r+0x20a>
 800627a:	ee18 3a90 	vmov	r3, s17
 800627e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006282:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006286:	ec51 0b18 	vmov	r0, r1, d8
 800628a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800628e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006292:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006296:	4619      	mov	r1, r3
 8006298:	2200      	movs	r2, #0
 800629a:	4b75      	ldr	r3, [pc, #468]	; (8006470 <_dtoa_r+0x300>)
 800629c:	f7f9 fffc 	bl	8000298 <__aeabi_dsub>
 80062a0:	a367      	add	r3, pc, #412	; (adr r3, 8006440 <_dtoa_r+0x2d0>)
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	f7fa f9af 	bl	8000608 <__aeabi_dmul>
 80062aa:	a367      	add	r3, pc, #412	; (adr r3, 8006448 <_dtoa_r+0x2d8>)
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f7f9 fff4 	bl	800029c <__adddf3>
 80062b4:	4606      	mov	r6, r0
 80062b6:	4628      	mov	r0, r5
 80062b8:	460f      	mov	r7, r1
 80062ba:	f7fa f93b 	bl	8000534 <__aeabi_i2d>
 80062be:	a364      	add	r3, pc, #400	; (adr r3, 8006450 <_dtoa_r+0x2e0>)
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f7fa f9a0 	bl	8000608 <__aeabi_dmul>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	4630      	mov	r0, r6
 80062ce:	4639      	mov	r1, r7
 80062d0:	f7f9 ffe4 	bl	800029c <__adddf3>
 80062d4:	4606      	mov	r6, r0
 80062d6:	460f      	mov	r7, r1
 80062d8:	f7fa fc46 	bl	8000b68 <__aeabi_d2iz>
 80062dc:	2200      	movs	r2, #0
 80062de:	4683      	mov	fp, r0
 80062e0:	2300      	movs	r3, #0
 80062e2:	4630      	mov	r0, r6
 80062e4:	4639      	mov	r1, r7
 80062e6:	f7fa fc01 	bl	8000aec <__aeabi_dcmplt>
 80062ea:	b148      	cbz	r0, 8006300 <_dtoa_r+0x190>
 80062ec:	4658      	mov	r0, fp
 80062ee:	f7fa f921 	bl	8000534 <__aeabi_i2d>
 80062f2:	4632      	mov	r2, r6
 80062f4:	463b      	mov	r3, r7
 80062f6:	f7fa fbef 	bl	8000ad8 <__aeabi_dcmpeq>
 80062fa:	b908      	cbnz	r0, 8006300 <_dtoa_r+0x190>
 80062fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006300:	f1bb 0f16 	cmp.w	fp, #22
 8006304:	d857      	bhi.n	80063b6 <_dtoa_r+0x246>
 8006306:	4b5b      	ldr	r3, [pc, #364]	; (8006474 <_dtoa_r+0x304>)
 8006308:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	ec51 0b18 	vmov	r0, r1, d8
 8006314:	f7fa fbea 	bl	8000aec <__aeabi_dcmplt>
 8006318:	2800      	cmp	r0, #0
 800631a:	d04e      	beq.n	80063ba <_dtoa_r+0x24a>
 800631c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006320:	2300      	movs	r3, #0
 8006322:	930c      	str	r3, [sp, #48]	; 0x30
 8006324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006326:	1b5b      	subs	r3, r3, r5
 8006328:	1e5a      	subs	r2, r3, #1
 800632a:	bf45      	ittet	mi
 800632c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006330:	9305      	strmi	r3, [sp, #20]
 8006332:	2300      	movpl	r3, #0
 8006334:	2300      	movmi	r3, #0
 8006336:	9206      	str	r2, [sp, #24]
 8006338:	bf54      	ite	pl
 800633a:	9305      	strpl	r3, [sp, #20]
 800633c:	9306      	strmi	r3, [sp, #24]
 800633e:	f1bb 0f00 	cmp.w	fp, #0
 8006342:	db3c      	blt.n	80063be <_dtoa_r+0x24e>
 8006344:	9b06      	ldr	r3, [sp, #24]
 8006346:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800634a:	445b      	add	r3, fp
 800634c:	9306      	str	r3, [sp, #24]
 800634e:	2300      	movs	r3, #0
 8006350:	9308      	str	r3, [sp, #32]
 8006352:	9b07      	ldr	r3, [sp, #28]
 8006354:	2b09      	cmp	r3, #9
 8006356:	d868      	bhi.n	800642a <_dtoa_r+0x2ba>
 8006358:	2b05      	cmp	r3, #5
 800635a:	bfc4      	itt	gt
 800635c:	3b04      	subgt	r3, #4
 800635e:	9307      	strgt	r3, [sp, #28]
 8006360:	9b07      	ldr	r3, [sp, #28]
 8006362:	f1a3 0302 	sub.w	r3, r3, #2
 8006366:	bfcc      	ite	gt
 8006368:	2500      	movgt	r5, #0
 800636a:	2501      	movle	r5, #1
 800636c:	2b03      	cmp	r3, #3
 800636e:	f200 8085 	bhi.w	800647c <_dtoa_r+0x30c>
 8006372:	e8df f003 	tbb	[pc, r3]
 8006376:	3b2e      	.short	0x3b2e
 8006378:	5839      	.short	0x5839
 800637a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800637e:	441d      	add	r5, r3
 8006380:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006384:	2b20      	cmp	r3, #32
 8006386:	bfc1      	itttt	gt
 8006388:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800638c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006390:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006394:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006398:	bfd6      	itet	le
 800639a:	f1c3 0320 	rsble	r3, r3, #32
 800639e:	ea48 0003 	orrgt.w	r0, r8, r3
 80063a2:	fa06 f003 	lslle.w	r0, r6, r3
 80063a6:	f7fa f8b5 	bl	8000514 <__aeabi_ui2d>
 80063aa:	2201      	movs	r2, #1
 80063ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80063b0:	3d01      	subs	r5, #1
 80063b2:	920e      	str	r2, [sp, #56]	; 0x38
 80063b4:	e76f      	b.n	8006296 <_dtoa_r+0x126>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e7b3      	b.n	8006322 <_dtoa_r+0x1b2>
 80063ba:	900c      	str	r0, [sp, #48]	; 0x30
 80063bc:	e7b2      	b.n	8006324 <_dtoa_r+0x1b4>
 80063be:	9b05      	ldr	r3, [sp, #20]
 80063c0:	eba3 030b 	sub.w	r3, r3, fp
 80063c4:	9305      	str	r3, [sp, #20]
 80063c6:	f1cb 0300 	rsb	r3, fp, #0
 80063ca:	9308      	str	r3, [sp, #32]
 80063cc:	2300      	movs	r3, #0
 80063ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80063d0:	e7bf      	b.n	8006352 <_dtoa_r+0x1e2>
 80063d2:	2300      	movs	r3, #0
 80063d4:	9309      	str	r3, [sp, #36]	; 0x24
 80063d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063d8:	2b00      	cmp	r3, #0
 80063da:	dc52      	bgt.n	8006482 <_dtoa_r+0x312>
 80063dc:	2301      	movs	r3, #1
 80063de:	9301      	str	r3, [sp, #4]
 80063e0:	9304      	str	r3, [sp, #16]
 80063e2:	461a      	mov	r2, r3
 80063e4:	920a      	str	r2, [sp, #40]	; 0x28
 80063e6:	e00b      	b.n	8006400 <_dtoa_r+0x290>
 80063e8:	2301      	movs	r3, #1
 80063ea:	e7f3      	b.n	80063d4 <_dtoa_r+0x264>
 80063ec:	2300      	movs	r3, #0
 80063ee:	9309      	str	r3, [sp, #36]	; 0x24
 80063f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f2:	445b      	add	r3, fp
 80063f4:	9301      	str	r3, [sp, #4]
 80063f6:	3301      	adds	r3, #1
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	9304      	str	r3, [sp, #16]
 80063fc:	bfb8      	it	lt
 80063fe:	2301      	movlt	r3, #1
 8006400:	69e0      	ldr	r0, [r4, #28]
 8006402:	2100      	movs	r1, #0
 8006404:	2204      	movs	r2, #4
 8006406:	f102 0614 	add.w	r6, r2, #20
 800640a:	429e      	cmp	r6, r3
 800640c:	d93d      	bls.n	800648a <_dtoa_r+0x31a>
 800640e:	6041      	str	r1, [r0, #4]
 8006410:	4620      	mov	r0, r4
 8006412:	f000 fd9f 	bl	8006f54 <_Balloc>
 8006416:	9000      	str	r0, [sp, #0]
 8006418:	2800      	cmp	r0, #0
 800641a:	d139      	bne.n	8006490 <_dtoa_r+0x320>
 800641c:	4b16      	ldr	r3, [pc, #88]	; (8006478 <_dtoa_r+0x308>)
 800641e:	4602      	mov	r2, r0
 8006420:	f240 11af 	movw	r1, #431	; 0x1af
 8006424:	e6bd      	b.n	80061a2 <_dtoa_r+0x32>
 8006426:	2301      	movs	r3, #1
 8006428:	e7e1      	b.n	80063ee <_dtoa_r+0x27e>
 800642a:	2501      	movs	r5, #1
 800642c:	2300      	movs	r3, #0
 800642e:	9307      	str	r3, [sp, #28]
 8006430:	9509      	str	r5, [sp, #36]	; 0x24
 8006432:	f04f 33ff 	mov.w	r3, #4294967295
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	9304      	str	r3, [sp, #16]
 800643a:	2200      	movs	r2, #0
 800643c:	2312      	movs	r3, #18
 800643e:	e7d1      	b.n	80063e4 <_dtoa_r+0x274>
 8006440:	636f4361 	.word	0x636f4361
 8006444:	3fd287a7 	.word	0x3fd287a7
 8006448:	8b60c8b3 	.word	0x8b60c8b3
 800644c:	3fc68a28 	.word	0x3fc68a28
 8006450:	509f79fb 	.word	0x509f79fb
 8006454:	3fd34413 	.word	0x3fd34413
 8006458:	0800f3ad 	.word	0x0800f3ad
 800645c:	0800f3c4 	.word	0x0800f3c4
 8006460:	7ff00000 	.word	0x7ff00000
 8006464:	0800f3a9 	.word	0x0800f3a9
 8006468:	0800f3a0 	.word	0x0800f3a0
 800646c:	0800f37d 	.word	0x0800f37d
 8006470:	3ff80000 	.word	0x3ff80000
 8006474:	0800f4b0 	.word	0x0800f4b0
 8006478:	0800f41c 	.word	0x0800f41c
 800647c:	2301      	movs	r3, #1
 800647e:	9309      	str	r3, [sp, #36]	; 0x24
 8006480:	e7d7      	b.n	8006432 <_dtoa_r+0x2c2>
 8006482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006484:	9301      	str	r3, [sp, #4]
 8006486:	9304      	str	r3, [sp, #16]
 8006488:	e7ba      	b.n	8006400 <_dtoa_r+0x290>
 800648a:	3101      	adds	r1, #1
 800648c:	0052      	lsls	r2, r2, #1
 800648e:	e7ba      	b.n	8006406 <_dtoa_r+0x296>
 8006490:	69e3      	ldr	r3, [r4, #28]
 8006492:	9a00      	ldr	r2, [sp, #0]
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	9b04      	ldr	r3, [sp, #16]
 8006498:	2b0e      	cmp	r3, #14
 800649a:	f200 80a8 	bhi.w	80065ee <_dtoa_r+0x47e>
 800649e:	2d00      	cmp	r5, #0
 80064a0:	f000 80a5 	beq.w	80065ee <_dtoa_r+0x47e>
 80064a4:	f1bb 0f00 	cmp.w	fp, #0
 80064a8:	dd38      	ble.n	800651c <_dtoa_r+0x3ac>
 80064aa:	4bc0      	ldr	r3, [pc, #768]	; (80067ac <_dtoa_r+0x63c>)
 80064ac:	f00b 020f 	and.w	r2, fp, #15
 80064b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80064b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80064bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80064c0:	d019      	beq.n	80064f6 <_dtoa_r+0x386>
 80064c2:	4bbb      	ldr	r3, [pc, #748]	; (80067b0 <_dtoa_r+0x640>)
 80064c4:	ec51 0b18 	vmov	r0, r1, d8
 80064c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064cc:	f7fa f9c6 	bl	800085c <__aeabi_ddiv>
 80064d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064d4:	f008 080f 	and.w	r8, r8, #15
 80064d8:	2503      	movs	r5, #3
 80064da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80067b0 <_dtoa_r+0x640>
 80064de:	f1b8 0f00 	cmp.w	r8, #0
 80064e2:	d10a      	bne.n	80064fa <_dtoa_r+0x38a>
 80064e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064e8:	4632      	mov	r2, r6
 80064ea:	463b      	mov	r3, r7
 80064ec:	f7fa f9b6 	bl	800085c <__aeabi_ddiv>
 80064f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064f4:	e02b      	b.n	800654e <_dtoa_r+0x3de>
 80064f6:	2502      	movs	r5, #2
 80064f8:	e7ef      	b.n	80064da <_dtoa_r+0x36a>
 80064fa:	f018 0f01 	tst.w	r8, #1
 80064fe:	d008      	beq.n	8006512 <_dtoa_r+0x3a2>
 8006500:	4630      	mov	r0, r6
 8006502:	4639      	mov	r1, r7
 8006504:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006508:	f7fa f87e 	bl	8000608 <__aeabi_dmul>
 800650c:	3501      	adds	r5, #1
 800650e:	4606      	mov	r6, r0
 8006510:	460f      	mov	r7, r1
 8006512:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006516:	f109 0908 	add.w	r9, r9, #8
 800651a:	e7e0      	b.n	80064de <_dtoa_r+0x36e>
 800651c:	f000 809f 	beq.w	800665e <_dtoa_r+0x4ee>
 8006520:	f1cb 0600 	rsb	r6, fp, #0
 8006524:	4ba1      	ldr	r3, [pc, #644]	; (80067ac <_dtoa_r+0x63c>)
 8006526:	4fa2      	ldr	r7, [pc, #648]	; (80067b0 <_dtoa_r+0x640>)
 8006528:	f006 020f 	and.w	r2, r6, #15
 800652c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	ec51 0b18 	vmov	r0, r1, d8
 8006538:	f7fa f866 	bl	8000608 <__aeabi_dmul>
 800653c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006540:	1136      	asrs	r6, r6, #4
 8006542:	2300      	movs	r3, #0
 8006544:	2502      	movs	r5, #2
 8006546:	2e00      	cmp	r6, #0
 8006548:	d17e      	bne.n	8006648 <_dtoa_r+0x4d8>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1d0      	bne.n	80064f0 <_dtoa_r+0x380>
 800654e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006550:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8084 	beq.w	8006662 <_dtoa_r+0x4f2>
 800655a:	4b96      	ldr	r3, [pc, #600]	; (80067b4 <_dtoa_r+0x644>)
 800655c:	2200      	movs	r2, #0
 800655e:	4640      	mov	r0, r8
 8006560:	4649      	mov	r1, r9
 8006562:	f7fa fac3 	bl	8000aec <__aeabi_dcmplt>
 8006566:	2800      	cmp	r0, #0
 8006568:	d07b      	beq.n	8006662 <_dtoa_r+0x4f2>
 800656a:	9b04      	ldr	r3, [sp, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d078      	beq.n	8006662 <_dtoa_r+0x4f2>
 8006570:	9b01      	ldr	r3, [sp, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	dd39      	ble.n	80065ea <_dtoa_r+0x47a>
 8006576:	4b90      	ldr	r3, [pc, #576]	; (80067b8 <_dtoa_r+0x648>)
 8006578:	2200      	movs	r2, #0
 800657a:	4640      	mov	r0, r8
 800657c:	4649      	mov	r1, r9
 800657e:	f7fa f843 	bl	8000608 <__aeabi_dmul>
 8006582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006586:	9e01      	ldr	r6, [sp, #4]
 8006588:	f10b 37ff 	add.w	r7, fp, #4294967295
 800658c:	3501      	adds	r5, #1
 800658e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006592:	4628      	mov	r0, r5
 8006594:	f7f9 ffce 	bl	8000534 <__aeabi_i2d>
 8006598:	4642      	mov	r2, r8
 800659a:	464b      	mov	r3, r9
 800659c:	f7fa f834 	bl	8000608 <__aeabi_dmul>
 80065a0:	4b86      	ldr	r3, [pc, #536]	; (80067bc <_dtoa_r+0x64c>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	f7f9 fe7a 	bl	800029c <__adddf3>
 80065a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80065ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065b0:	9303      	str	r3, [sp, #12]
 80065b2:	2e00      	cmp	r6, #0
 80065b4:	d158      	bne.n	8006668 <_dtoa_r+0x4f8>
 80065b6:	4b82      	ldr	r3, [pc, #520]	; (80067c0 <_dtoa_r+0x650>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	4640      	mov	r0, r8
 80065bc:	4649      	mov	r1, r9
 80065be:	f7f9 fe6b 	bl	8000298 <__aeabi_dsub>
 80065c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065c6:	4680      	mov	r8, r0
 80065c8:	4689      	mov	r9, r1
 80065ca:	f7fa faad 	bl	8000b28 <__aeabi_dcmpgt>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	f040 8296 	bne.w	8006b00 <_dtoa_r+0x990>
 80065d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80065d8:	4640      	mov	r0, r8
 80065da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065de:	4649      	mov	r1, r9
 80065e0:	f7fa fa84 	bl	8000aec <__aeabi_dcmplt>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	f040 8289 	bne.w	8006afc <_dtoa_r+0x98c>
 80065ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80065ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f2c0 814e 	blt.w	8006892 <_dtoa_r+0x722>
 80065f6:	f1bb 0f0e 	cmp.w	fp, #14
 80065fa:	f300 814a 	bgt.w	8006892 <_dtoa_r+0x722>
 80065fe:	4b6b      	ldr	r3, [pc, #428]	; (80067ac <_dtoa_r+0x63c>)
 8006600:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006604:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800660a:	2b00      	cmp	r3, #0
 800660c:	f280 80dc 	bge.w	80067c8 <_dtoa_r+0x658>
 8006610:	9b04      	ldr	r3, [sp, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	f300 80d8 	bgt.w	80067c8 <_dtoa_r+0x658>
 8006618:	f040 826f 	bne.w	8006afa <_dtoa_r+0x98a>
 800661c:	4b68      	ldr	r3, [pc, #416]	; (80067c0 <_dtoa_r+0x650>)
 800661e:	2200      	movs	r2, #0
 8006620:	4640      	mov	r0, r8
 8006622:	4649      	mov	r1, r9
 8006624:	f7f9 fff0 	bl	8000608 <__aeabi_dmul>
 8006628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800662c:	f7fa fa72 	bl	8000b14 <__aeabi_dcmpge>
 8006630:	9e04      	ldr	r6, [sp, #16]
 8006632:	4637      	mov	r7, r6
 8006634:	2800      	cmp	r0, #0
 8006636:	f040 8245 	bne.w	8006ac4 <_dtoa_r+0x954>
 800663a:	9d00      	ldr	r5, [sp, #0]
 800663c:	2331      	movs	r3, #49	; 0x31
 800663e:	f805 3b01 	strb.w	r3, [r5], #1
 8006642:	f10b 0b01 	add.w	fp, fp, #1
 8006646:	e241      	b.n	8006acc <_dtoa_r+0x95c>
 8006648:	07f2      	lsls	r2, r6, #31
 800664a:	d505      	bpl.n	8006658 <_dtoa_r+0x4e8>
 800664c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006650:	f7f9 ffda 	bl	8000608 <__aeabi_dmul>
 8006654:	3501      	adds	r5, #1
 8006656:	2301      	movs	r3, #1
 8006658:	1076      	asrs	r6, r6, #1
 800665a:	3708      	adds	r7, #8
 800665c:	e773      	b.n	8006546 <_dtoa_r+0x3d6>
 800665e:	2502      	movs	r5, #2
 8006660:	e775      	b.n	800654e <_dtoa_r+0x3de>
 8006662:	9e04      	ldr	r6, [sp, #16]
 8006664:	465f      	mov	r7, fp
 8006666:	e792      	b.n	800658e <_dtoa_r+0x41e>
 8006668:	9900      	ldr	r1, [sp, #0]
 800666a:	4b50      	ldr	r3, [pc, #320]	; (80067ac <_dtoa_r+0x63c>)
 800666c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006670:	4431      	add	r1, r6
 8006672:	9102      	str	r1, [sp, #8]
 8006674:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006676:	eeb0 9a47 	vmov.f32	s18, s14
 800667a:	eef0 9a67 	vmov.f32	s19, s15
 800667e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006682:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006686:	2900      	cmp	r1, #0
 8006688:	d044      	beq.n	8006714 <_dtoa_r+0x5a4>
 800668a:	494e      	ldr	r1, [pc, #312]	; (80067c4 <_dtoa_r+0x654>)
 800668c:	2000      	movs	r0, #0
 800668e:	f7fa f8e5 	bl	800085c <__aeabi_ddiv>
 8006692:	ec53 2b19 	vmov	r2, r3, d9
 8006696:	f7f9 fdff 	bl	8000298 <__aeabi_dsub>
 800669a:	9d00      	ldr	r5, [sp, #0]
 800669c:	ec41 0b19 	vmov	d9, r0, r1
 80066a0:	4649      	mov	r1, r9
 80066a2:	4640      	mov	r0, r8
 80066a4:	f7fa fa60 	bl	8000b68 <__aeabi_d2iz>
 80066a8:	4606      	mov	r6, r0
 80066aa:	f7f9 ff43 	bl	8000534 <__aeabi_i2d>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4640      	mov	r0, r8
 80066b4:	4649      	mov	r1, r9
 80066b6:	f7f9 fdef 	bl	8000298 <__aeabi_dsub>
 80066ba:	3630      	adds	r6, #48	; 0x30
 80066bc:	f805 6b01 	strb.w	r6, [r5], #1
 80066c0:	ec53 2b19 	vmov	r2, r3, d9
 80066c4:	4680      	mov	r8, r0
 80066c6:	4689      	mov	r9, r1
 80066c8:	f7fa fa10 	bl	8000aec <__aeabi_dcmplt>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d164      	bne.n	800679a <_dtoa_r+0x62a>
 80066d0:	4642      	mov	r2, r8
 80066d2:	464b      	mov	r3, r9
 80066d4:	4937      	ldr	r1, [pc, #220]	; (80067b4 <_dtoa_r+0x644>)
 80066d6:	2000      	movs	r0, #0
 80066d8:	f7f9 fdde 	bl	8000298 <__aeabi_dsub>
 80066dc:	ec53 2b19 	vmov	r2, r3, d9
 80066e0:	f7fa fa04 	bl	8000aec <__aeabi_dcmplt>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	f040 80b6 	bne.w	8006856 <_dtoa_r+0x6e6>
 80066ea:	9b02      	ldr	r3, [sp, #8]
 80066ec:	429d      	cmp	r5, r3
 80066ee:	f43f af7c 	beq.w	80065ea <_dtoa_r+0x47a>
 80066f2:	4b31      	ldr	r3, [pc, #196]	; (80067b8 <_dtoa_r+0x648>)
 80066f4:	ec51 0b19 	vmov	r0, r1, d9
 80066f8:	2200      	movs	r2, #0
 80066fa:	f7f9 ff85 	bl	8000608 <__aeabi_dmul>
 80066fe:	4b2e      	ldr	r3, [pc, #184]	; (80067b8 <_dtoa_r+0x648>)
 8006700:	ec41 0b19 	vmov	d9, r0, r1
 8006704:	2200      	movs	r2, #0
 8006706:	4640      	mov	r0, r8
 8006708:	4649      	mov	r1, r9
 800670a:	f7f9 ff7d 	bl	8000608 <__aeabi_dmul>
 800670e:	4680      	mov	r8, r0
 8006710:	4689      	mov	r9, r1
 8006712:	e7c5      	b.n	80066a0 <_dtoa_r+0x530>
 8006714:	ec51 0b17 	vmov	r0, r1, d7
 8006718:	f7f9 ff76 	bl	8000608 <__aeabi_dmul>
 800671c:	9b02      	ldr	r3, [sp, #8]
 800671e:	9d00      	ldr	r5, [sp, #0]
 8006720:	930f      	str	r3, [sp, #60]	; 0x3c
 8006722:	ec41 0b19 	vmov	d9, r0, r1
 8006726:	4649      	mov	r1, r9
 8006728:	4640      	mov	r0, r8
 800672a:	f7fa fa1d 	bl	8000b68 <__aeabi_d2iz>
 800672e:	4606      	mov	r6, r0
 8006730:	f7f9 ff00 	bl	8000534 <__aeabi_i2d>
 8006734:	3630      	adds	r6, #48	; 0x30
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4640      	mov	r0, r8
 800673c:	4649      	mov	r1, r9
 800673e:	f7f9 fdab 	bl	8000298 <__aeabi_dsub>
 8006742:	f805 6b01 	strb.w	r6, [r5], #1
 8006746:	9b02      	ldr	r3, [sp, #8]
 8006748:	429d      	cmp	r5, r3
 800674a:	4680      	mov	r8, r0
 800674c:	4689      	mov	r9, r1
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	d124      	bne.n	800679e <_dtoa_r+0x62e>
 8006754:	4b1b      	ldr	r3, [pc, #108]	; (80067c4 <_dtoa_r+0x654>)
 8006756:	ec51 0b19 	vmov	r0, r1, d9
 800675a:	f7f9 fd9f 	bl	800029c <__adddf3>
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	4640      	mov	r0, r8
 8006764:	4649      	mov	r1, r9
 8006766:	f7fa f9df 	bl	8000b28 <__aeabi_dcmpgt>
 800676a:	2800      	cmp	r0, #0
 800676c:	d173      	bne.n	8006856 <_dtoa_r+0x6e6>
 800676e:	ec53 2b19 	vmov	r2, r3, d9
 8006772:	4914      	ldr	r1, [pc, #80]	; (80067c4 <_dtoa_r+0x654>)
 8006774:	2000      	movs	r0, #0
 8006776:	f7f9 fd8f 	bl	8000298 <__aeabi_dsub>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4640      	mov	r0, r8
 8006780:	4649      	mov	r1, r9
 8006782:	f7fa f9b3 	bl	8000aec <__aeabi_dcmplt>
 8006786:	2800      	cmp	r0, #0
 8006788:	f43f af2f 	beq.w	80065ea <_dtoa_r+0x47a>
 800678c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800678e:	1e6b      	subs	r3, r5, #1
 8006790:	930f      	str	r3, [sp, #60]	; 0x3c
 8006792:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006796:	2b30      	cmp	r3, #48	; 0x30
 8006798:	d0f8      	beq.n	800678c <_dtoa_r+0x61c>
 800679a:	46bb      	mov	fp, r7
 800679c:	e04a      	b.n	8006834 <_dtoa_r+0x6c4>
 800679e:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <_dtoa_r+0x648>)
 80067a0:	f7f9 ff32 	bl	8000608 <__aeabi_dmul>
 80067a4:	4680      	mov	r8, r0
 80067a6:	4689      	mov	r9, r1
 80067a8:	e7bd      	b.n	8006726 <_dtoa_r+0x5b6>
 80067aa:	bf00      	nop
 80067ac:	0800f4b0 	.word	0x0800f4b0
 80067b0:	0800f488 	.word	0x0800f488
 80067b4:	3ff00000 	.word	0x3ff00000
 80067b8:	40240000 	.word	0x40240000
 80067bc:	401c0000 	.word	0x401c0000
 80067c0:	40140000 	.word	0x40140000
 80067c4:	3fe00000 	.word	0x3fe00000
 80067c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067cc:	9d00      	ldr	r5, [sp, #0]
 80067ce:	4642      	mov	r2, r8
 80067d0:	464b      	mov	r3, r9
 80067d2:	4630      	mov	r0, r6
 80067d4:	4639      	mov	r1, r7
 80067d6:	f7fa f841 	bl	800085c <__aeabi_ddiv>
 80067da:	f7fa f9c5 	bl	8000b68 <__aeabi_d2iz>
 80067de:	9001      	str	r0, [sp, #4]
 80067e0:	f7f9 fea8 	bl	8000534 <__aeabi_i2d>
 80067e4:	4642      	mov	r2, r8
 80067e6:	464b      	mov	r3, r9
 80067e8:	f7f9 ff0e 	bl	8000608 <__aeabi_dmul>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4630      	mov	r0, r6
 80067f2:	4639      	mov	r1, r7
 80067f4:	f7f9 fd50 	bl	8000298 <__aeabi_dsub>
 80067f8:	9e01      	ldr	r6, [sp, #4]
 80067fa:	9f04      	ldr	r7, [sp, #16]
 80067fc:	3630      	adds	r6, #48	; 0x30
 80067fe:	f805 6b01 	strb.w	r6, [r5], #1
 8006802:	9e00      	ldr	r6, [sp, #0]
 8006804:	1bae      	subs	r6, r5, r6
 8006806:	42b7      	cmp	r7, r6
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	d134      	bne.n	8006878 <_dtoa_r+0x708>
 800680e:	f7f9 fd45 	bl	800029c <__adddf3>
 8006812:	4642      	mov	r2, r8
 8006814:	464b      	mov	r3, r9
 8006816:	4606      	mov	r6, r0
 8006818:	460f      	mov	r7, r1
 800681a:	f7fa f985 	bl	8000b28 <__aeabi_dcmpgt>
 800681e:	b9c8      	cbnz	r0, 8006854 <_dtoa_r+0x6e4>
 8006820:	4642      	mov	r2, r8
 8006822:	464b      	mov	r3, r9
 8006824:	4630      	mov	r0, r6
 8006826:	4639      	mov	r1, r7
 8006828:	f7fa f956 	bl	8000ad8 <__aeabi_dcmpeq>
 800682c:	b110      	cbz	r0, 8006834 <_dtoa_r+0x6c4>
 800682e:	9b01      	ldr	r3, [sp, #4]
 8006830:	07db      	lsls	r3, r3, #31
 8006832:	d40f      	bmi.n	8006854 <_dtoa_r+0x6e4>
 8006834:	4651      	mov	r1, sl
 8006836:	4620      	mov	r0, r4
 8006838:	f000 fbcc 	bl	8006fd4 <_Bfree>
 800683c:	2300      	movs	r3, #0
 800683e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006840:	702b      	strb	r3, [r5, #0]
 8006842:	f10b 0301 	add.w	r3, fp, #1
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800684a:	2b00      	cmp	r3, #0
 800684c:	f43f ace2 	beq.w	8006214 <_dtoa_r+0xa4>
 8006850:	601d      	str	r5, [r3, #0]
 8006852:	e4df      	b.n	8006214 <_dtoa_r+0xa4>
 8006854:	465f      	mov	r7, fp
 8006856:	462b      	mov	r3, r5
 8006858:	461d      	mov	r5, r3
 800685a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800685e:	2a39      	cmp	r2, #57	; 0x39
 8006860:	d106      	bne.n	8006870 <_dtoa_r+0x700>
 8006862:	9a00      	ldr	r2, [sp, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d1f7      	bne.n	8006858 <_dtoa_r+0x6e8>
 8006868:	9900      	ldr	r1, [sp, #0]
 800686a:	2230      	movs	r2, #48	; 0x30
 800686c:	3701      	adds	r7, #1
 800686e:	700a      	strb	r2, [r1, #0]
 8006870:	781a      	ldrb	r2, [r3, #0]
 8006872:	3201      	adds	r2, #1
 8006874:	701a      	strb	r2, [r3, #0]
 8006876:	e790      	b.n	800679a <_dtoa_r+0x62a>
 8006878:	4ba3      	ldr	r3, [pc, #652]	; (8006b08 <_dtoa_r+0x998>)
 800687a:	2200      	movs	r2, #0
 800687c:	f7f9 fec4 	bl	8000608 <__aeabi_dmul>
 8006880:	2200      	movs	r2, #0
 8006882:	2300      	movs	r3, #0
 8006884:	4606      	mov	r6, r0
 8006886:	460f      	mov	r7, r1
 8006888:	f7fa f926 	bl	8000ad8 <__aeabi_dcmpeq>
 800688c:	2800      	cmp	r0, #0
 800688e:	d09e      	beq.n	80067ce <_dtoa_r+0x65e>
 8006890:	e7d0      	b.n	8006834 <_dtoa_r+0x6c4>
 8006892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006894:	2a00      	cmp	r2, #0
 8006896:	f000 80ca 	beq.w	8006a2e <_dtoa_r+0x8be>
 800689a:	9a07      	ldr	r2, [sp, #28]
 800689c:	2a01      	cmp	r2, #1
 800689e:	f300 80ad 	bgt.w	80069fc <_dtoa_r+0x88c>
 80068a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068a4:	2a00      	cmp	r2, #0
 80068a6:	f000 80a5 	beq.w	80069f4 <_dtoa_r+0x884>
 80068aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068ae:	9e08      	ldr	r6, [sp, #32]
 80068b0:	9d05      	ldr	r5, [sp, #20]
 80068b2:	9a05      	ldr	r2, [sp, #20]
 80068b4:	441a      	add	r2, r3
 80068b6:	9205      	str	r2, [sp, #20]
 80068b8:	9a06      	ldr	r2, [sp, #24]
 80068ba:	2101      	movs	r1, #1
 80068bc:	441a      	add	r2, r3
 80068be:	4620      	mov	r0, r4
 80068c0:	9206      	str	r2, [sp, #24]
 80068c2:	f000 fc3d 	bl	8007140 <__i2b>
 80068c6:	4607      	mov	r7, r0
 80068c8:	b165      	cbz	r5, 80068e4 <_dtoa_r+0x774>
 80068ca:	9b06      	ldr	r3, [sp, #24]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	dd09      	ble.n	80068e4 <_dtoa_r+0x774>
 80068d0:	42ab      	cmp	r3, r5
 80068d2:	9a05      	ldr	r2, [sp, #20]
 80068d4:	bfa8      	it	ge
 80068d6:	462b      	movge	r3, r5
 80068d8:	1ad2      	subs	r2, r2, r3
 80068da:	9205      	str	r2, [sp, #20]
 80068dc:	9a06      	ldr	r2, [sp, #24]
 80068de:	1aed      	subs	r5, r5, r3
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	9306      	str	r3, [sp, #24]
 80068e4:	9b08      	ldr	r3, [sp, #32]
 80068e6:	b1f3      	cbz	r3, 8006926 <_dtoa_r+0x7b6>
 80068e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 80a3 	beq.w	8006a36 <_dtoa_r+0x8c6>
 80068f0:	2e00      	cmp	r6, #0
 80068f2:	dd10      	ble.n	8006916 <_dtoa_r+0x7a6>
 80068f4:	4639      	mov	r1, r7
 80068f6:	4632      	mov	r2, r6
 80068f8:	4620      	mov	r0, r4
 80068fa:	f000 fce1 	bl	80072c0 <__pow5mult>
 80068fe:	4652      	mov	r2, sl
 8006900:	4601      	mov	r1, r0
 8006902:	4607      	mov	r7, r0
 8006904:	4620      	mov	r0, r4
 8006906:	f000 fc31 	bl	800716c <__multiply>
 800690a:	4651      	mov	r1, sl
 800690c:	4680      	mov	r8, r0
 800690e:	4620      	mov	r0, r4
 8006910:	f000 fb60 	bl	8006fd4 <_Bfree>
 8006914:	46c2      	mov	sl, r8
 8006916:	9b08      	ldr	r3, [sp, #32]
 8006918:	1b9a      	subs	r2, r3, r6
 800691a:	d004      	beq.n	8006926 <_dtoa_r+0x7b6>
 800691c:	4651      	mov	r1, sl
 800691e:	4620      	mov	r0, r4
 8006920:	f000 fcce 	bl	80072c0 <__pow5mult>
 8006924:	4682      	mov	sl, r0
 8006926:	2101      	movs	r1, #1
 8006928:	4620      	mov	r0, r4
 800692a:	f000 fc09 	bl	8007140 <__i2b>
 800692e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006930:	2b00      	cmp	r3, #0
 8006932:	4606      	mov	r6, r0
 8006934:	f340 8081 	ble.w	8006a3a <_dtoa_r+0x8ca>
 8006938:	461a      	mov	r2, r3
 800693a:	4601      	mov	r1, r0
 800693c:	4620      	mov	r0, r4
 800693e:	f000 fcbf 	bl	80072c0 <__pow5mult>
 8006942:	9b07      	ldr	r3, [sp, #28]
 8006944:	2b01      	cmp	r3, #1
 8006946:	4606      	mov	r6, r0
 8006948:	dd7a      	ble.n	8006a40 <_dtoa_r+0x8d0>
 800694a:	f04f 0800 	mov.w	r8, #0
 800694e:	6933      	ldr	r3, [r6, #16]
 8006950:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006954:	6918      	ldr	r0, [r3, #16]
 8006956:	f000 fba5 	bl	80070a4 <__hi0bits>
 800695a:	f1c0 0020 	rsb	r0, r0, #32
 800695e:	9b06      	ldr	r3, [sp, #24]
 8006960:	4418      	add	r0, r3
 8006962:	f010 001f 	ands.w	r0, r0, #31
 8006966:	f000 8094 	beq.w	8006a92 <_dtoa_r+0x922>
 800696a:	f1c0 0320 	rsb	r3, r0, #32
 800696e:	2b04      	cmp	r3, #4
 8006970:	f340 8085 	ble.w	8006a7e <_dtoa_r+0x90e>
 8006974:	9b05      	ldr	r3, [sp, #20]
 8006976:	f1c0 001c 	rsb	r0, r0, #28
 800697a:	4403      	add	r3, r0
 800697c:	9305      	str	r3, [sp, #20]
 800697e:	9b06      	ldr	r3, [sp, #24]
 8006980:	4403      	add	r3, r0
 8006982:	4405      	add	r5, r0
 8006984:	9306      	str	r3, [sp, #24]
 8006986:	9b05      	ldr	r3, [sp, #20]
 8006988:	2b00      	cmp	r3, #0
 800698a:	dd05      	ble.n	8006998 <_dtoa_r+0x828>
 800698c:	4651      	mov	r1, sl
 800698e:	461a      	mov	r2, r3
 8006990:	4620      	mov	r0, r4
 8006992:	f000 fcef 	bl	8007374 <__lshift>
 8006996:	4682      	mov	sl, r0
 8006998:	9b06      	ldr	r3, [sp, #24]
 800699a:	2b00      	cmp	r3, #0
 800699c:	dd05      	ble.n	80069aa <_dtoa_r+0x83a>
 800699e:	4631      	mov	r1, r6
 80069a0:	461a      	mov	r2, r3
 80069a2:	4620      	mov	r0, r4
 80069a4:	f000 fce6 	bl	8007374 <__lshift>
 80069a8:	4606      	mov	r6, r0
 80069aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d072      	beq.n	8006a96 <_dtoa_r+0x926>
 80069b0:	4631      	mov	r1, r6
 80069b2:	4650      	mov	r0, sl
 80069b4:	f000 fd4a 	bl	800744c <__mcmp>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	da6c      	bge.n	8006a96 <_dtoa_r+0x926>
 80069bc:	2300      	movs	r3, #0
 80069be:	4651      	mov	r1, sl
 80069c0:	220a      	movs	r2, #10
 80069c2:	4620      	mov	r0, r4
 80069c4:	f000 fb28 	bl	8007018 <__multadd>
 80069c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069ce:	4682      	mov	sl, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 81b0 	beq.w	8006d36 <_dtoa_r+0xbc6>
 80069d6:	2300      	movs	r3, #0
 80069d8:	4639      	mov	r1, r7
 80069da:	220a      	movs	r2, #10
 80069dc:	4620      	mov	r0, r4
 80069de:	f000 fb1b 	bl	8007018 <__multadd>
 80069e2:	9b01      	ldr	r3, [sp, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	4607      	mov	r7, r0
 80069e8:	f300 8096 	bgt.w	8006b18 <_dtoa_r+0x9a8>
 80069ec:	9b07      	ldr	r3, [sp, #28]
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	dc59      	bgt.n	8006aa6 <_dtoa_r+0x936>
 80069f2:	e091      	b.n	8006b18 <_dtoa_r+0x9a8>
 80069f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069fa:	e758      	b.n	80068ae <_dtoa_r+0x73e>
 80069fc:	9b04      	ldr	r3, [sp, #16]
 80069fe:	1e5e      	subs	r6, r3, #1
 8006a00:	9b08      	ldr	r3, [sp, #32]
 8006a02:	42b3      	cmp	r3, r6
 8006a04:	bfbf      	itttt	lt
 8006a06:	9b08      	ldrlt	r3, [sp, #32]
 8006a08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006a0a:	9608      	strlt	r6, [sp, #32]
 8006a0c:	1af3      	sublt	r3, r6, r3
 8006a0e:	bfb4      	ite	lt
 8006a10:	18d2      	addlt	r2, r2, r3
 8006a12:	1b9e      	subge	r6, r3, r6
 8006a14:	9b04      	ldr	r3, [sp, #16]
 8006a16:	bfbc      	itt	lt
 8006a18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006a1a:	2600      	movlt	r6, #0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	bfb7      	itett	lt
 8006a20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006a24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006a28:	1a9d      	sublt	r5, r3, r2
 8006a2a:	2300      	movlt	r3, #0
 8006a2c:	e741      	b.n	80068b2 <_dtoa_r+0x742>
 8006a2e:	9e08      	ldr	r6, [sp, #32]
 8006a30:	9d05      	ldr	r5, [sp, #20]
 8006a32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006a34:	e748      	b.n	80068c8 <_dtoa_r+0x758>
 8006a36:	9a08      	ldr	r2, [sp, #32]
 8006a38:	e770      	b.n	800691c <_dtoa_r+0x7ac>
 8006a3a:	9b07      	ldr	r3, [sp, #28]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	dc19      	bgt.n	8006a74 <_dtoa_r+0x904>
 8006a40:	9b02      	ldr	r3, [sp, #8]
 8006a42:	b9bb      	cbnz	r3, 8006a74 <_dtoa_r+0x904>
 8006a44:	9b03      	ldr	r3, [sp, #12]
 8006a46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a4a:	b99b      	cbnz	r3, 8006a74 <_dtoa_r+0x904>
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a52:	0d1b      	lsrs	r3, r3, #20
 8006a54:	051b      	lsls	r3, r3, #20
 8006a56:	b183      	cbz	r3, 8006a7a <_dtoa_r+0x90a>
 8006a58:	9b05      	ldr	r3, [sp, #20]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	9305      	str	r3, [sp, #20]
 8006a5e:	9b06      	ldr	r3, [sp, #24]
 8006a60:	3301      	adds	r3, #1
 8006a62:	9306      	str	r3, [sp, #24]
 8006a64:	f04f 0801 	mov.w	r8, #1
 8006a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f47f af6f 	bne.w	800694e <_dtoa_r+0x7de>
 8006a70:	2001      	movs	r0, #1
 8006a72:	e774      	b.n	800695e <_dtoa_r+0x7ee>
 8006a74:	f04f 0800 	mov.w	r8, #0
 8006a78:	e7f6      	b.n	8006a68 <_dtoa_r+0x8f8>
 8006a7a:	4698      	mov	r8, r3
 8006a7c:	e7f4      	b.n	8006a68 <_dtoa_r+0x8f8>
 8006a7e:	d082      	beq.n	8006986 <_dtoa_r+0x816>
 8006a80:	9a05      	ldr	r2, [sp, #20]
 8006a82:	331c      	adds	r3, #28
 8006a84:	441a      	add	r2, r3
 8006a86:	9205      	str	r2, [sp, #20]
 8006a88:	9a06      	ldr	r2, [sp, #24]
 8006a8a:	441a      	add	r2, r3
 8006a8c:	441d      	add	r5, r3
 8006a8e:	9206      	str	r2, [sp, #24]
 8006a90:	e779      	b.n	8006986 <_dtoa_r+0x816>
 8006a92:	4603      	mov	r3, r0
 8006a94:	e7f4      	b.n	8006a80 <_dtoa_r+0x910>
 8006a96:	9b04      	ldr	r3, [sp, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	dc37      	bgt.n	8006b0c <_dtoa_r+0x99c>
 8006a9c:	9b07      	ldr	r3, [sp, #28]
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	dd34      	ble.n	8006b0c <_dtoa_r+0x99c>
 8006aa2:	9b04      	ldr	r3, [sp, #16]
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	9b01      	ldr	r3, [sp, #4]
 8006aa8:	b963      	cbnz	r3, 8006ac4 <_dtoa_r+0x954>
 8006aaa:	4631      	mov	r1, r6
 8006aac:	2205      	movs	r2, #5
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f000 fab2 	bl	8007018 <__multadd>
 8006ab4:	4601      	mov	r1, r0
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	4650      	mov	r0, sl
 8006aba:	f000 fcc7 	bl	800744c <__mcmp>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	f73f adbb 	bgt.w	800663a <_dtoa_r+0x4ca>
 8006ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ac6:	9d00      	ldr	r5, [sp, #0]
 8006ac8:	ea6f 0b03 	mvn.w	fp, r3
 8006acc:	f04f 0800 	mov.w	r8, #0
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f000 fa7e 	bl	8006fd4 <_Bfree>
 8006ad8:	2f00      	cmp	r7, #0
 8006ada:	f43f aeab 	beq.w	8006834 <_dtoa_r+0x6c4>
 8006ade:	f1b8 0f00 	cmp.w	r8, #0
 8006ae2:	d005      	beq.n	8006af0 <_dtoa_r+0x980>
 8006ae4:	45b8      	cmp	r8, r7
 8006ae6:	d003      	beq.n	8006af0 <_dtoa_r+0x980>
 8006ae8:	4641      	mov	r1, r8
 8006aea:	4620      	mov	r0, r4
 8006aec:	f000 fa72 	bl	8006fd4 <_Bfree>
 8006af0:	4639      	mov	r1, r7
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 fa6e 	bl	8006fd4 <_Bfree>
 8006af8:	e69c      	b.n	8006834 <_dtoa_r+0x6c4>
 8006afa:	2600      	movs	r6, #0
 8006afc:	4637      	mov	r7, r6
 8006afe:	e7e1      	b.n	8006ac4 <_dtoa_r+0x954>
 8006b00:	46bb      	mov	fp, r7
 8006b02:	4637      	mov	r7, r6
 8006b04:	e599      	b.n	800663a <_dtoa_r+0x4ca>
 8006b06:	bf00      	nop
 8006b08:	40240000 	.word	0x40240000
 8006b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 80c8 	beq.w	8006ca4 <_dtoa_r+0xb34>
 8006b14:	9b04      	ldr	r3, [sp, #16]
 8006b16:	9301      	str	r3, [sp, #4]
 8006b18:	2d00      	cmp	r5, #0
 8006b1a:	dd05      	ble.n	8006b28 <_dtoa_r+0x9b8>
 8006b1c:	4639      	mov	r1, r7
 8006b1e:	462a      	mov	r2, r5
 8006b20:	4620      	mov	r0, r4
 8006b22:	f000 fc27 	bl	8007374 <__lshift>
 8006b26:	4607      	mov	r7, r0
 8006b28:	f1b8 0f00 	cmp.w	r8, #0
 8006b2c:	d05b      	beq.n	8006be6 <_dtoa_r+0xa76>
 8006b2e:	6879      	ldr	r1, [r7, #4]
 8006b30:	4620      	mov	r0, r4
 8006b32:	f000 fa0f 	bl	8006f54 <_Balloc>
 8006b36:	4605      	mov	r5, r0
 8006b38:	b928      	cbnz	r0, 8006b46 <_dtoa_r+0x9d6>
 8006b3a:	4b83      	ldr	r3, [pc, #524]	; (8006d48 <_dtoa_r+0xbd8>)
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006b42:	f7ff bb2e 	b.w	80061a2 <_dtoa_r+0x32>
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	3202      	adds	r2, #2
 8006b4a:	0092      	lsls	r2, r2, #2
 8006b4c:	f107 010c 	add.w	r1, r7, #12
 8006b50:	300c      	adds	r0, #12
 8006b52:	f001 f835 	bl	8007bc0 <memcpy>
 8006b56:	2201      	movs	r2, #1
 8006b58:	4629      	mov	r1, r5
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f000 fc0a 	bl	8007374 <__lshift>
 8006b60:	9b00      	ldr	r3, [sp, #0]
 8006b62:	3301      	adds	r3, #1
 8006b64:	9304      	str	r3, [sp, #16]
 8006b66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	9308      	str	r3, [sp, #32]
 8006b6e:	9b02      	ldr	r3, [sp, #8]
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	46b8      	mov	r8, r7
 8006b76:	9306      	str	r3, [sp, #24]
 8006b78:	4607      	mov	r7, r0
 8006b7a:	9b04      	ldr	r3, [sp, #16]
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	4650      	mov	r0, sl
 8006b82:	9301      	str	r3, [sp, #4]
 8006b84:	f7ff fa6b 	bl	800605e <quorem>
 8006b88:	4641      	mov	r1, r8
 8006b8a:	9002      	str	r0, [sp, #8]
 8006b8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b90:	4650      	mov	r0, sl
 8006b92:	f000 fc5b 	bl	800744c <__mcmp>
 8006b96:	463a      	mov	r2, r7
 8006b98:	9005      	str	r0, [sp, #20]
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 fc71 	bl	8007484 <__mdiff>
 8006ba2:	68c2      	ldr	r2, [r0, #12]
 8006ba4:	4605      	mov	r5, r0
 8006ba6:	bb02      	cbnz	r2, 8006bea <_dtoa_r+0xa7a>
 8006ba8:	4601      	mov	r1, r0
 8006baa:	4650      	mov	r0, sl
 8006bac:	f000 fc4e 	bl	800744c <__mcmp>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	9209      	str	r2, [sp, #36]	; 0x24
 8006bb8:	f000 fa0c 	bl	8006fd4 <_Bfree>
 8006bbc:	9b07      	ldr	r3, [sp, #28]
 8006bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bc0:	9d04      	ldr	r5, [sp, #16]
 8006bc2:	ea43 0102 	orr.w	r1, r3, r2
 8006bc6:	9b06      	ldr	r3, [sp, #24]
 8006bc8:	4319      	orrs	r1, r3
 8006bca:	d110      	bne.n	8006bee <_dtoa_r+0xa7e>
 8006bcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006bd0:	d029      	beq.n	8006c26 <_dtoa_r+0xab6>
 8006bd2:	9b05      	ldr	r3, [sp, #20]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	dd02      	ble.n	8006bde <_dtoa_r+0xa6e>
 8006bd8:	9b02      	ldr	r3, [sp, #8]
 8006bda:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006bde:	9b01      	ldr	r3, [sp, #4]
 8006be0:	f883 9000 	strb.w	r9, [r3]
 8006be4:	e774      	b.n	8006ad0 <_dtoa_r+0x960>
 8006be6:	4638      	mov	r0, r7
 8006be8:	e7ba      	b.n	8006b60 <_dtoa_r+0x9f0>
 8006bea:	2201      	movs	r2, #1
 8006bec:	e7e1      	b.n	8006bb2 <_dtoa_r+0xa42>
 8006bee:	9b05      	ldr	r3, [sp, #20]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	db04      	blt.n	8006bfe <_dtoa_r+0xa8e>
 8006bf4:	9907      	ldr	r1, [sp, #28]
 8006bf6:	430b      	orrs	r3, r1
 8006bf8:	9906      	ldr	r1, [sp, #24]
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	d120      	bne.n	8006c40 <_dtoa_r+0xad0>
 8006bfe:	2a00      	cmp	r2, #0
 8006c00:	dded      	ble.n	8006bde <_dtoa_r+0xa6e>
 8006c02:	4651      	mov	r1, sl
 8006c04:	2201      	movs	r2, #1
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 fbb4 	bl	8007374 <__lshift>
 8006c0c:	4631      	mov	r1, r6
 8006c0e:	4682      	mov	sl, r0
 8006c10:	f000 fc1c 	bl	800744c <__mcmp>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	dc03      	bgt.n	8006c20 <_dtoa_r+0xab0>
 8006c18:	d1e1      	bne.n	8006bde <_dtoa_r+0xa6e>
 8006c1a:	f019 0f01 	tst.w	r9, #1
 8006c1e:	d0de      	beq.n	8006bde <_dtoa_r+0xa6e>
 8006c20:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c24:	d1d8      	bne.n	8006bd8 <_dtoa_r+0xa68>
 8006c26:	9a01      	ldr	r2, [sp, #4]
 8006c28:	2339      	movs	r3, #57	; 0x39
 8006c2a:	7013      	strb	r3, [r2, #0]
 8006c2c:	462b      	mov	r3, r5
 8006c2e:	461d      	mov	r5, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006c36:	2a39      	cmp	r2, #57	; 0x39
 8006c38:	d06c      	beq.n	8006d14 <_dtoa_r+0xba4>
 8006c3a:	3201      	adds	r2, #1
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	e747      	b.n	8006ad0 <_dtoa_r+0x960>
 8006c40:	2a00      	cmp	r2, #0
 8006c42:	dd07      	ble.n	8006c54 <_dtoa_r+0xae4>
 8006c44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c48:	d0ed      	beq.n	8006c26 <_dtoa_r+0xab6>
 8006c4a:	9a01      	ldr	r2, [sp, #4]
 8006c4c:	f109 0301 	add.w	r3, r9, #1
 8006c50:	7013      	strb	r3, [r2, #0]
 8006c52:	e73d      	b.n	8006ad0 <_dtoa_r+0x960>
 8006c54:	9b04      	ldr	r3, [sp, #16]
 8006c56:	9a08      	ldr	r2, [sp, #32]
 8006c58:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d043      	beq.n	8006ce8 <_dtoa_r+0xb78>
 8006c60:	4651      	mov	r1, sl
 8006c62:	2300      	movs	r3, #0
 8006c64:	220a      	movs	r2, #10
 8006c66:	4620      	mov	r0, r4
 8006c68:	f000 f9d6 	bl	8007018 <__multadd>
 8006c6c:	45b8      	cmp	r8, r7
 8006c6e:	4682      	mov	sl, r0
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	f04f 020a 	mov.w	r2, #10
 8006c78:	4641      	mov	r1, r8
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	d107      	bne.n	8006c8e <_dtoa_r+0xb1e>
 8006c7e:	f000 f9cb 	bl	8007018 <__multadd>
 8006c82:	4680      	mov	r8, r0
 8006c84:	4607      	mov	r7, r0
 8006c86:	9b04      	ldr	r3, [sp, #16]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	9304      	str	r3, [sp, #16]
 8006c8c:	e775      	b.n	8006b7a <_dtoa_r+0xa0a>
 8006c8e:	f000 f9c3 	bl	8007018 <__multadd>
 8006c92:	4639      	mov	r1, r7
 8006c94:	4680      	mov	r8, r0
 8006c96:	2300      	movs	r3, #0
 8006c98:	220a      	movs	r2, #10
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f000 f9bc 	bl	8007018 <__multadd>
 8006ca0:	4607      	mov	r7, r0
 8006ca2:	e7f0      	b.n	8006c86 <_dtoa_r+0xb16>
 8006ca4:	9b04      	ldr	r3, [sp, #16]
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	9d00      	ldr	r5, [sp, #0]
 8006caa:	4631      	mov	r1, r6
 8006cac:	4650      	mov	r0, sl
 8006cae:	f7ff f9d6 	bl	800605e <quorem>
 8006cb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006cb6:	9b00      	ldr	r3, [sp, #0]
 8006cb8:	f805 9b01 	strb.w	r9, [r5], #1
 8006cbc:	1aea      	subs	r2, r5, r3
 8006cbe:	9b01      	ldr	r3, [sp, #4]
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	dd07      	ble.n	8006cd4 <_dtoa_r+0xb64>
 8006cc4:	4651      	mov	r1, sl
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	220a      	movs	r2, #10
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 f9a4 	bl	8007018 <__multadd>
 8006cd0:	4682      	mov	sl, r0
 8006cd2:	e7ea      	b.n	8006caa <_dtoa_r+0xb3a>
 8006cd4:	9b01      	ldr	r3, [sp, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	bfc8      	it	gt
 8006cda:	461d      	movgt	r5, r3
 8006cdc:	9b00      	ldr	r3, [sp, #0]
 8006cde:	bfd8      	it	le
 8006ce0:	2501      	movle	r5, #1
 8006ce2:	441d      	add	r5, r3
 8006ce4:	f04f 0800 	mov.w	r8, #0
 8006ce8:	4651      	mov	r1, sl
 8006cea:	2201      	movs	r2, #1
 8006cec:	4620      	mov	r0, r4
 8006cee:	f000 fb41 	bl	8007374 <__lshift>
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4682      	mov	sl, r0
 8006cf6:	f000 fba9 	bl	800744c <__mcmp>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	dc96      	bgt.n	8006c2c <_dtoa_r+0xabc>
 8006cfe:	d102      	bne.n	8006d06 <_dtoa_r+0xb96>
 8006d00:	f019 0f01 	tst.w	r9, #1
 8006d04:	d192      	bne.n	8006c2c <_dtoa_r+0xabc>
 8006d06:	462b      	mov	r3, r5
 8006d08:	461d      	mov	r5, r3
 8006d0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d0e:	2a30      	cmp	r2, #48	; 0x30
 8006d10:	d0fa      	beq.n	8006d08 <_dtoa_r+0xb98>
 8006d12:	e6dd      	b.n	8006ad0 <_dtoa_r+0x960>
 8006d14:	9a00      	ldr	r2, [sp, #0]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d189      	bne.n	8006c2e <_dtoa_r+0xabe>
 8006d1a:	f10b 0b01 	add.w	fp, fp, #1
 8006d1e:	2331      	movs	r3, #49	; 0x31
 8006d20:	e796      	b.n	8006c50 <_dtoa_r+0xae0>
 8006d22:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <_dtoa_r+0xbdc>)
 8006d24:	f7ff ba99 	b.w	800625a <_dtoa_r+0xea>
 8006d28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f47f aa6d 	bne.w	800620a <_dtoa_r+0x9a>
 8006d30:	4b07      	ldr	r3, [pc, #28]	; (8006d50 <_dtoa_r+0xbe0>)
 8006d32:	f7ff ba92 	b.w	800625a <_dtoa_r+0xea>
 8006d36:	9b01      	ldr	r3, [sp, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	dcb5      	bgt.n	8006ca8 <_dtoa_r+0xb38>
 8006d3c:	9b07      	ldr	r3, [sp, #28]
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	f73f aeb1 	bgt.w	8006aa6 <_dtoa_r+0x936>
 8006d44:	e7b0      	b.n	8006ca8 <_dtoa_r+0xb38>
 8006d46:	bf00      	nop
 8006d48:	0800f41c 	.word	0x0800f41c
 8006d4c:	0800f37c 	.word	0x0800f37c
 8006d50:	0800f3a0 	.word	0x0800f3a0

08006d54 <_free_r>:
 8006d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d56:	2900      	cmp	r1, #0
 8006d58:	d044      	beq.n	8006de4 <_free_r+0x90>
 8006d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d5e:	9001      	str	r0, [sp, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f1a1 0404 	sub.w	r4, r1, #4
 8006d66:	bfb8      	it	lt
 8006d68:	18e4      	addlt	r4, r4, r3
 8006d6a:	f000 f8e7 	bl	8006f3c <__malloc_lock>
 8006d6e:	4a1e      	ldr	r2, [pc, #120]	; (8006de8 <_free_r+0x94>)
 8006d70:	9801      	ldr	r0, [sp, #4]
 8006d72:	6813      	ldr	r3, [r2, #0]
 8006d74:	b933      	cbnz	r3, 8006d84 <_free_r+0x30>
 8006d76:	6063      	str	r3, [r4, #4]
 8006d78:	6014      	str	r4, [r2, #0]
 8006d7a:	b003      	add	sp, #12
 8006d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d80:	f000 b8e2 	b.w	8006f48 <__malloc_unlock>
 8006d84:	42a3      	cmp	r3, r4
 8006d86:	d908      	bls.n	8006d9a <_free_r+0x46>
 8006d88:	6825      	ldr	r5, [r4, #0]
 8006d8a:	1961      	adds	r1, r4, r5
 8006d8c:	428b      	cmp	r3, r1
 8006d8e:	bf01      	itttt	eq
 8006d90:	6819      	ldreq	r1, [r3, #0]
 8006d92:	685b      	ldreq	r3, [r3, #4]
 8006d94:	1949      	addeq	r1, r1, r5
 8006d96:	6021      	streq	r1, [r4, #0]
 8006d98:	e7ed      	b.n	8006d76 <_free_r+0x22>
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	b10b      	cbz	r3, 8006da4 <_free_r+0x50>
 8006da0:	42a3      	cmp	r3, r4
 8006da2:	d9fa      	bls.n	8006d9a <_free_r+0x46>
 8006da4:	6811      	ldr	r1, [r2, #0]
 8006da6:	1855      	adds	r5, r2, r1
 8006da8:	42a5      	cmp	r5, r4
 8006daa:	d10b      	bne.n	8006dc4 <_free_r+0x70>
 8006dac:	6824      	ldr	r4, [r4, #0]
 8006dae:	4421      	add	r1, r4
 8006db0:	1854      	adds	r4, r2, r1
 8006db2:	42a3      	cmp	r3, r4
 8006db4:	6011      	str	r1, [r2, #0]
 8006db6:	d1e0      	bne.n	8006d7a <_free_r+0x26>
 8006db8:	681c      	ldr	r4, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	6053      	str	r3, [r2, #4]
 8006dbe:	440c      	add	r4, r1
 8006dc0:	6014      	str	r4, [r2, #0]
 8006dc2:	e7da      	b.n	8006d7a <_free_r+0x26>
 8006dc4:	d902      	bls.n	8006dcc <_free_r+0x78>
 8006dc6:	230c      	movs	r3, #12
 8006dc8:	6003      	str	r3, [r0, #0]
 8006dca:	e7d6      	b.n	8006d7a <_free_r+0x26>
 8006dcc:	6825      	ldr	r5, [r4, #0]
 8006dce:	1961      	adds	r1, r4, r5
 8006dd0:	428b      	cmp	r3, r1
 8006dd2:	bf04      	itt	eq
 8006dd4:	6819      	ldreq	r1, [r3, #0]
 8006dd6:	685b      	ldreq	r3, [r3, #4]
 8006dd8:	6063      	str	r3, [r4, #4]
 8006dda:	bf04      	itt	eq
 8006ddc:	1949      	addeq	r1, r1, r5
 8006dde:	6021      	streq	r1, [r4, #0]
 8006de0:	6054      	str	r4, [r2, #4]
 8006de2:	e7ca      	b.n	8006d7a <_free_r+0x26>
 8006de4:	b003      	add	sp, #12
 8006de6:	bd30      	pop	{r4, r5, pc}
 8006de8:	20000530 	.word	0x20000530

08006dec <malloc>:
 8006dec:	4b02      	ldr	r3, [pc, #8]	; (8006df8 <malloc+0xc>)
 8006dee:	4601      	mov	r1, r0
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	f000 b823 	b.w	8006e3c <_malloc_r>
 8006df6:	bf00      	nop
 8006df8:	20000090 	.word	0x20000090

08006dfc <sbrk_aligned>:
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	4e0e      	ldr	r6, [pc, #56]	; (8006e38 <sbrk_aligned+0x3c>)
 8006e00:	460c      	mov	r4, r1
 8006e02:	6831      	ldr	r1, [r6, #0]
 8006e04:	4605      	mov	r5, r0
 8006e06:	b911      	cbnz	r1, 8006e0e <sbrk_aligned+0x12>
 8006e08:	f000 feca 	bl	8007ba0 <_sbrk_r>
 8006e0c:	6030      	str	r0, [r6, #0]
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4628      	mov	r0, r5
 8006e12:	f000 fec5 	bl	8007ba0 <_sbrk_r>
 8006e16:	1c43      	adds	r3, r0, #1
 8006e18:	d00a      	beq.n	8006e30 <sbrk_aligned+0x34>
 8006e1a:	1cc4      	adds	r4, r0, #3
 8006e1c:	f024 0403 	bic.w	r4, r4, #3
 8006e20:	42a0      	cmp	r0, r4
 8006e22:	d007      	beq.n	8006e34 <sbrk_aligned+0x38>
 8006e24:	1a21      	subs	r1, r4, r0
 8006e26:	4628      	mov	r0, r5
 8006e28:	f000 feba 	bl	8007ba0 <_sbrk_r>
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	d101      	bne.n	8006e34 <sbrk_aligned+0x38>
 8006e30:	f04f 34ff 	mov.w	r4, #4294967295
 8006e34:	4620      	mov	r0, r4
 8006e36:	bd70      	pop	{r4, r5, r6, pc}
 8006e38:	20000534 	.word	0x20000534

08006e3c <_malloc_r>:
 8006e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e40:	1ccd      	adds	r5, r1, #3
 8006e42:	f025 0503 	bic.w	r5, r5, #3
 8006e46:	3508      	adds	r5, #8
 8006e48:	2d0c      	cmp	r5, #12
 8006e4a:	bf38      	it	cc
 8006e4c:	250c      	movcc	r5, #12
 8006e4e:	2d00      	cmp	r5, #0
 8006e50:	4607      	mov	r7, r0
 8006e52:	db01      	blt.n	8006e58 <_malloc_r+0x1c>
 8006e54:	42a9      	cmp	r1, r5
 8006e56:	d905      	bls.n	8006e64 <_malloc_r+0x28>
 8006e58:	230c      	movs	r3, #12
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	2600      	movs	r6, #0
 8006e5e:	4630      	mov	r0, r6
 8006e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f38 <_malloc_r+0xfc>
 8006e68:	f000 f868 	bl	8006f3c <__malloc_lock>
 8006e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e70:	461c      	mov	r4, r3
 8006e72:	bb5c      	cbnz	r4, 8006ecc <_malloc_r+0x90>
 8006e74:	4629      	mov	r1, r5
 8006e76:	4638      	mov	r0, r7
 8006e78:	f7ff ffc0 	bl	8006dfc <sbrk_aligned>
 8006e7c:	1c43      	adds	r3, r0, #1
 8006e7e:	4604      	mov	r4, r0
 8006e80:	d155      	bne.n	8006f2e <_malloc_r+0xf2>
 8006e82:	f8d8 4000 	ldr.w	r4, [r8]
 8006e86:	4626      	mov	r6, r4
 8006e88:	2e00      	cmp	r6, #0
 8006e8a:	d145      	bne.n	8006f18 <_malloc_r+0xdc>
 8006e8c:	2c00      	cmp	r4, #0
 8006e8e:	d048      	beq.n	8006f22 <_malloc_r+0xe6>
 8006e90:	6823      	ldr	r3, [r4, #0]
 8006e92:	4631      	mov	r1, r6
 8006e94:	4638      	mov	r0, r7
 8006e96:	eb04 0903 	add.w	r9, r4, r3
 8006e9a:	f000 fe81 	bl	8007ba0 <_sbrk_r>
 8006e9e:	4581      	cmp	r9, r0
 8006ea0:	d13f      	bne.n	8006f22 <_malloc_r+0xe6>
 8006ea2:	6821      	ldr	r1, [r4, #0]
 8006ea4:	1a6d      	subs	r5, r5, r1
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	4638      	mov	r0, r7
 8006eaa:	f7ff ffa7 	bl	8006dfc <sbrk_aligned>
 8006eae:	3001      	adds	r0, #1
 8006eb0:	d037      	beq.n	8006f22 <_malloc_r+0xe6>
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	442b      	add	r3, r5
 8006eb6:	6023      	str	r3, [r4, #0]
 8006eb8:	f8d8 3000 	ldr.w	r3, [r8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d038      	beq.n	8006f32 <_malloc_r+0xf6>
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	42a2      	cmp	r2, r4
 8006ec4:	d12b      	bne.n	8006f1e <_malloc_r+0xe2>
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	605a      	str	r2, [r3, #4]
 8006eca:	e00f      	b.n	8006eec <_malloc_r+0xb0>
 8006ecc:	6822      	ldr	r2, [r4, #0]
 8006ece:	1b52      	subs	r2, r2, r5
 8006ed0:	d41f      	bmi.n	8006f12 <_malloc_r+0xd6>
 8006ed2:	2a0b      	cmp	r2, #11
 8006ed4:	d917      	bls.n	8006f06 <_malloc_r+0xca>
 8006ed6:	1961      	adds	r1, r4, r5
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	6025      	str	r5, [r4, #0]
 8006edc:	bf18      	it	ne
 8006ede:	6059      	strne	r1, [r3, #4]
 8006ee0:	6863      	ldr	r3, [r4, #4]
 8006ee2:	bf08      	it	eq
 8006ee4:	f8c8 1000 	streq.w	r1, [r8]
 8006ee8:	5162      	str	r2, [r4, r5]
 8006eea:	604b      	str	r3, [r1, #4]
 8006eec:	4638      	mov	r0, r7
 8006eee:	f104 060b 	add.w	r6, r4, #11
 8006ef2:	f000 f829 	bl	8006f48 <__malloc_unlock>
 8006ef6:	f026 0607 	bic.w	r6, r6, #7
 8006efa:	1d23      	adds	r3, r4, #4
 8006efc:	1af2      	subs	r2, r6, r3
 8006efe:	d0ae      	beq.n	8006e5e <_malloc_r+0x22>
 8006f00:	1b9b      	subs	r3, r3, r6
 8006f02:	50a3      	str	r3, [r4, r2]
 8006f04:	e7ab      	b.n	8006e5e <_malloc_r+0x22>
 8006f06:	42a3      	cmp	r3, r4
 8006f08:	6862      	ldr	r2, [r4, #4]
 8006f0a:	d1dd      	bne.n	8006ec8 <_malloc_r+0x8c>
 8006f0c:	f8c8 2000 	str.w	r2, [r8]
 8006f10:	e7ec      	b.n	8006eec <_malloc_r+0xb0>
 8006f12:	4623      	mov	r3, r4
 8006f14:	6864      	ldr	r4, [r4, #4]
 8006f16:	e7ac      	b.n	8006e72 <_malloc_r+0x36>
 8006f18:	4634      	mov	r4, r6
 8006f1a:	6876      	ldr	r6, [r6, #4]
 8006f1c:	e7b4      	b.n	8006e88 <_malloc_r+0x4c>
 8006f1e:	4613      	mov	r3, r2
 8006f20:	e7cc      	b.n	8006ebc <_malloc_r+0x80>
 8006f22:	230c      	movs	r3, #12
 8006f24:	603b      	str	r3, [r7, #0]
 8006f26:	4638      	mov	r0, r7
 8006f28:	f000 f80e 	bl	8006f48 <__malloc_unlock>
 8006f2c:	e797      	b.n	8006e5e <_malloc_r+0x22>
 8006f2e:	6025      	str	r5, [r4, #0]
 8006f30:	e7dc      	b.n	8006eec <_malloc_r+0xb0>
 8006f32:	605b      	str	r3, [r3, #4]
 8006f34:	deff      	udf	#255	; 0xff
 8006f36:	bf00      	nop
 8006f38:	20000530 	.word	0x20000530

08006f3c <__malloc_lock>:
 8006f3c:	4801      	ldr	r0, [pc, #4]	; (8006f44 <__malloc_lock+0x8>)
 8006f3e:	f7ff b88c 	b.w	800605a <__retarget_lock_acquire_recursive>
 8006f42:	bf00      	nop
 8006f44:	2000052c 	.word	0x2000052c

08006f48 <__malloc_unlock>:
 8006f48:	4801      	ldr	r0, [pc, #4]	; (8006f50 <__malloc_unlock+0x8>)
 8006f4a:	f7ff b887 	b.w	800605c <__retarget_lock_release_recursive>
 8006f4e:	bf00      	nop
 8006f50:	2000052c 	.word	0x2000052c

08006f54 <_Balloc>:
 8006f54:	b570      	push	{r4, r5, r6, lr}
 8006f56:	69c6      	ldr	r6, [r0, #28]
 8006f58:	4604      	mov	r4, r0
 8006f5a:	460d      	mov	r5, r1
 8006f5c:	b976      	cbnz	r6, 8006f7c <_Balloc+0x28>
 8006f5e:	2010      	movs	r0, #16
 8006f60:	f7ff ff44 	bl	8006dec <malloc>
 8006f64:	4602      	mov	r2, r0
 8006f66:	61e0      	str	r0, [r4, #28]
 8006f68:	b920      	cbnz	r0, 8006f74 <_Balloc+0x20>
 8006f6a:	4b18      	ldr	r3, [pc, #96]	; (8006fcc <_Balloc+0x78>)
 8006f6c:	4818      	ldr	r0, [pc, #96]	; (8006fd0 <_Balloc+0x7c>)
 8006f6e:	216b      	movs	r1, #107	; 0x6b
 8006f70:	f000 fe34 	bl	8007bdc <__assert_func>
 8006f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f78:	6006      	str	r6, [r0, #0]
 8006f7a:	60c6      	str	r6, [r0, #12]
 8006f7c:	69e6      	ldr	r6, [r4, #28]
 8006f7e:	68f3      	ldr	r3, [r6, #12]
 8006f80:	b183      	cbz	r3, 8006fa4 <_Balloc+0x50>
 8006f82:	69e3      	ldr	r3, [r4, #28]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f8a:	b9b8      	cbnz	r0, 8006fbc <_Balloc+0x68>
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	fa01 f605 	lsl.w	r6, r1, r5
 8006f92:	1d72      	adds	r2, r6, #5
 8006f94:	0092      	lsls	r2, r2, #2
 8006f96:	4620      	mov	r0, r4
 8006f98:	f000 fe3e 	bl	8007c18 <_calloc_r>
 8006f9c:	b160      	cbz	r0, 8006fb8 <_Balloc+0x64>
 8006f9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fa2:	e00e      	b.n	8006fc2 <_Balloc+0x6e>
 8006fa4:	2221      	movs	r2, #33	; 0x21
 8006fa6:	2104      	movs	r1, #4
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f000 fe35 	bl	8007c18 <_calloc_r>
 8006fae:	69e3      	ldr	r3, [r4, #28]
 8006fb0:	60f0      	str	r0, [r6, #12]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e4      	bne.n	8006f82 <_Balloc+0x2e>
 8006fb8:	2000      	movs	r0, #0
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
 8006fbc:	6802      	ldr	r2, [r0, #0]
 8006fbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fc8:	e7f7      	b.n	8006fba <_Balloc+0x66>
 8006fca:	bf00      	nop
 8006fcc:	0800f3ad 	.word	0x0800f3ad
 8006fd0:	0800f42d 	.word	0x0800f42d

08006fd4 <_Bfree>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	69c6      	ldr	r6, [r0, #28]
 8006fd8:	4605      	mov	r5, r0
 8006fda:	460c      	mov	r4, r1
 8006fdc:	b976      	cbnz	r6, 8006ffc <_Bfree+0x28>
 8006fde:	2010      	movs	r0, #16
 8006fe0:	f7ff ff04 	bl	8006dec <malloc>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	61e8      	str	r0, [r5, #28]
 8006fe8:	b920      	cbnz	r0, 8006ff4 <_Bfree+0x20>
 8006fea:	4b09      	ldr	r3, [pc, #36]	; (8007010 <_Bfree+0x3c>)
 8006fec:	4809      	ldr	r0, [pc, #36]	; (8007014 <_Bfree+0x40>)
 8006fee:	218f      	movs	r1, #143	; 0x8f
 8006ff0:	f000 fdf4 	bl	8007bdc <__assert_func>
 8006ff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ff8:	6006      	str	r6, [r0, #0]
 8006ffa:	60c6      	str	r6, [r0, #12]
 8006ffc:	b13c      	cbz	r4, 800700e <_Bfree+0x3a>
 8006ffe:	69eb      	ldr	r3, [r5, #28]
 8007000:	6862      	ldr	r2, [r4, #4]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007008:	6021      	str	r1, [r4, #0]
 800700a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800700e:	bd70      	pop	{r4, r5, r6, pc}
 8007010:	0800f3ad 	.word	0x0800f3ad
 8007014:	0800f42d 	.word	0x0800f42d

08007018 <__multadd>:
 8007018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701c:	690d      	ldr	r5, [r1, #16]
 800701e:	4607      	mov	r7, r0
 8007020:	460c      	mov	r4, r1
 8007022:	461e      	mov	r6, r3
 8007024:	f101 0c14 	add.w	ip, r1, #20
 8007028:	2000      	movs	r0, #0
 800702a:	f8dc 3000 	ldr.w	r3, [ip]
 800702e:	b299      	uxth	r1, r3
 8007030:	fb02 6101 	mla	r1, r2, r1, r6
 8007034:	0c1e      	lsrs	r6, r3, #16
 8007036:	0c0b      	lsrs	r3, r1, #16
 8007038:	fb02 3306 	mla	r3, r2, r6, r3
 800703c:	b289      	uxth	r1, r1
 800703e:	3001      	adds	r0, #1
 8007040:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007044:	4285      	cmp	r5, r0
 8007046:	f84c 1b04 	str.w	r1, [ip], #4
 800704a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800704e:	dcec      	bgt.n	800702a <__multadd+0x12>
 8007050:	b30e      	cbz	r6, 8007096 <__multadd+0x7e>
 8007052:	68a3      	ldr	r3, [r4, #8]
 8007054:	42ab      	cmp	r3, r5
 8007056:	dc19      	bgt.n	800708c <__multadd+0x74>
 8007058:	6861      	ldr	r1, [r4, #4]
 800705a:	4638      	mov	r0, r7
 800705c:	3101      	adds	r1, #1
 800705e:	f7ff ff79 	bl	8006f54 <_Balloc>
 8007062:	4680      	mov	r8, r0
 8007064:	b928      	cbnz	r0, 8007072 <__multadd+0x5a>
 8007066:	4602      	mov	r2, r0
 8007068:	4b0c      	ldr	r3, [pc, #48]	; (800709c <__multadd+0x84>)
 800706a:	480d      	ldr	r0, [pc, #52]	; (80070a0 <__multadd+0x88>)
 800706c:	21ba      	movs	r1, #186	; 0xba
 800706e:	f000 fdb5 	bl	8007bdc <__assert_func>
 8007072:	6922      	ldr	r2, [r4, #16]
 8007074:	3202      	adds	r2, #2
 8007076:	f104 010c 	add.w	r1, r4, #12
 800707a:	0092      	lsls	r2, r2, #2
 800707c:	300c      	adds	r0, #12
 800707e:	f000 fd9f 	bl	8007bc0 <memcpy>
 8007082:	4621      	mov	r1, r4
 8007084:	4638      	mov	r0, r7
 8007086:	f7ff ffa5 	bl	8006fd4 <_Bfree>
 800708a:	4644      	mov	r4, r8
 800708c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007090:	3501      	adds	r5, #1
 8007092:	615e      	str	r6, [r3, #20]
 8007094:	6125      	str	r5, [r4, #16]
 8007096:	4620      	mov	r0, r4
 8007098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800709c:	0800f41c 	.word	0x0800f41c
 80070a0:	0800f42d 	.word	0x0800f42d

080070a4 <__hi0bits>:
 80070a4:	0c03      	lsrs	r3, r0, #16
 80070a6:	041b      	lsls	r3, r3, #16
 80070a8:	b9d3      	cbnz	r3, 80070e0 <__hi0bits+0x3c>
 80070aa:	0400      	lsls	r0, r0, #16
 80070ac:	2310      	movs	r3, #16
 80070ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80070b2:	bf04      	itt	eq
 80070b4:	0200      	lsleq	r0, r0, #8
 80070b6:	3308      	addeq	r3, #8
 80070b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80070bc:	bf04      	itt	eq
 80070be:	0100      	lsleq	r0, r0, #4
 80070c0:	3304      	addeq	r3, #4
 80070c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80070c6:	bf04      	itt	eq
 80070c8:	0080      	lsleq	r0, r0, #2
 80070ca:	3302      	addeq	r3, #2
 80070cc:	2800      	cmp	r0, #0
 80070ce:	db05      	blt.n	80070dc <__hi0bits+0x38>
 80070d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80070d4:	f103 0301 	add.w	r3, r3, #1
 80070d8:	bf08      	it	eq
 80070da:	2320      	moveq	r3, #32
 80070dc:	4618      	mov	r0, r3
 80070de:	4770      	bx	lr
 80070e0:	2300      	movs	r3, #0
 80070e2:	e7e4      	b.n	80070ae <__hi0bits+0xa>

080070e4 <__lo0bits>:
 80070e4:	6803      	ldr	r3, [r0, #0]
 80070e6:	f013 0207 	ands.w	r2, r3, #7
 80070ea:	d00c      	beq.n	8007106 <__lo0bits+0x22>
 80070ec:	07d9      	lsls	r1, r3, #31
 80070ee:	d422      	bmi.n	8007136 <__lo0bits+0x52>
 80070f0:	079a      	lsls	r2, r3, #30
 80070f2:	bf49      	itett	mi
 80070f4:	085b      	lsrmi	r3, r3, #1
 80070f6:	089b      	lsrpl	r3, r3, #2
 80070f8:	6003      	strmi	r3, [r0, #0]
 80070fa:	2201      	movmi	r2, #1
 80070fc:	bf5c      	itt	pl
 80070fe:	6003      	strpl	r3, [r0, #0]
 8007100:	2202      	movpl	r2, #2
 8007102:	4610      	mov	r0, r2
 8007104:	4770      	bx	lr
 8007106:	b299      	uxth	r1, r3
 8007108:	b909      	cbnz	r1, 800710e <__lo0bits+0x2a>
 800710a:	0c1b      	lsrs	r3, r3, #16
 800710c:	2210      	movs	r2, #16
 800710e:	b2d9      	uxtb	r1, r3
 8007110:	b909      	cbnz	r1, 8007116 <__lo0bits+0x32>
 8007112:	3208      	adds	r2, #8
 8007114:	0a1b      	lsrs	r3, r3, #8
 8007116:	0719      	lsls	r1, r3, #28
 8007118:	bf04      	itt	eq
 800711a:	091b      	lsreq	r3, r3, #4
 800711c:	3204      	addeq	r2, #4
 800711e:	0799      	lsls	r1, r3, #30
 8007120:	bf04      	itt	eq
 8007122:	089b      	lsreq	r3, r3, #2
 8007124:	3202      	addeq	r2, #2
 8007126:	07d9      	lsls	r1, r3, #31
 8007128:	d403      	bmi.n	8007132 <__lo0bits+0x4e>
 800712a:	085b      	lsrs	r3, r3, #1
 800712c:	f102 0201 	add.w	r2, r2, #1
 8007130:	d003      	beq.n	800713a <__lo0bits+0x56>
 8007132:	6003      	str	r3, [r0, #0]
 8007134:	e7e5      	b.n	8007102 <__lo0bits+0x1e>
 8007136:	2200      	movs	r2, #0
 8007138:	e7e3      	b.n	8007102 <__lo0bits+0x1e>
 800713a:	2220      	movs	r2, #32
 800713c:	e7e1      	b.n	8007102 <__lo0bits+0x1e>
	...

08007140 <__i2b>:
 8007140:	b510      	push	{r4, lr}
 8007142:	460c      	mov	r4, r1
 8007144:	2101      	movs	r1, #1
 8007146:	f7ff ff05 	bl	8006f54 <_Balloc>
 800714a:	4602      	mov	r2, r0
 800714c:	b928      	cbnz	r0, 800715a <__i2b+0x1a>
 800714e:	4b05      	ldr	r3, [pc, #20]	; (8007164 <__i2b+0x24>)
 8007150:	4805      	ldr	r0, [pc, #20]	; (8007168 <__i2b+0x28>)
 8007152:	f240 1145 	movw	r1, #325	; 0x145
 8007156:	f000 fd41 	bl	8007bdc <__assert_func>
 800715a:	2301      	movs	r3, #1
 800715c:	6144      	str	r4, [r0, #20]
 800715e:	6103      	str	r3, [r0, #16]
 8007160:	bd10      	pop	{r4, pc}
 8007162:	bf00      	nop
 8007164:	0800f41c 	.word	0x0800f41c
 8007168:	0800f42d 	.word	0x0800f42d

0800716c <__multiply>:
 800716c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007170:	4691      	mov	r9, r2
 8007172:	690a      	ldr	r2, [r1, #16]
 8007174:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007178:	429a      	cmp	r2, r3
 800717a:	bfb8      	it	lt
 800717c:	460b      	movlt	r3, r1
 800717e:	460c      	mov	r4, r1
 8007180:	bfbc      	itt	lt
 8007182:	464c      	movlt	r4, r9
 8007184:	4699      	movlt	r9, r3
 8007186:	6927      	ldr	r7, [r4, #16]
 8007188:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800718c:	68a3      	ldr	r3, [r4, #8]
 800718e:	6861      	ldr	r1, [r4, #4]
 8007190:	eb07 060a 	add.w	r6, r7, sl
 8007194:	42b3      	cmp	r3, r6
 8007196:	b085      	sub	sp, #20
 8007198:	bfb8      	it	lt
 800719a:	3101      	addlt	r1, #1
 800719c:	f7ff feda 	bl	8006f54 <_Balloc>
 80071a0:	b930      	cbnz	r0, 80071b0 <__multiply+0x44>
 80071a2:	4602      	mov	r2, r0
 80071a4:	4b44      	ldr	r3, [pc, #272]	; (80072b8 <__multiply+0x14c>)
 80071a6:	4845      	ldr	r0, [pc, #276]	; (80072bc <__multiply+0x150>)
 80071a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80071ac:	f000 fd16 	bl	8007bdc <__assert_func>
 80071b0:	f100 0514 	add.w	r5, r0, #20
 80071b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071b8:	462b      	mov	r3, r5
 80071ba:	2200      	movs	r2, #0
 80071bc:	4543      	cmp	r3, r8
 80071be:	d321      	bcc.n	8007204 <__multiply+0x98>
 80071c0:	f104 0314 	add.w	r3, r4, #20
 80071c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071c8:	f109 0314 	add.w	r3, r9, #20
 80071cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071d0:	9202      	str	r2, [sp, #8]
 80071d2:	1b3a      	subs	r2, r7, r4
 80071d4:	3a15      	subs	r2, #21
 80071d6:	f022 0203 	bic.w	r2, r2, #3
 80071da:	3204      	adds	r2, #4
 80071dc:	f104 0115 	add.w	r1, r4, #21
 80071e0:	428f      	cmp	r7, r1
 80071e2:	bf38      	it	cc
 80071e4:	2204      	movcc	r2, #4
 80071e6:	9201      	str	r2, [sp, #4]
 80071e8:	9a02      	ldr	r2, [sp, #8]
 80071ea:	9303      	str	r3, [sp, #12]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d80c      	bhi.n	800720a <__multiply+0x9e>
 80071f0:	2e00      	cmp	r6, #0
 80071f2:	dd03      	ble.n	80071fc <__multiply+0x90>
 80071f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d05b      	beq.n	80072b4 <__multiply+0x148>
 80071fc:	6106      	str	r6, [r0, #16]
 80071fe:	b005      	add	sp, #20
 8007200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007204:	f843 2b04 	str.w	r2, [r3], #4
 8007208:	e7d8      	b.n	80071bc <__multiply+0x50>
 800720a:	f8b3 a000 	ldrh.w	sl, [r3]
 800720e:	f1ba 0f00 	cmp.w	sl, #0
 8007212:	d024      	beq.n	800725e <__multiply+0xf2>
 8007214:	f104 0e14 	add.w	lr, r4, #20
 8007218:	46a9      	mov	r9, r5
 800721a:	f04f 0c00 	mov.w	ip, #0
 800721e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007222:	f8d9 1000 	ldr.w	r1, [r9]
 8007226:	fa1f fb82 	uxth.w	fp, r2
 800722a:	b289      	uxth	r1, r1
 800722c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007230:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007234:	f8d9 2000 	ldr.w	r2, [r9]
 8007238:	4461      	add	r1, ip
 800723a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800723e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007242:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007246:	b289      	uxth	r1, r1
 8007248:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800724c:	4577      	cmp	r7, lr
 800724e:	f849 1b04 	str.w	r1, [r9], #4
 8007252:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007256:	d8e2      	bhi.n	800721e <__multiply+0xb2>
 8007258:	9a01      	ldr	r2, [sp, #4]
 800725a:	f845 c002 	str.w	ip, [r5, r2]
 800725e:	9a03      	ldr	r2, [sp, #12]
 8007260:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007264:	3304      	adds	r3, #4
 8007266:	f1b9 0f00 	cmp.w	r9, #0
 800726a:	d021      	beq.n	80072b0 <__multiply+0x144>
 800726c:	6829      	ldr	r1, [r5, #0]
 800726e:	f104 0c14 	add.w	ip, r4, #20
 8007272:	46ae      	mov	lr, r5
 8007274:	f04f 0a00 	mov.w	sl, #0
 8007278:	f8bc b000 	ldrh.w	fp, [ip]
 800727c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007280:	fb09 220b 	mla	r2, r9, fp, r2
 8007284:	4452      	add	r2, sl
 8007286:	b289      	uxth	r1, r1
 8007288:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800728c:	f84e 1b04 	str.w	r1, [lr], #4
 8007290:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007294:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007298:	f8be 1000 	ldrh.w	r1, [lr]
 800729c:	fb09 110a 	mla	r1, r9, sl, r1
 80072a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80072a4:	4567      	cmp	r7, ip
 80072a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072aa:	d8e5      	bhi.n	8007278 <__multiply+0x10c>
 80072ac:	9a01      	ldr	r2, [sp, #4]
 80072ae:	50a9      	str	r1, [r5, r2]
 80072b0:	3504      	adds	r5, #4
 80072b2:	e799      	b.n	80071e8 <__multiply+0x7c>
 80072b4:	3e01      	subs	r6, #1
 80072b6:	e79b      	b.n	80071f0 <__multiply+0x84>
 80072b8:	0800f41c 	.word	0x0800f41c
 80072bc:	0800f42d 	.word	0x0800f42d

080072c0 <__pow5mult>:
 80072c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072c4:	4615      	mov	r5, r2
 80072c6:	f012 0203 	ands.w	r2, r2, #3
 80072ca:	4606      	mov	r6, r0
 80072cc:	460f      	mov	r7, r1
 80072ce:	d007      	beq.n	80072e0 <__pow5mult+0x20>
 80072d0:	4c25      	ldr	r4, [pc, #148]	; (8007368 <__pow5mult+0xa8>)
 80072d2:	3a01      	subs	r2, #1
 80072d4:	2300      	movs	r3, #0
 80072d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072da:	f7ff fe9d 	bl	8007018 <__multadd>
 80072de:	4607      	mov	r7, r0
 80072e0:	10ad      	asrs	r5, r5, #2
 80072e2:	d03d      	beq.n	8007360 <__pow5mult+0xa0>
 80072e4:	69f4      	ldr	r4, [r6, #28]
 80072e6:	b97c      	cbnz	r4, 8007308 <__pow5mult+0x48>
 80072e8:	2010      	movs	r0, #16
 80072ea:	f7ff fd7f 	bl	8006dec <malloc>
 80072ee:	4602      	mov	r2, r0
 80072f0:	61f0      	str	r0, [r6, #28]
 80072f2:	b928      	cbnz	r0, 8007300 <__pow5mult+0x40>
 80072f4:	4b1d      	ldr	r3, [pc, #116]	; (800736c <__pow5mult+0xac>)
 80072f6:	481e      	ldr	r0, [pc, #120]	; (8007370 <__pow5mult+0xb0>)
 80072f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80072fc:	f000 fc6e 	bl	8007bdc <__assert_func>
 8007300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007304:	6004      	str	r4, [r0, #0]
 8007306:	60c4      	str	r4, [r0, #12]
 8007308:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800730c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007310:	b94c      	cbnz	r4, 8007326 <__pow5mult+0x66>
 8007312:	f240 2171 	movw	r1, #625	; 0x271
 8007316:	4630      	mov	r0, r6
 8007318:	f7ff ff12 	bl	8007140 <__i2b>
 800731c:	2300      	movs	r3, #0
 800731e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007322:	4604      	mov	r4, r0
 8007324:	6003      	str	r3, [r0, #0]
 8007326:	f04f 0900 	mov.w	r9, #0
 800732a:	07eb      	lsls	r3, r5, #31
 800732c:	d50a      	bpl.n	8007344 <__pow5mult+0x84>
 800732e:	4639      	mov	r1, r7
 8007330:	4622      	mov	r2, r4
 8007332:	4630      	mov	r0, r6
 8007334:	f7ff ff1a 	bl	800716c <__multiply>
 8007338:	4639      	mov	r1, r7
 800733a:	4680      	mov	r8, r0
 800733c:	4630      	mov	r0, r6
 800733e:	f7ff fe49 	bl	8006fd4 <_Bfree>
 8007342:	4647      	mov	r7, r8
 8007344:	106d      	asrs	r5, r5, #1
 8007346:	d00b      	beq.n	8007360 <__pow5mult+0xa0>
 8007348:	6820      	ldr	r0, [r4, #0]
 800734a:	b938      	cbnz	r0, 800735c <__pow5mult+0x9c>
 800734c:	4622      	mov	r2, r4
 800734e:	4621      	mov	r1, r4
 8007350:	4630      	mov	r0, r6
 8007352:	f7ff ff0b 	bl	800716c <__multiply>
 8007356:	6020      	str	r0, [r4, #0]
 8007358:	f8c0 9000 	str.w	r9, [r0]
 800735c:	4604      	mov	r4, r0
 800735e:	e7e4      	b.n	800732a <__pow5mult+0x6a>
 8007360:	4638      	mov	r0, r7
 8007362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007366:	bf00      	nop
 8007368:	0800f578 	.word	0x0800f578
 800736c:	0800f3ad 	.word	0x0800f3ad
 8007370:	0800f42d 	.word	0x0800f42d

08007374 <__lshift>:
 8007374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007378:	460c      	mov	r4, r1
 800737a:	6849      	ldr	r1, [r1, #4]
 800737c:	6923      	ldr	r3, [r4, #16]
 800737e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007382:	68a3      	ldr	r3, [r4, #8]
 8007384:	4607      	mov	r7, r0
 8007386:	4691      	mov	r9, r2
 8007388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800738c:	f108 0601 	add.w	r6, r8, #1
 8007390:	42b3      	cmp	r3, r6
 8007392:	db0b      	blt.n	80073ac <__lshift+0x38>
 8007394:	4638      	mov	r0, r7
 8007396:	f7ff fddd 	bl	8006f54 <_Balloc>
 800739a:	4605      	mov	r5, r0
 800739c:	b948      	cbnz	r0, 80073b2 <__lshift+0x3e>
 800739e:	4602      	mov	r2, r0
 80073a0:	4b28      	ldr	r3, [pc, #160]	; (8007444 <__lshift+0xd0>)
 80073a2:	4829      	ldr	r0, [pc, #164]	; (8007448 <__lshift+0xd4>)
 80073a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80073a8:	f000 fc18 	bl	8007bdc <__assert_func>
 80073ac:	3101      	adds	r1, #1
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	e7ee      	b.n	8007390 <__lshift+0x1c>
 80073b2:	2300      	movs	r3, #0
 80073b4:	f100 0114 	add.w	r1, r0, #20
 80073b8:	f100 0210 	add.w	r2, r0, #16
 80073bc:	4618      	mov	r0, r3
 80073be:	4553      	cmp	r3, sl
 80073c0:	db33      	blt.n	800742a <__lshift+0xb6>
 80073c2:	6920      	ldr	r0, [r4, #16]
 80073c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073c8:	f104 0314 	add.w	r3, r4, #20
 80073cc:	f019 091f 	ands.w	r9, r9, #31
 80073d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073d8:	d02b      	beq.n	8007432 <__lshift+0xbe>
 80073da:	f1c9 0e20 	rsb	lr, r9, #32
 80073de:	468a      	mov	sl, r1
 80073e0:	2200      	movs	r2, #0
 80073e2:	6818      	ldr	r0, [r3, #0]
 80073e4:	fa00 f009 	lsl.w	r0, r0, r9
 80073e8:	4310      	orrs	r0, r2
 80073ea:	f84a 0b04 	str.w	r0, [sl], #4
 80073ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80073f2:	459c      	cmp	ip, r3
 80073f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80073f8:	d8f3      	bhi.n	80073e2 <__lshift+0x6e>
 80073fa:	ebac 0304 	sub.w	r3, ip, r4
 80073fe:	3b15      	subs	r3, #21
 8007400:	f023 0303 	bic.w	r3, r3, #3
 8007404:	3304      	adds	r3, #4
 8007406:	f104 0015 	add.w	r0, r4, #21
 800740a:	4584      	cmp	ip, r0
 800740c:	bf38      	it	cc
 800740e:	2304      	movcc	r3, #4
 8007410:	50ca      	str	r2, [r1, r3]
 8007412:	b10a      	cbz	r2, 8007418 <__lshift+0xa4>
 8007414:	f108 0602 	add.w	r6, r8, #2
 8007418:	3e01      	subs	r6, #1
 800741a:	4638      	mov	r0, r7
 800741c:	612e      	str	r6, [r5, #16]
 800741e:	4621      	mov	r1, r4
 8007420:	f7ff fdd8 	bl	8006fd4 <_Bfree>
 8007424:	4628      	mov	r0, r5
 8007426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800742a:	f842 0f04 	str.w	r0, [r2, #4]!
 800742e:	3301      	adds	r3, #1
 8007430:	e7c5      	b.n	80073be <__lshift+0x4a>
 8007432:	3904      	subs	r1, #4
 8007434:	f853 2b04 	ldr.w	r2, [r3], #4
 8007438:	f841 2f04 	str.w	r2, [r1, #4]!
 800743c:	459c      	cmp	ip, r3
 800743e:	d8f9      	bhi.n	8007434 <__lshift+0xc0>
 8007440:	e7ea      	b.n	8007418 <__lshift+0xa4>
 8007442:	bf00      	nop
 8007444:	0800f41c 	.word	0x0800f41c
 8007448:	0800f42d 	.word	0x0800f42d

0800744c <__mcmp>:
 800744c:	b530      	push	{r4, r5, lr}
 800744e:	6902      	ldr	r2, [r0, #16]
 8007450:	690c      	ldr	r4, [r1, #16]
 8007452:	1b12      	subs	r2, r2, r4
 8007454:	d10e      	bne.n	8007474 <__mcmp+0x28>
 8007456:	f100 0314 	add.w	r3, r0, #20
 800745a:	3114      	adds	r1, #20
 800745c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007460:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007464:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007468:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800746c:	42a5      	cmp	r5, r4
 800746e:	d003      	beq.n	8007478 <__mcmp+0x2c>
 8007470:	d305      	bcc.n	800747e <__mcmp+0x32>
 8007472:	2201      	movs	r2, #1
 8007474:	4610      	mov	r0, r2
 8007476:	bd30      	pop	{r4, r5, pc}
 8007478:	4283      	cmp	r3, r0
 800747a:	d3f3      	bcc.n	8007464 <__mcmp+0x18>
 800747c:	e7fa      	b.n	8007474 <__mcmp+0x28>
 800747e:	f04f 32ff 	mov.w	r2, #4294967295
 8007482:	e7f7      	b.n	8007474 <__mcmp+0x28>

08007484 <__mdiff>:
 8007484:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007488:	460c      	mov	r4, r1
 800748a:	4606      	mov	r6, r0
 800748c:	4611      	mov	r1, r2
 800748e:	4620      	mov	r0, r4
 8007490:	4690      	mov	r8, r2
 8007492:	f7ff ffdb 	bl	800744c <__mcmp>
 8007496:	1e05      	subs	r5, r0, #0
 8007498:	d110      	bne.n	80074bc <__mdiff+0x38>
 800749a:	4629      	mov	r1, r5
 800749c:	4630      	mov	r0, r6
 800749e:	f7ff fd59 	bl	8006f54 <_Balloc>
 80074a2:	b930      	cbnz	r0, 80074b2 <__mdiff+0x2e>
 80074a4:	4b3a      	ldr	r3, [pc, #232]	; (8007590 <__mdiff+0x10c>)
 80074a6:	4602      	mov	r2, r0
 80074a8:	f240 2137 	movw	r1, #567	; 0x237
 80074ac:	4839      	ldr	r0, [pc, #228]	; (8007594 <__mdiff+0x110>)
 80074ae:	f000 fb95 	bl	8007bdc <__assert_func>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074bc:	bfa4      	itt	ge
 80074be:	4643      	movge	r3, r8
 80074c0:	46a0      	movge	r8, r4
 80074c2:	4630      	mov	r0, r6
 80074c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80074c8:	bfa6      	itte	ge
 80074ca:	461c      	movge	r4, r3
 80074cc:	2500      	movge	r5, #0
 80074ce:	2501      	movlt	r5, #1
 80074d0:	f7ff fd40 	bl	8006f54 <_Balloc>
 80074d4:	b920      	cbnz	r0, 80074e0 <__mdiff+0x5c>
 80074d6:	4b2e      	ldr	r3, [pc, #184]	; (8007590 <__mdiff+0x10c>)
 80074d8:	4602      	mov	r2, r0
 80074da:	f240 2145 	movw	r1, #581	; 0x245
 80074de:	e7e5      	b.n	80074ac <__mdiff+0x28>
 80074e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80074e4:	6926      	ldr	r6, [r4, #16]
 80074e6:	60c5      	str	r5, [r0, #12]
 80074e8:	f104 0914 	add.w	r9, r4, #20
 80074ec:	f108 0514 	add.w	r5, r8, #20
 80074f0:	f100 0e14 	add.w	lr, r0, #20
 80074f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80074f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80074fc:	f108 0210 	add.w	r2, r8, #16
 8007500:	46f2      	mov	sl, lr
 8007502:	2100      	movs	r1, #0
 8007504:	f859 3b04 	ldr.w	r3, [r9], #4
 8007508:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800750c:	fa11 f88b 	uxtah	r8, r1, fp
 8007510:	b299      	uxth	r1, r3
 8007512:	0c1b      	lsrs	r3, r3, #16
 8007514:	eba8 0801 	sub.w	r8, r8, r1
 8007518:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800751c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007520:	fa1f f888 	uxth.w	r8, r8
 8007524:	1419      	asrs	r1, r3, #16
 8007526:	454e      	cmp	r6, r9
 8007528:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800752c:	f84a 3b04 	str.w	r3, [sl], #4
 8007530:	d8e8      	bhi.n	8007504 <__mdiff+0x80>
 8007532:	1b33      	subs	r3, r6, r4
 8007534:	3b15      	subs	r3, #21
 8007536:	f023 0303 	bic.w	r3, r3, #3
 800753a:	3304      	adds	r3, #4
 800753c:	3415      	adds	r4, #21
 800753e:	42a6      	cmp	r6, r4
 8007540:	bf38      	it	cc
 8007542:	2304      	movcc	r3, #4
 8007544:	441d      	add	r5, r3
 8007546:	4473      	add	r3, lr
 8007548:	469e      	mov	lr, r3
 800754a:	462e      	mov	r6, r5
 800754c:	4566      	cmp	r6, ip
 800754e:	d30e      	bcc.n	800756e <__mdiff+0xea>
 8007550:	f10c 0203 	add.w	r2, ip, #3
 8007554:	1b52      	subs	r2, r2, r5
 8007556:	f022 0203 	bic.w	r2, r2, #3
 800755a:	3d03      	subs	r5, #3
 800755c:	45ac      	cmp	ip, r5
 800755e:	bf38      	it	cc
 8007560:	2200      	movcc	r2, #0
 8007562:	4413      	add	r3, r2
 8007564:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007568:	b17a      	cbz	r2, 800758a <__mdiff+0x106>
 800756a:	6107      	str	r7, [r0, #16]
 800756c:	e7a4      	b.n	80074b8 <__mdiff+0x34>
 800756e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007572:	fa11 f288 	uxtah	r2, r1, r8
 8007576:	1414      	asrs	r4, r2, #16
 8007578:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800757c:	b292      	uxth	r2, r2
 800757e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007582:	f84e 2b04 	str.w	r2, [lr], #4
 8007586:	1421      	asrs	r1, r4, #16
 8007588:	e7e0      	b.n	800754c <__mdiff+0xc8>
 800758a:	3f01      	subs	r7, #1
 800758c:	e7ea      	b.n	8007564 <__mdiff+0xe0>
 800758e:	bf00      	nop
 8007590:	0800f41c 	.word	0x0800f41c
 8007594:	0800f42d 	.word	0x0800f42d

08007598 <__d2b>:
 8007598:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800759c:	460f      	mov	r7, r1
 800759e:	2101      	movs	r1, #1
 80075a0:	ec59 8b10 	vmov	r8, r9, d0
 80075a4:	4616      	mov	r6, r2
 80075a6:	f7ff fcd5 	bl	8006f54 <_Balloc>
 80075aa:	4604      	mov	r4, r0
 80075ac:	b930      	cbnz	r0, 80075bc <__d2b+0x24>
 80075ae:	4602      	mov	r2, r0
 80075b0:	4b24      	ldr	r3, [pc, #144]	; (8007644 <__d2b+0xac>)
 80075b2:	4825      	ldr	r0, [pc, #148]	; (8007648 <__d2b+0xb0>)
 80075b4:	f240 310f 	movw	r1, #783	; 0x30f
 80075b8:	f000 fb10 	bl	8007bdc <__assert_func>
 80075bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075c4:	bb2d      	cbnz	r5, 8007612 <__d2b+0x7a>
 80075c6:	9301      	str	r3, [sp, #4]
 80075c8:	f1b8 0300 	subs.w	r3, r8, #0
 80075cc:	d026      	beq.n	800761c <__d2b+0x84>
 80075ce:	4668      	mov	r0, sp
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	f7ff fd87 	bl	80070e4 <__lo0bits>
 80075d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80075da:	b1e8      	cbz	r0, 8007618 <__d2b+0x80>
 80075dc:	f1c0 0320 	rsb	r3, r0, #32
 80075e0:	fa02 f303 	lsl.w	r3, r2, r3
 80075e4:	430b      	orrs	r3, r1
 80075e6:	40c2      	lsrs	r2, r0
 80075e8:	6163      	str	r3, [r4, #20]
 80075ea:	9201      	str	r2, [sp, #4]
 80075ec:	9b01      	ldr	r3, [sp, #4]
 80075ee:	61a3      	str	r3, [r4, #24]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	bf14      	ite	ne
 80075f4:	2202      	movne	r2, #2
 80075f6:	2201      	moveq	r2, #1
 80075f8:	6122      	str	r2, [r4, #16]
 80075fa:	b1bd      	cbz	r5, 800762c <__d2b+0x94>
 80075fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007600:	4405      	add	r5, r0
 8007602:	603d      	str	r5, [r7, #0]
 8007604:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007608:	6030      	str	r0, [r6, #0]
 800760a:	4620      	mov	r0, r4
 800760c:	b003      	add	sp, #12
 800760e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007616:	e7d6      	b.n	80075c6 <__d2b+0x2e>
 8007618:	6161      	str	r1, [r4, #20]
 800761a:	e7e7      	b.n	80075ec <__d2b+0x54>
 800761c:	a801      	add	r0, sp, #4
 800761e:	f7ff fd61 	bl	80070e4 <__lo0bits>
 8007622:	9b01      	ldr	r3, [sp, #4]
 8007624:	6163      	str	r3, [r4, #20]
 8007626:	3020      	adds	r0, #32
 8007628:	2201      	movs	r2, #1
 800762a:	e7e5      	b.n	80075f8 <__d2b+0x60>
 800762c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007630:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007634:	6038      	str	r0, [r7, #0]
 8007636:	6918      	ldr	r0, [r3, #16]
 8007638:	f7ff fd34 	bl	80070a4 <__hi0bits>
 800763c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007640:	e7e2      	b.n	8007608 <__d2b+0x70>
 8007642:	bf00      	nop
 8007644:	0800f41c 	.word	0x0800f41c
 8007648:	0800f42d 	.word	0x0800f42d

0800764c <__sfputc_r>:
 800764c:	6893      	ldr	r3, [r2, #8]
 800764e:	3b01      	subs	r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	b410      	push	{r4}
 8007654:	6093      	str	r3, [r2, #8]
 8007656:	da08      	bge.n	800766a <__sfputc_r+0x1e>
 8007658:	6994      	ldr	r4, [r2, #24]
 800765a:	42a3      	cmp	r3, r4
 800765c:	db01      	blt.n	8007662 <__sfputc_r+0x16>
 800765e:	290a      	cmp	r1, #10
 8007660:	d103      	bne.n	800766a <__sfputc_r+0x1e>
 8007662:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007666:	f7fe bbe6 	b.w	8005e36 <__swbuf_r>
 800766a:	6813      	ldr	r3, [r2, #0]
 800766c:	1c58      	adds	r0, r3, #1
 800766e:	6010      	str	r0, [r2, #0]
 8007670:	7019      	strb	r1, [r3, #0]
 8007672:	4608      	mov	r0, r1
 8007674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007678:	4770      	bx	lr

0800767a <__sfputs_r>:
 800767a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767c:	4606      	mov	r6, r0
 800767e:	460f      	mov	r7, r1
 8007680:	4614      	mov	r4, r2
 8007682:	18d5      	adds	r5, r2, r3
 8007684:	42ac      	cmp	r4, r5
 8007686:	d101      	bne.n	800768c <__sfputs_r+0x12>
 8007688:	2000      	movs	r0, #0
 800768a:	e007      	b.n	800769c <__sfputs_r+0x22>
 800768c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007690:	463a      	mov	r2, r7
 8007692:	4630      	mov	r0, r6
 8007694:	f7ff ffda 	bl	800764c <__sfputc_r>
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	d1f3      	bne.n	8007684 <__sfputs_r+0xa>
 800769c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076a0 <_vfiprintf_r>:
 80076a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a4:	460d      	mov	r5, r1
 80076a6:	b09d      	sub	sp, #116	; 0x74
 80076a8:	4614      	mov	r4, r2
 80076aa:	4698      	mov	r8, r3
 80076ac:	4606      	mov	r6, r0
 80076ae:	b118      	cbz	r0, 80076b8 <_vfiprintf_r+0x18>
 80076b0:	6a03      	ldr	r3, [r0, #32]
 80076b2:	b90b      	cbnz	r3, 80076b8 <_vfiprintf_r+0x18>
 80076b4:	f7fe fad0 	bl	8005c58 <__sinit>
 80076b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076ba:	07d9      	lsls	r1, r3, #31
 80076bc:	d405      	bmi.n	80076ca <_vfiprintf_r+0x2a>
 80076be:	89ab      	ldrh	r3, [r5, #12]
 80076c0:	059a      	lsls	r2, r3, #22
 80076c2:	d402      	bmi.n	80076ca <_vfiprintf_r+0x2a>
 80076c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076c6:	f7fe fcc8 	bl	800605a <__retarget_lock_acquire_recursive>
 80076ca:	89ab      	ldrh	r3, [r5, #12]
 80076cc:	071b      	lsls	r3, r3, #28
 80076ce:	d501      	bpl.n	80076d4 <_vfiprintf_r+0x34>
 80076d0:	692b      	ldr	r3, [r5, #16]
 80076d2:	b99b      	cbnz	r3, 80076fc <_vfiprintf_r+0x5c>
 80076d4:	4629      	mov	r1, r5
 80076d6:	4630      	mov	r0, r6
 80076d8:	f7fe fbea 	bl	8005eb0 <__swsetup_r>
 80076dc:	b170      	cbz	r0, 80076fc <_vfiprintf_r+0x5c>
 80076de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076e0:	07dc      	lsls	r4, r3, #31
 80076e2:	d504      	bpl.n	80076ee <_vfiprintf_r+0x4e>
 80076e4:	f04f 30ff 	mov.w	r0, #4294967295
 80076e8:	b01d      	add	sp, #116	; 0x74
 80076ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ee:	89ab      	ldrh	r3, [r5, #12]
 80076f0:	0598      	lsls	r0, r3, #22
 80076f2:	d4f7      	bmi.n	80076e4 <_vfiprintf_r+0x44>
 80076f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076f6:	f7fe fcb1 	bl	800605c <__retarget_lock_release_recursive>
 80076fa:	e7f3      	b.n	80076e4 <_vfiprintf_r+0x44>
 80076fc:	2300      	movs	r3, #0
 80076fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007700:	2320      	movs	r3, #32
 8007702:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007706:	f8cd 800c 	str.w	r8, [sp, #12]
 800770a:	2330      	movs	r3, #48	; 0x30
 800770c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80078c0 <_vfiprintf_r+0x220>
 8007710:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007714:	f04f 0901 	mov.w	r9, #1
 8007718:	4623      	mov	r3, r4
 800771a:	469a      	mov	sl, r3
 800771c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007720:	b10a      	cbz	r2, 8007726 <_vfiprintf_r+0x86>
 8007722:	2a25      	cmp	r2, #37	; 0x25
 8007724:	d1f9      	bne.n	800771a <_vfiprintf_r+0x7a>
 8007726:	ebba 0b04 	subs.w	fp, sl, r4
 800772a:	d00b      	beq.n	8007744 <_vfiprintf_r+0xa4>
 800772c:	465b      	mov	r3, fp
 800772e:	4622      	mov	r2, r4
 8007730:	4629      	mov	r1, r5
 8007732:	4630      	mov	r0, r6
 8007734:	f7ff ffa1 	bl	800767a <__sfputs_r>
 8007738:	3001      	adds	r0, #1
 800773a:	f000 80a9 	beq.w	8007890 <_vfiprintf_r+0x1f0>
 800773e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007740:	445a      	add	r2, fp
 8007742:	9209      	str	r2, [sp, #36]	; 0x24
 8007744:	f89a 3000 	ldrb.w	r3, [sl]
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 80a1 	beq.w	8007890 <_vfiprintf_r+0x1f0>
 800774e:	2300      	movs	r3, #0
 8007750:	f04f 32ff 	mov.w	r2, #4294967295
 8007754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007758:	f10a 0a01 	add.w	sl, sl, #1
 800775c:	9304      	str	r3, [sp, #16]
 800775e:	9307      	str	r3, [sp, #28]
 8007760:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007764:	931a      	str	r3, [sp, #104]	; 0x68
 8007766:	4654      	mov	r4, sl
 8007768:	2205      	movs	r2, #5
 800776a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800776e:	4854      	ldr	r0, [pc, #336]	; (80078c0 <_vfiprintf_r+0x220>)
 8007770:	f7f8 fd36 	bl	80001e0 <memchr>
 8007774:	9a04      	ldr	r2, [sp, #16]
 8007776:	b9d8      	cbnz	r0, 80077b0 <_vfiprintf_r+0x110>
 8007778:	06d1      	lsls	r1, r2, #27
 800777a:	bf44      	itt	mi
 800777c:	2320      	movmi	r3, #32
 800777e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007782:	0713      	lsls	r3, r2, #28
 8007784:	bf44      	itt	mi
 8007786:	232b      	movmi	r3, #43	; 0x2b
 8007788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800778c:	f89a 3000 	ldrb.w	r3, [sl]
 8007790:	2b2a      	cmp	r3, #42	; 0x2a
 8007792:	d015      	beq.n	80077c0 <_vfiprintf_r+0x120>
 8007794:	9a07      	ldr	r2, [sp, #28]
 8007796:	4654      	mov	r4, sl
 8007798:	2000      	movs	r0, #0
 800779a:	f04f 0c0a 	mov.w	ip, #10
 800779e:	4621      	mov	r1, r4
 80077a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077a4:	3b30      	subs	r3, #48	; 0x30
 80077a6:	2b09      	cmp	r3, #9
 80077a8:	d94d      	bls.n	8007846 <_vfiprintf_r+0x1a6>
 80077aa:	b1b0      	cbz	r0, 80077da <_vfiprintf_r+0x13a>
 80077ac:	9207      	str	r2, [sp, #28]
 80077ae:	e014      	b.n	80077da <_vfiprintf_r+0x13a>
 80077b0:	eba0 0308 	sub.w	r3, r0, r8
 80077b4:	fa09 f303 	lsl.w	r3, r9, r3
 80077b8:	4313      	orrs	r3, r2
 80077ba:	9304      	str	r3, [sp, #16]
 80077bc:	46a2      	mov	sl, r4
 80077be:	e7d2      	b.n	8007766 <_vfiprintf_r+0xc6>
 80077c0:	9b03      	ldr	r3, [sp, #12]
 80077c2:	1d19      	adds	r1, r3, #4
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	9103      	str	r1, [sp, #12]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	bfbb      	ittet	lt
 80077cc:	425b      	neglt	r3, r3
 80077ce:	f042 0202 	orrlt.w	r2, r2, #2
 80077d2:	9307      	strge	r3, [sp, #28]
 80077d4:	9307      	strlt	r3, [sp, #28]
 80077d6:	bfb8      	it	lt
 80077d8:	9204      	strlt	r2, [sp, #16]
 80077da:	7823      	ldrb	r3, [r4, #0]
 80077dc:	2b2e      	cmp	r3, #46	; 0x2e
 80077de:	d10c      	bne.n	80077fa <_vfiprintf_r+0x15a>
 80077e0:	7863      	ldrb	r3, [r4, #1]
 80077e2:	2b2a      	cmp	r3, #42	; 0x2a
 80077e4:	d134      	bne.n	8007850 <_vfiprintf_r+0x1b0>
 80077e6:	9b03      	ldr	r3, [sp, #12]
 80077e8:	1d1a      	adds	r2, r3, #4
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	9203      	str	r2, [sp, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	bfb8      	it	lt
 80077f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80077f6:	3402      	adds	r4, #2
 80077f8:	9305      	str	r3, [sp, #20]
 80077fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80078d0 <_vfiprintf_r+0x230>
 80077fe:	7821      	ldrb	r1, [r4, #0]
 8007800:	2203      	movs	r2, #3
 8007802:	4650      	mov	r0, sl
 8007804:	f7f8 fcec 	bl	80001e0 <memchr>
 8007808:	b138      	cbz	r0, 800781a <_vfiprintf_r+0x17a>
 800780a:	9b04      	ldr	r3, [sp, #16]
 800780c:	eba0 000a 	sub.w	r0, r0, sl
 8007810:	2240      	movs	r2, #64	; 0x40
 8007812:	4082      	lsls	r2, r0
 8007814:	4313      	orrs	r3, r2
 8007816:	3401      	adds	r4, #1
 8007818:	9304      	str	r3, [sp, #16]
 800781a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800781e:	4829      	ldr	r0, [pc, #164]	; (80078c4 <_vfiprintf_r+0x224>)
 8007820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007824:	2206      	movs	r2, #6
 8007826:	f7f8 fcdb 	bl	80001e0 <memchr>
 800782a:	2800      	cmp	r0, #0
 800782c:	d03f      	beq.n	80078ae <_vfiprintf_r+0x20e>
 800782e:	4b26      	ldr	r3, [pc, #152]	; (80078c8 <_vfiprintf_r+0x228>)
 8007830:	bb1b      	cbnz	r3, 800787a <_vfiprintf_r+0x1da>
 8007832:	9b03      	ldr	r3, [sp, #12]
 8007834:	3307      	adds	r3, #7
 8007836:	f023 0307 	bic.w	r3, r3, #7
 800783a:	3308      	adds	r3, #8
 800783c:	9303      	str	r3, [sp, #12]
 800783e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007840:	443b      	add	r3, r7
 8007842:	9309      	str	r3, [sp, #36]	; 0x24
 8007844:	e768      	b.n	8007718 <_vfiprintf_r+0x78>
 8007846:	fb0c 3202 	mla	r2, ip, r2, r3
 800784a:	460c      	mov	r4, r1
 800784c:	2001      	movs	r0, #1
 800784e:	e7a6      	b.n	800779e <_vfiprintf_r+0xfe>
 8007850:	2300      	movs	r3, #0
 8007852:	3401      	adds	r4, #1
 8007854:	9305      	str	r3, [sp, #20]
 8007856:	4619      	mov	r1, r3
 8007858:	f04f 0c0a 	mov.w	ip, #10
 800785c:	4620      	mov	r0, r4
 800785e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007862:	3a30      	subs	r2, #48	; 0x30
 8007864:	2a09      	cmp	r2, #9
 8007866:	d903      	bls.n	8007870 <_vfiprintf_r+0x1d0>
 8007868:	2b00      	cmp	r3, #0
 800786a:	d0c6      	beq.n	80077fa <_vfiprintf_r+0x15a>
 800786c:	9105      	str	r1, [sp, #20]
 800786e:	e7c4      	b.n	80077fa <_vfiprintf_r+0x15a>
 8007870:	fb0c 2101 	mla	r1, ip, r1, r2
 8007874:	4604      	mov	r4, r0
 8007876:	2301      	movs	r3, #1
 8007878:	e7f0      	b.n	800785c <_vfiprintf_r+0x1bc>
 800787a:	ab03      	add	r3, sp, #12
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	462a      	mov	r2, r5
 8007880:	4b12      	ldr	r3, [pc, #72]	; (80078cc <_vfiprintf_r+0x22c>)
 8007882:	a904      	add	r1, sp, #16
 8007884:	4630      	mov	r0, r6
 8007886:	f7fd fd95 	bl	80053b4 <_printf_float>
 800788a:	4607      	mov	r7, r0
 800788c:	1c78      	adds	r0, r7, #1
 800788e:	d1d6      	bne.n	800783e <_vfiprintf_r+0x19e>
 8007890:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007892:	07d9      	lsls	r1, r3, #31
 8007894:	d405      	bmi.n	80078a2 <_vfiprintf_r+0x202>
 8007896:	89ab      	ldrh	r3, [r5, #12]
 8007898:	059a      	lsls	r2, r3, #22
 800789a:	d402      	bmi.n	80078a2 <_vfiprintf_r+0x202>
 800789c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800789e:	f7fe fbdd 	bl	800605c <__retarget_lock_release_recursive>
 80078a2:	89ab      	ldrh	r3, [r5, #12]
 80078a4:	065b      	lsls	r3, r3, #25
 80078a6:	f53f af1d 	bmi.w	80076e4 <_vfiprintf_r+0x44>
 80078aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078ac:	e71c      	b.n	80076e8 <_vfiprintf_r+0x48>
 80078ae:	ab03      	add	r3, sp, #12
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	462a      	mov	r2, r5
 80078b4:	4b05      	ldr	r3, [pc, #20]	; (80078cc <_vfiprintf_r+0x22c>)
 80078b6:	a904      	add	r1, sp, #16
 80078b8:	4630      	mov	r0, r6
 80078ba:	f7fe f81f 	bl	80058fc <_printf_i>
 80078be:	e7e4      	b.n	800788a <_vfiprintf_r+0x1ea>
 80078c0:	0800f584 	.word	0x0800f584
 80078c4:	0800f58e 	.word	0x0800f58e
 80078c8:	080053b5 	.word	0x080053b5
 80078cc:	0800767b 	.word	0x0800767b
 80078d0:	0800f58a 	.word	0x0800f58a

080078d4 <__sflush_r>:
 80078d4:	898a      	ldrh	r2, [r1, #12]
 80078d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078da:	4605      	mov	r5, r0
 80078dc:	0710      	lsls	r0, r2, #28
 80078de:	460c      	mov	r4, r1
 80078e0:	d458      	bmi.n	8007994 <__sflush_r+0xc0>
 80078e2:	684b      	ldr	r3, [r1, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	dc05      	bgt.n	80078f4 <__sflush_r+0x20>
 80078e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	dc02      	bgt.n	80078f4 <__sflush_r+0x20>
 80078ee:	2000      	movs	r0, #0
 80078f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078f6:	2e00      	cmp	r6, #0
 80078f8:	d0f9      	beq.n	80078ee <__sflush_r+0x1a>
 80078fa:	2300      	movs	r3, #0
 80078fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007900:	682f      	ldr	r7, [r5, #0]
 8007902:	6a21      	ldr	r1, [r4, #32]
 8007904:	602b      	str	r3, [r5, #0]
 8007906:	d032      	beq.n	800796e <__sflush_r+0x9a>
 8007908:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800790a:	89a3      	ldrh	r3, [r4, #12]
 800790c:	075a      	lsls	r2, r3, #29
 800790e:	d505      	bpl.n	800791c <__sflush_r+0x48>
 8007910:	6863      	ldr	r3, [r4, #4]
 8007912:	1ac0      	subs	r0, r0, r3
 8007914:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007916:	b10b      	cbz	r3, 800791c <__sflush_r+0x48>
 8007918:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800791a:	1ac0      	subs	r0, r0, r3
 800791c:	2300      	movs	r3, #0
 800791e:	4602      	mov	r2, r0
 8007920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007922:	6a21      	ldr	r1, [r4, #32]
 8007924:	4628      	mov	r0, r5
 8007926:	47b0      	blx	r6
 8007928:	1c43      	adds	r3, r0, #1
 800792a:	89a3      	ldrh	r3, [r4, #12]
 800792c:	d106      	bne.n	800793c <__sflush_r+0x68>
 800792e:	6829      	ldr	r1, [r5, #0]
 8007930:	291d      	cmp	r1, #29
 8007932:	d82b      	bhi.n	800798c <__sflush_r+0xb8>
 8007934:	4a29      	ldr	r2, [pc, #164]	; (80079dc <__sflush_r+0x108>)
 8007936:	410a      	asrs	r2, r1
 8007938:	07d6      	lsls	r6, r2, #31
 800793a:	d427      	bmi.n	800798c <__sflush_r+0xb8>
 800793c:	2200      	movs	r2, #0
 800793e:	6062      	str	r2, [r4, #4]
 8007940:	04d9      	lsls	r1, r3, #19
 8007942:	6922      	ldr	r2, [r4, #16]
 8007944:	6022      	str	r2, [r4, #0]
 8007946:	d504      	bpl.n	8007952 <__sflush_r+0x7e>
 8007948:	1c42      	adds	r2, r0, #1
 800794a:	d101      	bne.n	8007950 <__sflush_r+0x7c>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	b903      	cbnz	r3, 8007952 <__sflush_r+0x7e>
 8007950:	6560      	str	r0, [r4, #84]	; 0x54
 8007952:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007954:	602f      	str	r7, [r5, #0]
 8007956:	2900      	cmp	r1, #0
 8007958:	d0c9      	beq.n	80078ee <__sflush_r+0x1a>
 800795a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800795e:	4299      	cmp	r1, r3
 8007960:	d002      	beq.n	8007968 <__sflush_r+0x94>
 8007962:	4628      	mov	r0, r5
 8007964:	f7ff f9f6 	bl	8006d54 <_free_r>
 8007968:	2000      	movs	r0, #0
 800796a:	6360      	str	r0, [r4, #52]	; 0x34
 800796c:	e7c0      	b.n	80078f0 <__sflush_r+0x1c>
 800796e:	2301      	movs	r3, #1
 8007970:	4628      	mov	r0, r5
 8007972:	47b0      	blx	r6
 8007974:	1c41      	adds	r1, r0, #1
 8007976:	d1c8      	bne.n	800790a <__sflush_r+0x36>
 8007978:	682b      	ldr	r3, [r5, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0c5      	beq.n	800790a <__sflush_r+0x36>
 800797e:	2b1d      	cmp	r3, #29
 8007980:	d001      	beq.n	8007986 <__sflush_r+0xb2>
 8007982:	2b16      	cmp	r3, #22
 8007984:	d101      	bne.n	800798a <__sflush_r+0xb6>
 8007986:	602f      	str	r7, [r5, #0]
 8007988:	e7b1      	b.n	80078ee <__sflush_r+0x1a>
 800798a:	89a3      	ldrh	r3, [r4, #12]
 800798c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007990:	81a3      	strh	r3, [r4, #12]
 8007992:	e7ad      	b.n	80078f0 <__sflush_r+0x1c>
 8007994:	690f      	ldr	r7, [r1, #16]
 8007996:	2f00      	cmp	r7, #0
 8007998:	d0a9      	beq.n	80078ee <__sflush_r+0x1a>
 800799a:	0793      	lsls	r3, r2, #30
 800799c:	680e      	ldr	r6, [r1, #0]
 800799e:	bf08      	it	eq
 80079a0:	694b      	ldreq	r3, [r1, #20]
 80079a2:	600f      	str	r7, [r1, #0]
 80079a4:	bf18      	it	ne
 80079a6:	2300      	movne	r3, #0
 80079a8:	eba6 0807 	sub.w	r8, r6, r7
 80079ac:	608b      	str	r3, [r1, #8]
 80079ae:	f1b8 0f00 	cmp.w	r8, #0
 80079b2:	dd9c      	ble.n	80078ee <__sflush_r+0x1a>
 80079b4:	6a21      	ldr	r1, [r4, #32]
 80079b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079b8:	4643      	mov	r3, r8
 80079ba:	463a      	mov	r2, r7
 80079bc:	4628      	mov	r0, r5
 80079be:	47b0      	blx	r6
 80079c0:	2800      	cmp	r0, #0
 80079c2:	dc06      	bgt.n	80079d2 <__sflush_r+0xfe>
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ca:	81a3      	strh	r3, [r4, #12]
 80079cc:	f04f 30ff 	mov.w	r0, #4294967295
 80079d0:	e78e      	b.n	80078f0 <__sflush_r+0x1c>
 80079d2:	4407      	add	r7, r0
 80079d4:	eba8 0800 	sub.w	r8, r8, r0
 80079d8:	e7e9      	b.n	80079ae <__sflush_r+0xda>
 80079da:	bf00      	nop
 80079dc:	dfbffffe 	.word	0xdfbffffe

080079e0 <_fflush_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	690b      	ldr	r3, [r1, #16]
 80079e4:	4605      	mov	r5, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	b913      	cbnz	r3, 80079f0 <_fflush_r+0x10>
 80079ea:	2500      	movs	r5, #0
 80079ec:	4628      	mov	r0, r5
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	b118      	cbz	r0, 80079fa <_fflush_r+0x1a>
 80079f2:	6a03      	ldr	r3, [r0, #32]
 80079f4:	b90b      	cbnz	r3, 80079fa <_fflush_r+0x1a>
 80079f6:	f7fe f92f 	bl	8005c58 <__sinit>
 80079fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d0f3      	beq.n	80079ea <_fflush_r+0xa>
 8007a02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a04:	07d0      	lsls	r0, r2, #31
 8007a06:	d404      	bmi.n	8007a12 <_fflush_r+0x32>
 8007a08:	0599      	lsls	r1, r3, #22
 8007a0a:	d402      	bmi.n	8007a12 <_fflush_r+0x32>
 8007a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a0e:	f7fe fb24 	bl	800605a <__retarget_lock_acquire_recursive>
 8007a12:	4628      	mov	r0, r5
 8007a14:	4621      	mov	r1, r4
 8007a16:	f7ff ff5d 	bl	80078d4 <__sflush_r>
 8007a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a1c:	07da      	lsls	r2, r3, #31
 8007a1e:	4605      	mov	r5, r0
 8007a20:	d4e4      	bmi.n	80079ec <_fflush_r+0xc>
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	059b      	lsls	r3, r3, #22
 8007a26:	d4e1      	bmi.n	80079ec <_fflush_r+0xc>
 8007a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a2a:	f7fe fb17 	bl	800605c <__retarget_lock_release_recursive>
 8007a2e:	e7dd      	b.n	80079ec <_fflush_r+0xc>

08007a30 <__swhatbuf_r>:
 8007a30:	b570      	push	{r4, r5, r6, lr}
 8007a32:	460c      	mov	r4, r1
 8007a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a38:	2900      	cmp	r1, #0
 8007a3a:	b096      	sub	sp, #88	; 0x58
 8007a3c:	4615      	mov	r5, r2
 8007a3e:	461e      	mov	r6, r3
 8007a40:	da0d      	bge.n	8007a5e <__swhatbuf_r+0x2e>
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a48:	f04f 0100 	mov.w	r1, #0
 8007a4c:	bf0c      	ite	eq
 8007a4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007a52:	2340      	movne	r3, #64	; 0x40
 8007a54:	2000      	movs	r0, #0
 8007a56:	6031      	str	r1, [r6, #0]
 8007a58:	602b      	str	r3, [r5, #0]
 8007a5a:	b016      	add	sp, #88	; 0x58
 8007a5c:	bd70      	pop	{r4, r5, r6, pc}
 8007a5e:	466a      	mov	r2, sp
 8007a60:	f000 f87c 	bl	8007b5c <_fstat_r>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	dbec      	blt.n	8007a42 <__swhatbuf_r+0x12>
 8007a68:	9901      	ldr	r1, [sp, #4]
 8007a6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007a6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007a72:	4259      	negs	r1, r3
 8007a74:	4159      	adcs	r1, r3
 8007a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a7a:	e7eb      	b.n	8007a54 <__swhatbuf_r+0x24>

08007a7c <__smakebuf_r>:
 8007a7c:	898b      	ldrh	r3, [r1, #12]
 8007a7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a80:	079d      	lsls	r5, r3, #30
 8007a82:	4606      	mov	r6, r0
 8007a84:	460c      	mov	r4, r1
 8007a86:	d507      	bpl.n	8007a98 <__smakebuf_r+0x1c>
 8007a88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	6123      	str	r3, [r4, #16]
 8007a90:	2301      	movs	r3, #1
 8007a92:	6163      	str	r3, [r4, #20]
 8007a94:	b002      	add	sp, #8
 8007a96:	bd70      	pop	{r4, r5, r6, pc}
 8007a98:	ab01      	add	r3, sp, #4
 8007a9a:	466a      	mov	r2, sp
 8007a9c:	f7ff ffc8 	bl	8007a30 <__swhatbuf_r>
 8007aa0:	9900      	ldr	r1, [sp, #0]
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	f7ff f9c9 	bl	8006e3c <_malloc_r>
 8007aaa:	b948      	cbnz	r0, 8007ac0 <__smakebuf_r+0x44>
 8007aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab0:	059a      	lsls	r2, r3, #22
 8007ab2:	d4ef      	bmi.n	8007a94 <__smakebuf_r+0x18>
 8007ab4:	f023 0303 	bic.w	r3, r3, #3
 8007ab8:	f043 0302 	orr.w	r3, r3, #2
 8007abc:	81a3      	strh	r3, [r4, #12]
 8007abe:	e7e3      	b.n	8007a88 <__smakebuf_r+0xc>
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	6020      	str	r0, [r4, #0]
 8007ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ac8:	81a3      	strh	r3, [r4, #12]
 8007aca:	9b00      	ldr	r3, [sp, #0]
 8007acc:	6163      	str	r3, [r4, #20]
 8007ace:	9b01      	ldr	r3, [sp, #4]
 8007ad0:	6120      	str	r0, [r4, #16]
 8007ad2:	b15b      	cbz	r3, 8007aec <__smakebuf_r+0x70>
 8007ad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ad8:	4630      	mov	r0, r6
 8007ada:	f000 f851 	bl	8007b80 <_isatty_r>
 8007ade:	b128      	cbz	r0, 8007aec <__smakebuf_r+0x70>
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	f023 0303 	bic.w	r3, r3, #3
 8007ae6:	f043 0301 	orr.w	r3, r3, #1
 8007aea:	81a3      	strh	r3, [r4, #12]
 8007aec:	89a3      	ldrh	r3, [r4, #12]
 8007aee:	431d      	orrs	r5, r3
 8007af0:	81a5      	strh	r5, [r4, #12]
 8007af2:	e7cf      	b.n	8007a94 <__smakebuf_r+0x18>

08007af4 <_putc_r>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	460d      	mov	r5, r1
 8007af8:	4614      	mov	r4, r2
 8007afa:	4606      	mov	r6, r0
 8007afc:	b118      	cbz	r0, 8007b06 <_putc_r+0x12>
 8007afe:	6a03      	ldr	r3, [r0, #32]
 8007b00:	b90b      	cbnz	r3, 8007b06 <_putc_r+0x12>
 8007b02:	f7fe f8a9 	bl	8005c58 <__sinit>
 8007b06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b08:	07d8      	lsls	r0, r3, #31
 8007b0a:	d405      	bmi.n	8007b18 <_putc_r+0x24>
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	0599      	lsls	r1, r3, #22
 8007b10:	d402      	bmi.n	8007b18 <_putc_r+0x24>
 8007b12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b14:	f7fe faa1 	bl	800605a <__retarget_lock_acquire_recursive>
 8007b18:	68a3      	ldr	r3, [r4, #8]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	60a3      	str	r3, [r4, #8]
 8007b20:	da05      	bge.n	8007b2e <_putc_r+0x3a>
 8007b22:	69a2      	ldr	r2, [r4, #24]
 8007b24:	4293      	cmp	r3, r2
 8007b26:	db12      	blt.n	8007b4e <_putc_r+0x5a>
 8007b28:	b2eb      	uxtb	r3, r5
 8007b2a:	2b0a      	cmp	r3, #10
 8007b2c:	d00f      	beq.n	8007b4e <_putc_r+0x5a>
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	6022      	str	r2, [r4, #0]
 8007b34:	701d      	strb	r5, [r3, #0]
 8007b36:	b2ed      	uxtb	r5, r5
 8007b38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b3a:	07da      	lsls	r2, r3, #31
 8007b3c:	d405      	bmi.n	8007b4a <_putc_r+0x56>
 8007b3e:	89a3      	ldrh	r3, [r4, #12]
 8007b40:	059b      	lsls	r3, r3, #22
 8007b42:	d402      	bmi.n	8007b4a <_putc_r+0x56>
 8007b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b46:	f7fe fa89 	bl	800605c <__retarget_lock_release_recursive>
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	bd70      	pop	{r4, r5, r6, pc}
 8007b4e:	4629      	mov	r1, r5
 8007b50:	4622      	mov	r2, r4
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7fe f96f 	bl	8005e36 <__swbuf_r>
 8007b58:	4605      	mov	r5, r0
 8007b5a:	e7ed      	b.n	8007b38 <_putc_r+0x44>

08007b5c <_fstat_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	4d07      	ldr	r5, [pc, #28]	; (8007b7c <_fstat_r+0x20>)
 8007b60:	2300      	movs	r3, #0
 8007b62:	4604      	mov	r4, r0
 8007b64:	4608      	mov	r0, r1
 8007b66:	4611      	mov	r1, r2
 8007b68:	602b      	str	r3, [r5, #0]
 8007b6a:	f7fa f9a2 	bl	8001eb2 <_fstat>
 8007b6e:	1c43      	adds	r3, r0, #1
 8007b70:	d102      	bne.n	8007b78 <_fstat_r+0x1c>
 8007b72:	682b      	ldr	r3, [r5, #0]
 8007b74:	b103      	cbz	r3, 8007b78 <_fstat_r+0x1c>
 8007b76:	6023      	str	r3, [r4, #0]
 8007b78:	bd38      	pop	{r3, r4, r5, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000528 	.word	0x20000528

08007b80 <_isatty_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4d06      	ldr	r5, [pc, #24]	; (8007b9c <_isatty_r+0x1c>)
 8007b84:	2300      	movs	r3, #0
 8007b86:	4604      	mov	r4, r0
 8007b88:	4608      	mov	r0, r1
 8007b8a:	602b      	str	r3, [r5, #0]
 8007b8c:	f7fa f9a1 	bl	8001ed2 <_isatty>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	d102      	bne.n	8007b9a <_isatty_r+0x1a>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	b103      	cbz	r3, 8007b9a <_isatty_r+0x1a>
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
 8007b9c:	20000528 	.word	0x20000528

08007ba0 <_sbrk_r>:
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	4d06      	ldr	r5, [pc, #24]	; (8007bbc <_sbrk_r+0x1c>)
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	4608      	mov	r0, r1
 8007baa:	602b      	str	r3, [r5, #0]
 8007bac:	f7fa f9aa 	bl	8001f04 <_sbrk>
 8007bb0:	1c43      	adds	r3, r0, #1
 8007bb2:	d102      	bne.n	8007bba <_sbrk_r+0x1a>
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	b103      	cbz	r3, 8007bba <_sbrk_r+0x1a>
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	bd38      	pop	{r3, r4, r5, pc}
 8007bbc:	20000528 	.word	0x20000528

08007bc0 <memcpy>:
 8007bc0:	440a      	add	r2, r1
 8007bc2:	4291      	cmp	r1, r2
 8007bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bc8:	d100      	bne.n	8007bcc <memcpy+0xc>
 8007bca:	4770      	bx	lr
 8007bcc:	b510      	push	{r4, lr}
 8007bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bd6:	4291      	cmp	r1, r2
 8007bd8:	d1f9      	bne.n	8007bce <memcpy+0xe>
 8007bda:	bd10      	pop	{r4, pc}

08007bdc <__assert_func>:
 8007bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bde:	4614      	mov	r4, r2
 8007be0:	461a      	mov	r2, r3
 8007be2:	4b09      	ldr	r3, [pc, #36]	; (8007c08 <__assert_func+0x2c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4605      	mov	r5, r0
 8007be8:	68d8      	ldr	r0, [r3, #12]
 8007bea:	b14c      	cbz	r4, 8007c00 <__assert_func+0x24>
 8007bec:	4b07      	ldr	r3, [pc, #28]	; (8007c0c <__assert_func+0x30>)
 8007bee:	9100      	str	r1, [sp, #0]
 8007bf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bf4:	4906      	ldr	r1, [pc, #24]	; (8007c10 <__assert_func+0x34>)
 8007bf6:	462b      	mov	r3, r5
 8007bf8:	f000 f844 	bl	8007c84 <fiprintf>
 8007bfc:	f000 f854 	bl	8007ca8 <abort>
 8007c00:	4b04      	ldr	r3, [pc, #16]	; (8007c14 <__assert_func+0x38>)
 8007c02:	461c      	mov	r4, r3
 8007c04:	e7f3      	b.n	8007bee <__assert_func+0x12>
 8007c06:	bf00      	nop
 8007c08:	20000090 	.word	0x20000090
 8007c0c:	0800f59f 	.word	0x0800f59f
 8007c10:	0800f5ac 	.word	0x0800f5ac
 8007c14:	0800f5da 	.word	0x0800f5da

08007c18 <_calloc_r>:
 8007c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c1a:	fba1 2402 	umull	r2, r4, r1, r2
 8007c1e:	b94c      	cbnz	r4, 8007c34 <_calloc_r+0x1c>
 8007c20:	4611      	mov	r1, r2
 8007c22:	9201      	str	r2, [sp, #4]
 8007c24:	f7ff f90a 	bl	8006e3c <_malloc_r>
 8007c28:	9a01      	ldr	r2, [sp, #4]
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	b930      	cbnz	r0, 8007c3c <_calloc_r+0x24>
 8007c2e:	4628      	mov	r0, r5
 8007c30:	b003      	add	sp, #12
 8007c32:	bd30      	pop	{r4, r5, pc}
 8007c34:	220c      	movs	r2, #12
 8007c36:	6002      	str	r2, [r0, #0]
 8007c38:	2500      	movs	r5, #0
 8007c3a:	e7f8      	b.n	8007c2e <_calloc_r+0x16>
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	f7fe f98f 	bl	8005f60 <memset>
 8007c42:	e7f4      	b.n	8007c2e <_calloc_r+0x16>

08007c44 <__ascii_mbtowc>:
 8007c44:	b082      	sub	sp, #8
 8007c46:	b901      	cbnz	r1, 8007c4a <__ascii_mbtowc+0x6>
 8007c48:	a901      	add	r1, sp, #4
 8007c4a:	b142      	cbz	r2, 8007c5e <__ascii_mbtowc+0x1a>
 8007c4c:	b14b      	cbz	r3, 8007c62 <__ascii_mbtowc+0x1e>
 8007c4e:	7813      	ldrb	r3, [r2, #0]
 8007c50:	600b      	str	r3, [r1, #0]
 8007c52:	7812      	ldrb	r2, [r2, #0]
 8007c54:	1e10      	subs	r0, r2, #0
 8007c56:	bf18      	it	ne
 8007c58:	2001      	movne	r0, #1
 8007c5a:	b002      	add	sp, #8
 8007c5c:	4770      	bx	lr
 8007c5e:	4610      	mov	r0, r2
 8007c60:	e7fb      	b.n	8007c5a <__ascii_mbtowc+0x16>
 8007c62:	f06f 0001 	mvn.w	r0, #1
 8007c66:	e7f8      	b.n	8007c5a <__ascii_mbtowc+0x16>

08007c68 <__ascii_wctomb>:
 8007c68:	b149      	cbz	r1, 8007c7e <__ascii_wctomb+0x16>
 8007c6a:	2aff      	cmp	r2, #255	; 0xff
 8007c6c:	bf85      	ittet	hi
 8007c6e:	238a      	movhi	r3, #138	; 0x8a
 8007c70:	6003      	strhi	r3, [r0, #0]
 8007c72:	700a      	strbls	r2, [r1, #0]
 8007c74:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c78:	bf98      	it	ls
 8007c7a:	2001      	movls	r0, #1
 8007c7c:	4770      	bx	lr
 8007c7e:	4608      	mov	r0, r1
 8007c80:	4770      	bx	lr
	...

08007c84 <fiprintf>:
 8007c84:	b40e      	push	{r1, r2, r3}
 8007c86:	b503      	push	{r0, r1, lr}
 8007c88:	4601      	mov	r1, r0
 8007c8a:	ab03      	add	r3, sp, #12
 8007c8c:	4805      	ldr	r0, [pc, #20]	; (8007ca4 <fiprintf+0x20>)
 8007c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c92:	6800      	ldr	r0, [r0, #0]
 8007c94:	9301      	str	r3, [sp, #4]
 8007c96:	f7ff fd03 	bl	80076a0 <_vfiprintf_r>
 8007c9a:	b002      	add	sp, #8
 8007c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ca0:	b003      	add	sp, #12
 8007ca2:	4770      	bx	lr
 8007ca4:	20000090 	.word	0x20000090

08007ca8 <abort>:
 8007ca8:	b508      	push	{r3, lr}
 8007caa:	2006      	movs	r0, #6
 8007cac:	f000 f82c 	bl	8007d08 <raise>
 8007cb0:	2001      	movs	r0, #1
 8007cb2:	f7fa f8af 	bl	8001e14 <_exit>

08007cb6 <_raise_r>:
 8007cb6:	291f      	cmp	r1, #31
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	4604      	mov	r4, r0
 8007cbc:	460d      	mov	r5, r1
 8007cbe:	d904      	bls.n	8007cca <_raise_r+0x14>
 8007cc0:	2316      	movs	r3, #22
 8007cc2:	6003      	str	r3, [r0, #0]
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc8:	bd38      	pop	{r3, r4, r5, pc}
 8007cca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007ccc:	b112      	cbz	r2, 8007cd4 <_raise_r+0x1e>
 8007cce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cd2:	b94b      	cbnz	r3, 8007ce8 <_raise_r+0x32>
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 f831 	bl	8007d3c <_getpid_r>
 8007cda:	462a      	mov	r2, r5
 8007cdc:	4601      	mov	r1, r0
 8007cde:	4620      	mov	r0, r4
 8007ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ce4:	f000 b818 	b.w	8007d18 <_kill_r>
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d00a      	beq.n	8007d02 <_raise_r+0x4c>
 8007cec:	1c59      	adds	r1, r3, #1
 8007cee:	d103      	bne.n	8007cf8 <_raise_r+0x42>
 8007cf0:	2316      	movs	r3, #22
 8007cf2:	6003      	str	r3, [r0, #0]
 8007cf4:	2001      	movs	r0, #1
 8007cf6:	e7e7      	b.n	8007cc8 <_raise_r+0x12>
 8007cf8:	2400      	movs	r4, #0
 8007cfa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007cfe:	4628      	mov	r0, r5
 8007d00:	4798      	blx	r3
 8007d02:	2000      	movs	r0, #0
 8007d04:	e7e0      	b.n	8007cc8 <_raise_r+0x12>
	...

08007d08 <raise>:
 8007d08:	4b02      	ldr	r3, [pc, #8]	; (8007d14 <raise+0xc>)
 8007d0a:	4601      	mov	r1, r0
 8007d0c:	6818      	ldr	r0, [r3, #0]
 8007d0e:	f7ff bfd2 	b.w	8007cb6 <_raise_r>
 8007d12:	bf00      	nop
 8007d14:	20000090 	.word	0x20000090

08007d18 <_kill_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	4d07      	ldr	r5, [pc, #28]	; (8007d38 <_kill_r+0x20>)
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	4604      	mov	r4, r0
 8007d20:	4608      	mov	r0, r1
 8007d22:	4611      	mov	r1, r2
 8007d24:	602b      	str	r3, [r5, #0]
 8007d26:	f7fa f865 	bl	8001df4 <_kill>
 8007d2a:	1c43      	adds	r3, r0, #1
 8007d2c:	d102      	bne.n	8007d34 <_kill_r+0x1c>
 8007d2e:	682b      	ldr	r3, [r5, #0]
 8007d30:	b103      	cbz	r3, 8007d34 <_kill_r+0x1c>
 8007d32:	6023      	str	r3, [r4, #0]
 8007d34:	bd38      	pop	{r3, r4, r5, pc}
 8007d36:	bf00      	nop
 8007d38:	20000528 	.word	0x20000528

08007d3c <_getpid_r>:
 8007d3c:	f7fa b852 	b.w	8001de4 <_getpid>

08007d40 <exp>:
 8007d40:	b538      	push	{r3, r4, r5, lr}
 8007d42:	ed2d 8b02 	vpush	{d8}
 8007d46:	ec55 4b10 	vmov	r4, r5, d0
 8007d4a:	f000 f84d 	bl	8007de8 <__ieee754_exp>
 8007d4e:	eeb0 8a40 	vmov.f32	s16, s0
 8007d52:	eef0 8a60 	vmov.f32	s17, s1
 8007d56:	ec45 4b10 	vmov	d0, r4, r5
 8007d5a:	f000 f839 	bl	8007dd0 <finite>
 8007d5e:	b168      	cbz	r0, 8007d7c <exp+0x3c>
 8007d60:	a317      	add	r3, pc, #92	; (adr r3, 8007dc0 <exp+0x80>)
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	4620      	mov	r0, r4
 8007d68:	4629      	mov	r1, r5
 8007d6a:	f7f8 fedd 	bl	8000b28 <__aeabi_dcmpgt>
 8007d6e:	b160      	cbz	r0, 8007d8a <exp+0x4a>
 8007d70:	f7fe f948 	bl	8006004 <__errno>
 8007d74:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8007db0 <exp+0x70>
 8007d78:	2322      	movs	r3, #34	; 0x22
 8007d7a:	6003      	str	r3, [r0, #0]
 8007d7c:	eeb0 0a48 	vmov.f32	s0, s16
 8007d80:	eef0 0a68 	vmov.f32	s1, s17
 8007d84:	ecbd 8b02 	vpop	{d8}
 8007d88:	bd38      	pop	{r3, r4, r5, pc}
 8007d8a:	a30f      	add	r3, pc, #60	; (adr r3, 8007dc8 <exp+0x88>)
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	4620      	mov	r0, r4
 8007d92:	4629      	mov	r1, r5
 8007d94:	f7f8 feaa 	bl	8000aec <__aeabi_dcmplt>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d0ef      	beq.n	8007d7c <exp+0x3c>
 8007d9c:	f7fe f932 	bl	8006004 <__errno>
 8007da0:	2322      	movs	r3, #34	; 0x22
 8007da2:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8007db8 <exp+0x78>
 8007da6:	6003      	str	r3, [r0, #0]
 8007da8:	e7e8      	b.n	8007d7c <exp+0x3c>
 8007daa:	bf00      	nop
 8007dac:	f3af 8000 	nop.w
 8007db0:	00000000 	.word	0x00000000
 8007db4:	7ff00000 	.word	0x7ff00000
	...
 8007dc0:	fefa39ef 	.word	0xfefa39ef
 8007dc4:	40862e42 	.word	0x40862e42
 8007dc8:	d52d3051 	.word	0xd52d3051
 8007dcc:	c0874910 	.word	0xc0874910

08007dd0 <finite>:
 8007dd0:	b082      	sub	sp, #8
 8007dd2:	ed8d 0b00 	vstr	d0, [sp]
 8007dd6:	9801      	ldr	r0, [sp, #4]
 8007dd8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007ddc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007de0:	0fc0      	lsrs	r0, r0, #31
 8007de2:	b002      	add	sp, #8
 8007de4:	4770      	bx	lr
	...

08007de8 <__ieee754_exp>:
 8007de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dec:	ec55 4b10 	vmov	r4, r5, d0
 8007df0:	49b5      	ldr	r1, [pc, #724]	; (80080c8 <__ieee754_exp+0x2e0>)
 8007df2:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8007df6:	428a      	cmp	r2, r1
 8007df8:	ed2d 8b04 	vpush	{d8-d9}
 8007dfc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8007e00:	d93b      	bls.n	8007e7a <__ieee754_exp+0x92>
 8007e02:	49b2      	ldr	r1, [pc, #712]	; (80080cc <__ieee754_exp+0x2e4>)
 8007e04:	428a      	cmp	r2, r1
 8007e06:	d916      	bls.n	8007e36 <__ieee754_exp+0x4e>
 8007e08:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007e0c:	4323      	orrs	r3, r4
 8007e0e:	ee10 2a10 	vmov	r2, s0
 8007e12:	d007      	beq.n	8007e24 <__ieee754_exp+0x3c>
 8007e14:	462b      	mov	r3, r5
 8007e16:	4620      	mov	r0, r4
 8007e18:	4629      	mov	r1, r5
 8007e1a:	f7f8 fa3f 	bl	800029c <__adddf3>
 8007e1e:	4604      	mov	r4, r0
 8007e20:	460d      	mov	r5, r1
 8007e22:	e002      	b.n	8007e2a <__ieee754_exp+0x42>
 8007e24:	b10e      	cbz	r6, 8007e2a <__ieee754_exp+0x42>
 8007e26:	2400      	movs	r4, #0
 8007e28:	2500      	movs	r5, #0
 8007e2a:	ecbd 8b04 	vpop	{d8-d9}
 8007e2e:	ec45 4b10 	vmov	d0, r4, r5
 8007e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e36:	a38e      	add	r3, pc, #568	; (adr r3, 8008070 <__ieee754_exp+0x288>)
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	ee10 0a10 	vmov	r0, s0
 8007e40:	4629      	mov	r1, r5
 8007e42:	f7f8 fe71 	bl	8000b28 <__aeabi_dcmpgt>
 8007e46:	4607      	mov	r7, r0
 8007e48:	b130      	cbz	r0, 8007e58 <__ieee754_exp+0x70>
 8007e4a:	ecbd 8b04 	vpop	{d8-d9}
 8007e4e:	2000      	movs	r0, #0
 8007e50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e54:	f000 b971 	b.w	800813a <__math_oflow>
 8007e58:	a387      	add	r3, pc, #540	; (adr r3, 8008078 <__ieee754_exp+0x290>)
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	4620      	mov	r0, r4
 8007e60:	4629      	mov	r1, r5
 8007e62:	f7f8 fe43 	bl	8000aec <__aeabi_dcmplt>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	f000 808b 	beq.w	8007f82 <__ieee754_exp+0x19a>
 8007e6c:	ecbd 8b04 	vpop	{d8-d9}
 8007e70:	4638      	mov	r0, r7
 8007e72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e76:	f000 b957 	b.w	8008128 <__math_uflow>
 8007e7a:	4b95      	ldr	r3, [pc, #596]	; (80080d0 <__ieee754_exp+0x2e8>)
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	f240 80ac 	bls.w	8007fda <__ieee754_exp+0x1f2>
 8007e82:	4b94      	ldr	r3, [pc, #592]	; (80080d4 <__ieee754_exp+0x2ec>)
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d87c      	bhi.n	8007f82 <__ieee754_exp+0x19a>
 8007e88:	4b93      	ldr	r3, [pc, #588]	; (80080d8 <__ieee754_exp+0x2f0>)
 8007e8a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	ee10 0a10 	vmov	r0, s0
 8007e96:	4629      	mov	r1, r5
 8007e98:	f7f8 f9fe 	bl	8000298 <__aeabi_dsub>
 8007e9c:	4b8f      	ldr	r3, [pc, #572]	; (80080dc <__ieee754_exp+0x2f4>)
 8007e9e:	00f7      	lsls	r7, r6, #3
 8007ea0:	443b      	add	r3, r7
 8007ea2:	ed93 7b00 	vldr	d7, [r3]
 8007ea6:	f1c6 0a01 	rsb	sl, r6, #1
 8007eaa:	4680      	mov	r8, r0
 8007eac:	4689      	mov	r9, r1
 8007eae:	ebaa 0a06 	sub.w	sl, sl, r6
 8007eb2:	eeb0 8a47 	vmov.f32	s16, s14
 8007eb6:	eef0 8a67 	vmov.f32	s17, s15
 8007eba:	ec53 2b18 	vmov	r2, r3, d8
 8007ebe:	4640      	mov	r0, r8
 8007ec0:	4649      	mov	r1, r9
 8007ec2:	f7f8 f9e9 	bl	8000298 <__aeabi_dsub>
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	460d      	mov	r5, r1
 8007eca:	4622      	mov	r2, r4
 8007ecc:	462b      	mov	r3, r5
 8007ece:	4620      	mov	r0, r4
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	f7f8 fb99 	bl	8000608 <__aeabi_dmul>
 8007ed6:	a36a      	add	r3, pc, #424	; (adr r3, 8008080 <__ieee754_exp+0x298>)
 8007ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007edc:	4606      	mov	r6, r0
 8007ede:	460f      	mov	r7, r1
 8007ee0:	f7f8 fb92 	bl	8000608 <__aeabi_dmul>
 8007ee4:	a368      	add	r3, pc, #416	; (adr r3, 8008088 <__ieee754_exp+0x2a0>)
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	f7f8 f9d5 	bl	8000298 <__aeabi_dsub>
 8007eee:	4632      	mov	r2, r6
 8007ef0:	463b      	mov	r3, r7
 8007ef2:	f7f8 fb89 	bl	8000608 <__aeabi_dmul>
 8007ef6:	a366      	add	r3, pc, #408	; (adr r3, 8008090 <__ieee754_exp+0x2a8>)
 8007ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efc:	f7f8 f9ce 	bl	800029c <__adddf3>
 8007f00:	4632      	mov	r2, r6
 8007f02:	463b      	mov	r3, r7
 8007f04:	f7f8 fb80 	bl	8000608 <__aeabi_dmul>
 8007f08:	a363      	add	r3, pc, #396	; (adr r3, 8008098 <__ieee754_exp+0x2b0>)
 8007f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0e:	f7f8 f9c3 	bl	8000298 <__aeabi_dsub>
 8007f12:	4632      	mov	r2, r6
 8007f14:	463b      	mov	r3, r7
 8007f16:	f7f8 fb77 	bl	8000608 <__aeabi_dmul>
 8007f1a:	a361      	add	r3, pc, #388	; (adr r3, 80080a0 <__ieee754_exp+0x2b8>)
 8007f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f20:	f7f8 f9bc 	bl	800029c <__adddf3>
 8007f24:	4632      	mov	r2, r6
 8007f26:	463b      	mov	r3, r7
 8007f28:	f7f8 fb6e 	bl	8000608 <__aeabi_dmul>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4620      	mov	r0, r4
 8007f32:	4629      	mov	r1, r5
 8007f34:	f7f8 f9b0 	bl	8000298 <__aeabi_dsub>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4606      	mov	r6, r0
 8007f3e:	460f      	mov	r7, r1
 8007f40:	4620      	mov	r0, r4
 8007f42:	4629      	mov	r1, r5
 8007f44:	f7f8 fb60 	bl	8000608 <__aeabi_dmul>
 8007f48:	ec41 0b19 	vmov	d9, r0, r1
 8007f4c:	f1ba 0f00 	cmp.w	sl, #0
 8007f50:	d15d      	bne.n	800800e <__ieee754_exp+0x226>
 8007f52:	2200      	movs	r2, #0
 8007f54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f58:	4630      	mov	r0, r6
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	f7f8 f99c 	bl	8000298 <__aeabi_dsub>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	ec51 0b19 	vmov	r0, r1, d9
 8007f68:	f7f8 fc78 	bl	800085c <__aeabi_ddiv>
 8007f6c:	4622      	mov	r2, r4
 8007f6e:	462b      	mov	r3, r5
 8007f70:	f7f8 f992 	bl	8000298 <__aeabi_dsub>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	2000      	movs	r0, #0
 8007f7a:	4959      	ldr	r1, [pc, #356]	; (80080e0 <__ieee754_exp+0x2f8>)
 8007f7c:	f7f8 f98c 	bl	8000298 <__aeabi_dsub>
 8007f80:	e74d      	b.n	8007e1e <__ieee754_exp+0x36>
 8007f82:	4b58      	ldr	r3, [pc, #352]	; (80080e4 <__ieee754_exp+0x2fc>)
 8007f84:	4620      	mov	r0, r4
 8007f86:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	a346      	add	r3, pc, #280	; (adr r3, 80080a8 <__ieee754_exp+0x2c0>)
 8007f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f92:	f7f8 fb39 	bl	8000608 <__aeabi_dmul>
 8007f96:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f9a:	f7f8 f97f 	bl	800029c <__adddf3>
 8007f9e:	f7f8 fde3 	bl	8000b68 <__aeabi_d2iz>
 8007fa2:	4682      	mov	sl, r0
 8007fa4:	f7f8 fac6 	bl	8000534 <__aeabi_i2d>
 8007fa8:	a341      	add	r3, pc, #260	; (adr r3, 80080b0 <__ieee754_exp+0x2c8>)
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	4606      	mov	r6, r0
 8007fb0:	460f      	mov	r7, r1
 8007fb2:	f7f8 fb29 	bl	8000608 <__aeabi_dmul>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4620      	mov	r0, r4
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	f7f8 f96b 	bl	8000298 <__aeabi_dsub>
 8007fc2:	a33d      	add	r3, pc, #244	; (adr r3, 80080b8 <__ieee754_exp+0x2d0>)
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	4680      	mov	r8, r0
 8007fca:	4689      	mov	r9, r1
 8007fcc:	4630      	mov	r0, r6
 8007fce:	4639      	mov	r1, r7
 8007fd0:	f7f8 fb1a 	bl	8000608 <__aeabi_dmul>
 8007fd4:	ec41 0b18 	vmov	d8, r0, r1
 8007fd8:	e76f      	b.n	8007eba <__ieee754_exp+0xd2>
 8007fda:	4b43      	ldr	r3, [pc, #268]	; (80080e8 <__ieee754_exp+0x300>)
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d811      	bhi.n	8008004 <__ieee754_exp+0x21c>
 8007fe0:	a337      	add	r3, pc, #220	; (adr r3, 80080c0 <__ieee754_exp+0x2d8>)
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	ee10 0a10 	vmov	r0, s0
 8007fea:	4629      	mov	r1, r5
 8007fec:	f7f8 f956 	bl	800029c <__adddf3>
 8007ff0:	4b3b      	ldr	r3, [pc, #236]	; (80080e0 <__ieee754_exp+0x2f8>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f7f8 fd98 	bl	8000b28 <__aeabi_dcmpgt>
 8007ff8:	b138      	cbz	r0, 800800a <__ieee754_exp+0x222>
 8007ffa:	4b39      	ldr	r3, [pc, #228]	; (80080e0 <__ieee754_exp+0x2f8>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	4620      	mov	r0, r4
 8008000:	4629      	mov	r1, r5
 8008002:	e70a      	b.n	8007e1a <__ieee754_exp+0x32>
 8008004:	f04f 0a00 	mov.w	sl, #0
 8008008:	e75f      	b.n	8007eca <__ieee754_exp+0xe2>
 800800a:	4682      	mov	sl, r0
 800800c:	e75d      	b.n	8007eca <__ieee754_exp+0xe2>
 800800e:	4632      	mov	r2, r6
 8008010:	463b      	mov	r3, r7
 8008012:	2000      	movs	r0, #0
 8008014:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008018:	f7f8 f93e 	bl	8000298 <__aeabi_dsub>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	ec51 0b19 	vmov	r0, r1, d9
 8008024:	f7f8 fc1a 	bl	800085c <__aeabi_ddiv>
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	ec51 0b18 	vmov	r0, r1, d8
 8008030:	f7f8 f932 	bl	8000298 <__aeabi_dsub>
 8008034:	4642      	mov	r2, r8
 8008036:	464b      	mov	r3, r9
 8008038:	f7f8 f92e 	bl	8000298 <__aeabi_dsub>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	2000      	movs	r0, #0
 8008042:	4927      	ldr	r1, [pc, #156]	; (80080e0 <__ieee754_exp+0x2f8>)
 8008044:	f7f8 f928 	bl	8000298 <__aeabi_dsub>
 8008048:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800804c:	4592      	cmp	sl, r2
 800804e:	db02      	blt.n	8008056 <__ieee754_exp+0x26e>
 8008050:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008054:	e6e3      	b.n	8007e1e <__ieee754_exp+0x36>
 8008056:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800805a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800805e:	2200      	movs	r2, #0
 8008060:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8008064:	f7f8 fad0 	bl	8000608 <__aeabi_dmul>
 8008068:	e6d9      	b.n	8007e1e <__ieee754_exp+0x36>
 800806a:	bf00      	nop
 800806c:	f3af 8000 	nop.w
 8008070:	fefa39ef 	.word	0xfefa39ef
 8008074:	40862e42 	.word	0x40862e42
 8008078:	d52d3051 	.word	0xd52d3051
 800807c:	c0874910 	.word	0xc0874910
 8008080:	72bea4d0 	.word	0x72bea4d0
 8008084:	3e663769 	.word	0x3e663769
 8008088:	c5d26bf1 	.word	0xc5d26bf1
 800808c:	3ebbbd41 	.word	0x3ebbbd41
 8008090:	af25de2c 	.word	0xaf25de2c
 8008094:	3f11566a 	.word	0x3f11566a
 8008098:	16bebd93 	.word	0x16bebd93
 800809c:	3f66c16c 	.word	0x3f66c16c
 80080a0:	5555553e 	.word	0x5555553e
 80080a4:	3fc55555 	.word	0x3fc55555
 80080a8:	652b82fe 	.word	0x652b82fe
 80080ac:	3ff71547 	.word	0x3ff71547
 80080b0:	fee00000 	.word	0xfee00000
 80080b4:	3fe62e42 	.word	0x3fe62e42
 80080b8:	35793c76 	.word	0x35793c76
 80080bc:	3dea39ef 	.word	0x3dea39ef
 80080c0:	8800759c 	.word	0x8800759c
 80080c4:	7e37e43c 	.word	0x7e37e43c
 80080c8:	40862e41 	.word	0x40862e41
 80080cc:	7fefffff 	.word	0x7fefffff
 80080d0:	3fd62e42 	.word	0x3fd62e42
 80080d4:	3ff0a2b1 	.word	0x3ff0a2b1
 80080d8:	0800f6f0 	.word	0x0800f6f0
 80080dc:	0800f700 	.word	0x0800f700
 80080e0:	3ff00000 	.word	0x3ff00000
 80080e4:	0800f6e0 	.word	0x0800f6e0
 80080e8:	3defffff 	.word	0x3defffff

080080ec <with_errno>:
 80080ec:	b570      	push	{r4, r5, r6, lr}
 80080ee:	4604      	mov	r4, r0
 80080f0:	460d      	mov	r5, r1
 80080f2:	4616      	mov	r6, r2
 80080f4:	f7fd ff86 	bl	8006004 <__errno>
 80080f8:	4629      	mov	r1, r5
 80080fa:	6006      	str	r6, [r0, #0]
 80080fc:	4620      	mov	r0, r4
 80080fe:	bd70      	pop	{r4, r5, r6, pc}

08008100 <xflow>:
 8008100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008102:	4614      	mov	r4, r2
 8008104:	461d      	mov	r5, r3
 8008106:	b108      	cbz	r0, 800810c <xflow+0xc>
 8008108:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800810c:	e9cd 2300 	strd	r2, r3, [sp]
 8008110:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008114:	4620      	mov	r0, r4
 8008116:	4629      	mov	r1, r5
 8008118:	f7f8 fa76 	bl	8000608 <__aeabi_dmul>
 800811c:	2222      	movs	r2, #34	; 0x22
 800811e:	b003      	add	sp, #12
 8008120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008124:	f7ff bfe2 	b.w	80080ec <with_errno>

08008128 <__math_uflow>:
 8008128:	b508      	push	{r3, lr}
 800812a:	2200      	movs	r2, #0
 800812c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008130:	f7ff ffe6 	bl	8008100 <xflow>
 8008134:	ec41 0b10 	vmov	d0, r0, r1
 8008138:	bd08      	pop	{r3, pc}

0800813a <__math_oflow>:
 800813a:	b508      	push	{r3, lr}
 800813c:	2200      	movs	r2, #0
 800813e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008142:	f7ff ffdd 	bl	8008100 <xflow>
 8008146:	ec41 0b10 	vmov	d0, r0, r1
 800814a:	bd08      	pop	{r3, pc}

0800814c <_init>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	bf00      	nop
 8008150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008152:	bc08      	pop	{r3}
 8008154:	469e      	mov	lr, r3
 8008156:	4770      	bx	lr

08008158 <_fini>:
 8008158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815a:	bf00      	nop
 800815c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815e:	bc08      	pop	{r3}
 8008160:	469e      	mov	lr, r3
 8008162:	4770      	bx	lr
